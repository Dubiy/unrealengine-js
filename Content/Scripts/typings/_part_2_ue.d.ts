declare class ARDependencyHandler extends UObject { 
	static Load(ResourceName: string): ARDependencyHandler;
	static Find(Outer: UObject, ResourceName: string): ARDependencyHandler;
	static GetDefaultObject(): ARDependencyHandler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARDependencyHandler;
	StartARSessionLatent(WorldContextObject: UObject,SessionConfig: ARSessionConfig,LatentInfo: LatentActionInfo): void;
	RequestARSessionPermission(WorldContextObject: UObject,SessionConfig: ARSessionConfig,LatentInfo: LatentActionInfo,OutPermissionResult?: EARServicePermissionRequestResult): {OutPermissionResult: EARServicePermissionRequestResult};
	InstallARService(WorldContextObject: UObject,LatentInfo: LatentActionInfo,OutInstallResult?: EARServiceInstallRequestResult): {OutInstallResult: EARServiceInstallRequestResult};
	static GetARDependencyHandler(): ARDependencyHandler;
	CheckARServiceAvailability(WorldContextObject: UObject,LatentInfo: LatentActionInfo,OutAvailability?: EARServiceAvailability): {OutAvailability: EARServiceAvailability};
	static C(Other: UObject | any): ARDependencyHandler;
}

declare type EARGeoTrackingStateReason = 'None' | 'NotAvailableAtLocation' | 'NeedLocationPermissions' | 'DevicePointedTooLow' | 'WorldTrackingUnstable' | 'WaitingForLocation' | 'GeoDataNotLoaded' | 'VisualLocalizationFailed' | 'WaitingForAvailabilityCheck' | 'EARGeoTrackingStateReason_MAX';
declare var EARGeoTrackingStateReason : { None:'None',NotAvailableAtLocation:'NotAvailableAtLocation',NeedLocationPermissions:'NeedLocationPermissions',DevicePointedTooLow:'DevicePointedTooLow',WorldTrackingUnstable:'WorldTrackingUnstable',WaitingForLocation:'WaitingForLocation',GeoDataNotLoaded:'GeoDataNotLoaded',VisualLocalizationFailed:'VisualLocalizationFailed',WaitingForAvailabilityCheck:'WaitingForAvailabilityCheck',EARGeoTrackingStateReason_MAX:'EARGeoTrackingStateReason_MAX', };
declare type EARGeoTrackingState = 'Initializing' | 'Localized' | 'Localizing' | 'NotAvailable' | 'EARGeoTrackingState_MAX';
declare var EARGeoTrackingState : { Initializing:'Initializing',Localized:'Localized',Localizing:'Localizing',NotAvailable:'NotAvailable',EARGeoTrackingState_MAX:'EARGeoTrackingState_MAX', };
declare type EARGeoTrackingAccuracy = 'Undetermined' | 'Low' | 'Medium' | 'High' | 'EARGeoTrackingAccuracy_MAX';
declare var EARGeoTrackingAccuracy : { Undetermined:'Undetermined',Low:'Low',Medium:'Medium',High:'High',EARGeoTrackingAccuracy_MAX:'EARGeoTrackingAccuracy_MAX', };
declare class ARGeoTrackingSupport extends UObject { 
	static Load(ResourceName: string): ARGeoTrackingSupport;
	static Find(Outer: UObject, ResourceName: string): ARGeoTrackingSupport;
	static GetDefaultObject(): ARGeoTrackingSupport;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARGeoTrackingSupport;
	static GetGeoTrackingSupport(): ARGeoTrackingSupport;
	GetGeoTrackingStateReason(): EARGeoTrackingStateReason;
	GetGeoTrackingState(): EARGeoTrackingState;
	GetGeoTrackingAccuracy(): EARGeoTrackingAccuracy;
	AddGeoAnchorAtLocationWithAltitude(Longitude: number,Latitude: number,AltitudeMeters: number,OptionalAnchorName: string): boolean;
	AddGeoAnchorAtLocation(Longitude: number,Latitude: number,OptionalAnchorName: string): boolean;
	static C(Other: UObject | any): ARGeoTrackingSupport;
}

declare class CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy extends ARBaseAsyncTaskBlueprintProxy { 
	OnSuccess: UnrealEngineMulticastDelegate<(bIsAvailable: boolean, Error: string) => void>;
	OnFailed: UnrealEngineMulticastDelegate<(bIsAvailable: boolean, Error: string) => void>;
	static Load(ResourceName: string): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static Find(Outer: UObject, ResourceName: string): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static GetDefaultObject(): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static CheckGeoTrackingAvailabilityAtLocation(WorldContextObject: UObject,Longitude: number,Latitude: number): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static CheckGeoTrackingAvailability(WorldContextObject: UObject): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
	static C(Other: UObject | any): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy;
}

declare class GetGeoLocationAsyncTaskBlueprintProxy extends ARBaseAsyncTaskBlueprintProxy { 
	OnSuccess: UnrealEngineMulticastDelegate<(Longitude: number, Latitude: number, Altitude: number, Error: string) => void>;
	OnFailed: UnrealEngineMulticastDelegate<(Longitude: number, Latitude: number, Altitude: number, Error: string) => void>;
	static Load(ResourceName: string): GetGeoLocationAsyncTaskBlueprintProxy;
	static Find(Outer: UObject, ResourceName: string): GetGeoLocationAsyncTaskBlueprintProxy;
	static GetDefaultObject(): GetGeoLocationAsyncTaskBlueprintProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GetGeoLocationAsyncTaskBlueprintProxy;
	static GetGeoLocationAtWorldPosition(WorldContextObject: UObject,WorldPosition: Vector): GetGeoLocationAsyncTaskBlueprintProxy;
	static C(Other: UObject | any): GetGeoLocationAsyncTaskBlueprintProxy;
}

declare class ARLifeCycleComponent extends SceneComponent { 
	OnARActorSpawnedDelegate: UnrealEngineMulticastDelegate<(ComponentClass: UnrealEngineClass, NativeID: Guid, SpawnedActor: ARActor) => void>;
	OnARActorToBeDestroyedDelegate: UnrealEngineMulticastDelegate<(Actor: ARActor) => void>;
	static Load(ResourceName: string): ARLifeCycleComponent;
	static Find(Outer: UObject, ResourceName: string): ARLifeCycleComponent;
	static GetDefaultObject(): ARLifeCycleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARLifeCycleComponent;
	ServerSpawnARActor(ComponentClass: UnrealEngineClass,NativeID: Guid): void;
	ServerDestroyARActor(Actor: ARActor): void;
	static C(Other: UObject | any): ARLifeCycleComponent;
}

declare class ARBasicLightEstimate extends ARLightEstimate { 
	AmbientIntensityLumens: number;
	AmbientColorTemperatureKelvin: number;
	AmbientColor: LinearColor;
	static Load(ResourceName: string): ARBasicLightEstimate;
	static Find(Outer: UObject, ResourceName: string): ARBasicLightEstimate;
	static GetDefaultObject(): ARBasicLightEstimate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARBasicLightEstimate;
	GetAmbientIntensityLumens(): number;
	GetAmbientColorTemperatureKelvin(): number;
	GetAmbientColor(): LinearColor;
	static C(Other: UObject | any): ARBasicLightEstimate;
}

declare class AROriginActor extends Actor { 
	static GetDefaultObject(): AROriginActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AROriginActor;
	static C(Other: UObject | any): AROriginActor;
}

declare class GameMode extends GameModeBase { 
	MatchState: string;
	bDelayedStart: boolean;
	NumSpectators: number;
	NumPlayers: number;
	NumBots: number;
	MinRespawnDelay: number;
	NumTravellingPlayers: number;
	EngineMessageClass: UnrealEngineClass;
	InactivePlayerArray: PlayerState[];
	InactivePlayerStateLifeSpan: number;
	MaxInactivePlayers: number;
	bHandleDedicatedServerReplays: boolean;
	static GetDefaultObject(): GameMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameMode;
	StartMatch(): void;
	Say(Msg: string): void;
	RestartGame(): void;
	ReadyToStartMatch(): boolean;
	ReadyToEndMatch(): boolean;
	K2_OnSetMatchState(NewState: string): void;
	IsMatchInProgress(): boolean;
	GetMatchState(): string;
	EndMatch(): void;
	AbortMatch(): void;
	static C(Other: UObject | any): GameMode;
}

declare class GameState extends GameStateBase { 
	MatchState: string;
	PreviousMatchState: string;
	ElapsedTime: number;
	static GetDefaultObject(): GameState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameState;
	OnRep_MatchState(): void;
	OnRep_ElapsedTime(): void;
	static C(Other: UObject | any): GameState;
}

declare class ARSharedWorldGameState extends GameState { 
	PreviewImageData: number[];
	ARWorldData: number[];
	PreviewImageBytesTotal: number;
	ARWorldBytesTotal: number;
	PreviewImageBytesDelivered: number;
	ARWorldBytesDelivered: number;
	static GetDefaultObject(): ARSharedWorldGameState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSharedWorldGameState;
	K2_OnARWorldMapIsReady(): void;
	static C(Other: UObject | any): ARSharedWorldGameState;
}

declare class ARSharedWorldGameMode extends GameMode { 
	BufferSizePerChunk: number;
	static GetDefaultObject(): ARSharedWorldGameMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSharedWorldGameMode;
	SetPreviewImageData(ImageData: number[]): void;
	SetARWorldSharingIsReady(): void;
	SetARSharedWorldData(ARWorldData: number[]): void;
	GetARSharedWorldGameState(): ARSharedWorldGameState;
	static C(Other: UObject | any): ARSharedWorldGameMode;
}

declare class ARSharedWorldPlayerController extends PlayerController { 
	static GetDefaultObject(): ARSharedWorldPlayerController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSharedWorldPlayerController;
	ServerMarkReadyForReceiving(): void;
	ClientUpdatePreviewImageData(Offset: number,Buffer: number[]): void;
	ClientUpdateARWorldData(Offset: number,Buffer: number[]): void;
	ClientInitSharedWorld(PreviewImageSize: number,ARWorldDataSize: number): void;
	static C(Other: UObject | any): ARSharedWorldPlayerController;
}

declare type ECastRayTracedShadow = 'Disabled' | 'UseProjectSetting' | 'Enabled' | 'ECastRayTracedShadow_MAX';
declare var ECastRayTracedShadow : { Disabled:'Disabled',UseProjectSetting:'UseProjectSetting',Enabled:'Enabled',ECastRayTracedShadow_MAX:'ECastRayTracedShadow_MAX', };
declare class LightComponentBase extends SceneComponent { 
	LightGuid: Guid;
	Brightness: number;
	Intensity: number;
	LightColor: Color;
	bAffectsWorld: boolean;
	CastShadows: boolean;
	CastStaticShadows: boolean;
	CastDynamicShadows: boolean;
	bAffectTranslucentLighting: boolean;
	bTransmission: boolean;
	bCastVolumetricShadow: boolean;
	bCastDeepShadow: boolean;
	bCastRaytracedShadow: boolean;
	CastRaytracedShadow: ECastRayTracedShadow;
	bAffectReflection: boolean;
	bAffectGlobalIllumination: boolean;
	DeepShadowLayerDistribution: number;
	IndirectLightingIntensity: number;
	VolumetricScatteringIntensity: number;
	SamplesPerPixel: number;
	StaticEditorTexture: Texture2D;
	StaticEditorTextureScale: number;
	DynamicEditorTexture: Texture2D;
	DynamicEditorTextureScale: number;
	static Load(ResourceName: string): LightComponentBase;
	static Find(Outer: UObject, ResourceName: string): LightComponentBase;
	static GetDefaultObject(): LightComponentBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponentBase;
	SetSamplesPerPixel(NewValue: number): void;
	SetCastVolumetricShadow(bNewValue: boolean): void;
	SetCastShadows(bNewValue: boolean): void;
	SetCastRaytracedShadows(bNewValue: ECastRayTracedShadow): void;
	SetCastRaytracedShadow(bNewValue: boolean): void;
	SetCastDeepShadow(bNewValue: boolean): void;
	SetAffectReflection(bNewValue: boolean): void;
	SetAffectGlobalIllumination(bNewValue: boolean): void;
	GetLightColor(): LinearColor;
	static C(Other: UObject | any): LightComponentBase;
}

declare type ESkyLightSourceType = 'SLS_CapturedScene' | 'SLS_SpecifiedCubemap' | 'SLS_MAX';
declare var ESkyLightSourceType : { SLS_CapturedScene:'SLS_CapturedScene',SLS_SpecifiedCubemap:'SLS_SpecifiedCubemap',SLS_MAX:'SLS_MAX', };
declare type EOcclusionCombineMode = 'OCM_Minimum' | 'OCM_Multiply' | 'OCM_MAX';
declare var EOcclusionCombineMode : { OCM_Minimum:'OCM_Minimum',OCM_Multiply:'OCM_Multiply',OCM_MAX:'OCM_MAX', };
declare class SkyLightComponent extends LightComponentBase { 
	bRealTimeCapture: boolean;
	SourceType: ESkyLightSourceType;
	Cubemap: TextureCube;
	SourceCubemapAngle: number;
	CubemapResolution: number;
	SkyDistanceThreshold: number;
	bCaptureEmissiveOnly: boolean;
	bLowerHemisphereIsBlack: boolean;
	LowerHemisphereColor: LinearColor;
	OcclusionMaxDistance: number;
	Contrast: number;
	OcclusionExponent: number;
	MinOcclusion: number;
	OcclusionTint: Color;
	bCloudAmbientOcclusion: boolean;
	CloudAmbientOcclusionStrength: number;
	CloudAmbientOcclusionExtent: number;
	CloudAmbientOcclusionMapResolutionScale: number;
	CloudAmbientOcclusionApertureScale: number;
	OcclusionCombineMode: EOcclusionCombineMode;
	BlendDestinationCubemap: TextureCube;
	static Load(ResourceName: string): SkyLightComponent;
	static Find(Outer: UObject, ResourceName: string): SkyLightComponent;
	static GetDefaultObject(): SkyLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLightComponent;
	SetVolumetricScatteringIntensity(NewIntensity: number): void;
	SetOcclusionTint(InTint: Color): void;
	SetOcclusionExponent(InOcclusionExponent: number): void;
	SetOcclusionContrast(InOcclusionContrast: number): void;
	SetMinOcclusion(InMinOcclusion: number): void;
	SetLowerHemisphereColor(InLowerHemisphereColor: LinearColor): void;
	SetLightColor(NewLightColor: LinearColor): void;
	SetIntensity(NewIntensity: number): void;
	SetIndirectLightingIntensity(NewIntensity: number): void;
	SetCubemapBlend(SourceCubemap: TextureCube,DestinationCubemap: TextureCube,InBlendFraction: number): void;
	SetCubemap(NewCubemap: TextureCube): void;
	RecaptureSky(): void;
	static C(Other: UObject | any): SkyLightComponent;
}

declare class SkyLight extends Info { 
	LightComponent: SkyLightComponent;
	bEnabled: boolean;
	static GetDefaultObject(): SkyLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLight;
	OnRep_bEnabled(): void;
	static C(Other: UObject | any): SkyLight;
}

declare class ARSkyLight extends SkyLight { 
	CaptureProbe: AREnvironmentCaptureProbe;
	static GetDefaultObject(): ARSkyLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSkyLight;
	SetEnvironmentCaptureProbe(InCaptureProbe: AREnvironmentCaptureProbe): void;
	static C(Other: UObject | any): ARSkyLight;
}

declare class ARTraceResultDummy extends UObject { 
	static Load(ResourceName: string): ARTraceResultDummy;
	static Find(Outer: UObject, ResourceName: string): ARTraceResultDummy;
	static GetDefaultObject(): ARTraceResultDummy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTraceResultDummy;
	static C(Other: UObject | any): ARTraceResultDummy;
}

declare class ARTrackedQRCode extends ARTrackedImage { 
	QRCode: string;
	Version: number;
	static Load(ResourceName: string): ARTrackedQRCode;
	static Find(Outer: UObject, ResourceName: string): ARTrackedQRCode;
	static GetDefaultObject(): ARTrackedQRCode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedQRCode;
	static C(Other: UObject | any): ARTrackedQRCode;
}

declare type EAREye = 'LeftEye' | 'RightEye' | 'EAREye_MAX';
declare var EAREye : { LeftEye:'LeftEye',RightEye:'RightEye',EAREye_MAX:'EAREye_MAX', };
declare type EARFaceBlendShape = 'EyeBlinkLeft' | 'EyeLookDownLeft' | 'EyeLookInLeft' | 'EyeLookOutLeft' | 'EyeLookUpLeft' | 'EyeSquintLeft' | 'EyeWideLeft' | 'EyeBlinkRight' | 'EyeLookDownRight' | 'EyeLookInRight' | 'EyeLookOutRight' | 'EyeLookUpRight' | 'EyeSquintRight' | 'EyeWideRight' | 'JawForward' | 'JawLeft' | 'JawRight' | 'JawOpen' | 'MouthClose' | 'MouthFunnel' | 'MouthPucker' | 'MouthLeft' | 'MouthRight' | 'MouthSmileLeft' | 'MouthSmileRight' | 'MouthFrownLeft' | 'MouthFrownRight' | 'MouthDimpleLeft' | 'MouthDimpleRight' | 'MouthStretchLeft' | 'MouthStretchRight' | 'MouthRollLower' | 'MouthRollUpper' | 'MouthShrugLower' | 'MouthShrugUpper' | 'MouthPressLeft' | 'MouthPressRight' | 'MouthLowerDownLeft' | 'MouthLowerDownRight' | 'MouthUpperUpLeft' | 'MouthUpperUpRight' | 'BrowDownLeft' | 'BrowDownRight' | 'BrowInnerUp' | 'BrowOuterUpLeft' | 'BrowOuterUpRight' | 'CheekPuff' | 'CheekSquintLeft' | 'CheekSquintRight' | 'NoseSneerLeft' | 'NoseSneerRight' | 'TongueOut' | 'HeadYaw' | 'HeadPitch' | 'HeadRoll' | 'LeftEyeYaw' | 'LeftEyePitch' | 'LeftEyeRoll' | 'RightEyeYaw' | 'RightEyePitch' | 'RightEyeRoll' | 'MAX';
declare var EARFaceBlendShape : { EyeBlinkLeft:'EyeBlinkLeft',EyeLookDownLeft:'EyeLookDownLeft',EyeLookInLeft:'EyeLookInLeft',EyeLookOutLeft:'EyeLookOutLeft',EyeLookUpLeft:'EyeLookUpLeft',EyeSquintLeft:'EyeSquintLeft',EyeWideLeft:'EyeWideLeft',EyeBlinkRight:'EyeBlinkRight',EyeLookDownRight:'EyeLookDownRight',EyeLookInRight:'EyeLookInRight',EyeLookOutRight:'EyeLookOutRight',EyeLookUpRight:'EyeLookUpRight',EyeSquintRight:'EyeSquintRight',EyeWideRight:'EyeWideRight',JawForward:'JawForward',JawLeft:'JawLeft',JawRight:'JawRight',JawOpen:'JawOpen',MouthClose:'MouthClose',MouthFunnel:'MouthFunnel',MouthPucker:'MouthPucker',MouthLeft:'MouthLeft',MouthRight:'MouthRight',MouthSmileLeft:'MouthSmileLeft',MouthSmileRight:'MouthSmileRight',MouthFrownLeft:'MouthFrownLeft',MouthFrownRight:'MouthFrownRight',MouthDimpleLeft:'MouthDimpleLeft',MouthDimpleRight:'MouthDimpleRight',MouthStretchLeft:'MouthStretchLeft',MouthStretchRight:'MouthStretchRight',MouthRollLower:'MouthRollLower',MouthRollUpper:'MouthRollUpper',MouthShrugLower:'MouthShrugLower',MouthShrugUpper:'MouthShrugUpper',MouthPressLeft:'MouthPressLeft',MouthPressRight:'MouthPressRight',MouthLowerDownLeft:'MouthLowerDownLeft',MouthLowerDownRight:'MouthLowerDownRight',MouthUpperUpLeft:'MouthUpperUpLeft',MouthUpperUpRight:'MouthUpperUpRight',BrowDownLeft:'BrowDownLeft',BrowDownRight:'BrowDownRight',BrowInnerUp:'BrowInnerUp',BrowOuterUpLeft:'BrowOuterUpLeft',BrowOuterUpRight:'BrowOuterUpRight',CheekPuff:'CheekPuff',CheekSquintLeft:'CheekSquintLeft',CheekSquintRight:'CheekSquintRight',NoseSneerLeft:'NoseSneerLeft',NoseSneerRight:'NoseSneerRight',TongueOut:'TongueOut',HeadYaw:'HeadYaw',HeadPitch:'HeadPitch',HeadRoll:'HeadRoll',LeftEyeYaw:'LeftEyeYaw',LeftEyePitch:'LeftEyePitch',LeftEyeRoll:'LeftEyeRoll',RightEyeYaw:'RightEyeYaw',RightEyePitch:'RightEyePitch',RightEyeRoll:'RightEyeRoll',MAX:'MAX', };
declare class ARFaceGeometry extends ARTrackedGeometry { 
	LookAtTarget: Vector;
	bIsTracked: boolean;
	BlendShapes: any;
	LeftEyeTransform: Transform;
	RightEyeTransform: Transform;
	static Load(ResourceName: string): ARFaceGeometry;
	static Find(Outer: UObject, ResourceName: string): ARFaceGeometry;
	static GetDefaultObject(): ARFaceGeometry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARFaceGeometry;
	GetWorldSpaceEyeTransform(Eye: EAREye): Transform;
	GetLocalSpaceEyeTransform(Eye: EAREye): Transform;
	GetBlendShapeValue(BlendShape: EARFaceBlendShape): number;
	GetBlendShapes(): any;
	static C(Other: UObject | any): ARFaceGeometry;
}

declare class ARTrackedObject extends ARTrackedGeometry { 
	DetectedObject: ARCandidateObject;
	static Load(ResourceName: string): ARTrackedObject;
	static Find(Outer: UObject, ResourceName: string): ARTrackedObject;
	static GetDefaultObject(): ARTrackedObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedObject;
	GetDetectedObject(): ARCandidateObject;
	static C(Other: UObject | any): ARTrackedObject;
}

declare class ARMeshGeometry extends ARTrackedGeometry { 
	static Load(ResourceName: string): ARMeshGeometry;
	static Find(Outer: UObject, ResourceName: string): ARMeshGeometry;
	static GetDefaultObject(): ARMeshGeometry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARMeshGeometry;
	GetObjectClassificationAtLocation(InWorldLocation: Vector,OutClassification?: EARObjectClassification,OutClassificationLocation?: Vector,MaxLocationDiff?: number): {OutClassification: EARObjectClassification, OutClassificationLocation: Vector, $: boolean};
	static C(Other: UObject | any): ARMeshGeometry;
}

declare class ARGeoAnchor extends ARTrackedGeometry { 
	static Load(ResourceName: string): ARGeoAnchor;
	static Find(Outer: UObject, ResourceName: string): ARGeoAnchor;
	static GetDefaultObject(): ARGeoAnchor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARGeoAnchor;
	GetLongitude(): number;
	GetLatitude(): number;
	GetAltitudeSource(): EARAltitudeSource;
	GetAltitudeMeters(): number;
	static C(Other: UObject | any): ARGeoAnchor;
}

declare class ARTrackableNotifyComponent extends ActorComponent { 
	OnAddTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) => void>;
	OnUpdateTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) => void>;
	OnRemoveTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) => void>;
	OnAddTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) => void>;
	OnUpdateTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) => void>;
	OnRemoveTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) => void>;
	OnAddTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) => void>;
	OnUpdateTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) => void>;
	OnRemoveTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) => void>;
	OnAddTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) => void>;
	OnUpdateTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) => void>;
	OnRemoveTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) => void>;
	OnAddTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) => void>;
	OnUpdateTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) => void>;
	OnRemoveTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) => void>;
	OnAddTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) => void>;
	OnUpdateTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) => void>;
	OnRemoveTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) => void>;
	OnAddTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) => void>;
	OnUpdateTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) => void>;
	OnRemoveTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) => void>;
	static Load(ResourceName: string): ARTrackableNotifyComponent;
	static Find(Outer: UObject, ResourceName: string): ARTrackableNotifyComponent;
	static GetDefaultObject(): ARTrackableNotifyComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackableNotifyComponent;
	static C(Other: UObject | any): ARTrackableNotifyComponent;
}

declare class ARTypesDummyClass extends UObject { 
	static Load(ResourceName: string): ARTypesDummyClass;
	static Find(Outer: UObject, ResourceName: string): ARTypesDummyClass;
	static GetDefaultObject(): ARTypesDummyClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTypesDummyClass;
	static C(Other: UObject | any): ARTypesDummyClass;
}

declare type ESpectatorScreenMode = 'Disabled' | 'SingleEyeLetterboxed' | 'Undistorted' | 'Distorted' | 'SingleEye' | 'SingleEyeCroppedToFill' | 'Texture' | 'TexturePlusEye' | 'ESpectatorScreenMode_MAX';
declare var ESpectatorScreenMode : { Disabled:'Disabled',SingleEyeLetterboxed:'SingleEyeLetterboxed',Undistorted:'Undistorted',Distorted:'Distorted',SingleEye:'SingleEye',SingleEyeCroppedToFill:'SingleEyeCroppedToFill',Texture:'Texture',TexturePlusEye:'TexturePlusEye',ESpectatorScreenMode_MAX:'ESpectatorScreenMode_MAX', };
declare type EOrientPositionSelector = 'Orientation' | 'Position' | 'OrientationAndPosition' | 'EOrientPositionSelector_MAX';
declare var EOrientPositionSelector : { Orientation:'Orientation',Position:'Position',OrientationAndPosition:'OrientationAndPosition',EOrientPositionSelector_MAX:'EOrientPositionSelector_MAX', };
declare type EHMDWornState = 'Unknown' | 'Worn' | 'NotWorn' | 'EHMDWornState_MAX';
declare var EHMDWornState : { Unknown:'Unknown',Worn:'Worn',NotWorn:'NotWorn',EHMDWornState_MAX:'EHMDWornState_MAX', };
declare type EXRTrackedDeviceType = 'HeadMountedDisplay' | 'Controller' | 'TrackingReference' | 'Other' | 'Invalid' | 'Any' | 'EXRTrackedDeviceType_MAX';
declare var EXRTrackedDeviceType : { HeadMountedDisplay:'HeadMountedDisplay',Controller:'Controller',TrackingReference:'TrackingReference',Other:'Other',Invalid:'Invalid',Any:'Any',EXRTrackedDeviceType_MAX:'EXRTrackedDeviceType_MAX', };
declare type EXRDeviceConnectionResult = 'NoTrackingSystem' | 'FeatureNotSupported' | 'NoValidViewport' | 'MiscFailure' | 'Success' | 'EXRDeviceConnectionResult_MAX';
declare var EXRDeviceConnectionResult : { NoTrackingSystem:'NoTrackingSystem',FeatureNotSupported:'FeatureNotSupported',NoValidViewport:'NoValidViewport',MiscFailure:'MiscFailure',Success:'Success',EXRDeviceConnectionResult_MAX:'EXRDeviceConnectionResult_MAX', };
declare type ESpatialInputGestureAxis = 'None' | 'Manipulation' | 'Navigation' | 'NavigationRails' | 'ESpatialInputGestureAxis_MAX';
declare var ESpatialInputGestureAxis : { None:'None',Manipulation:'Manipulation',Navigation:'Navigation',NavigationRails:'NavigationRails',ESpatialInputGestureAxis_MAX:'ESpatialInputGestureAxis_MAX', };
declare class XRGestureConfig { 
	bTap: boolean;
	bHold: boolean;
	AxisGesture: ESpatialInputGestureAxis;
	bNavigationAxisX: boolean;
	bNavigationAxisY: boolean;
	bNavigationAxisZ: boolean;
	clone() : XRGestureConfig;
	static C(Other: UObject | any): XRGestureConfig;
	ConfigureGestures(): boolean;
	static ConfigureGestures(GestureConfig: XRGestureConfig): boolean;
}

declare class HeadMountedDisplayFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): HeadMountedDisplayFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): HeadMountedDisplayFunctionLibrary;
	static GetDefaultObject(): HeadMountedDisplayFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HeadMountedDisplayFunctionLibrary;
	static UpdateExternalTrackingHMDPosition(ExternalTrackingTransform: Transform): void;
	static SetWorldToMetersScale(WorldContext: UObject,NewScale: number): void;
	static SetTrackingOrigin(Origin: EHMDTrackingOrigin): void;
	static SetSpectatorScreenTexture(InTexture: Texture): void;
	static SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMin: Vector2D,EyeRectMax: Vector2D,TextureRectMin: Vector2D,TextureRectMax: Vector2D,bDrawEyeFirst: boolean,bClearBlack: boolean,bUseAlpha: boolean): void;
	static SetSpectatorScreenMode(Mode: ESpectatorScreenMode): void;
	static SetClippingPlanes(Near: number,Far: number): void;
	static ResetOrientationAndPosition(Yaw: number,Options: EOrientPositionSelector): void;
	static IsSpectatorScreenModeControllable(): boolean;
	static IsInLowPersistenceMode(): boolean;
	static IsHeadMountedDisplayEnabled(): boolean;
	static IsHeadMountedDisplayConnected(): boolean;
	static IsDeviceTracking(XRDeviceId: XRDeviceId): boolean;
	static HasValidTrackingPosition(): boolean;
	static GetXRSystemFlags(): number;
	static GetWorldToMetersScale(WorldContext: UObject): number;
	static GetVRFocusState(bUseFocus?: boolean,bHasFocus?: boolean): {bUseFocus: boolean, bHasFocus: boolean};
	static GetVersionString(): string;
	static GetTrackingToWorldTransform(WorldContext: UObject): Transform;
	static GetTrackingSensorParameters(Origin?: Vector,Rotation?: Rotator,LeftFOV?: number,RightFOV?: number,TopFOV?: number,BottomFOV?: number,Distance?: number,NearPlane?: number,FarPlane?: number,IsActive?: boolean,index?: number): {Origin: Vector, Rotation: Rotator, LeftFOV: number, RightFOV: number, TopFOV: number, BottomFOV: number, Distance: number, NearPlane: number, FarPlane: number, IsActive: boolean};
	static GetTrackingOrigin(): EHMDTrackingOrigin;
	static GetScreenPercentage(): number;
	static GetPositionalTrackingCameraParameters(CameraOrigin?: Vector,CameraRotation?: Rotator,HFOV?: number,VFOV?: number,CameraDistance?: number,NearPlane?: number,FarPlane?: number): {CameraOrigin: Vector, CameraRotation: Rotator, HFOV: number, VFOV: number, CameraDistance: number, NearPlane: number, FarPlane: number};
	static GetPlayAreaBounds(Origin: EHMDTrackingOrigin): Vector2D;
	static GetPixelDensity(): number;
	static GetOrientationAndPosition(DeviceRotation?: Rotator,DevicePosition?: Vector): {DeviceRotation: Rotator, DevicePosition: Vector};
	static GetNumOfTrackingSensors(): number;
	static GetMotionControllerData(WorldContext: UObject,Hand: EControllerHand,MotionControllerData?: XRMotionControllerData): {MotionControllerData: XRMotionControllerData};
	static GetHMDWornState(): EHMDWornState;
	static GetHMDDeviceName(): string;
	static GetHMDData(WorldContext: UObject,HMDData?: XRHMDData): {HMDData: XRHMDData};
	static GetDeviceWorldPose(WorldContext: UObject,XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, position: Vector};
	static GetDevicePose(XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, position: Vector};
	static GetControllerTransformForTime(WorldContext: UObject,ControllerIndex: number,MotionSource: string,Time: Timespan,bTimeWasUsed?: boolean,Orientation?: Rotator,position?: Vector,bProvidedLinearVelocity?: boolean,LinearVelocity?: Vector,bProvidedAngularVelocity?: boolean,AngularVelocityRadPerSec?: Vector,bProvidedLinearAcceleration?: boolean,LinearAcceleration?: Vector): {bTimeWasUsed: boolean, Orientation: Rotator, position: Vector, bProvidedLinearVelocity: boolean, LinearVelocity: Vector, bProvidedAngularVelocity: boolean, AngularVelocityRadPerSec: Vector, bProvidedLinearAcceleration: boolean, LinearAcceleration: Vector, $: boolean};
	static EnumerateTrackedDevices(SystemId: string,DeviceType: EXRTrackedDeviceType): XRDeviceId[];
	static EnableLowPersistenceMode(bEnable: boolean): void;
	static EnableHMD(bEnable: boolean): boolean;
	static DisconnectRemoteXRDevice(): void;
	static ConnectRemoteXRDevice(IpAddress: string,BitRate: number): EXRDeviceConnectionResult;
	static ConfigureGestures(GestureConfig: XRGestureConfig): boolean;
	static ClearXRTimedInputActionDelegate(ActionPath: string): void;
	static CalibrateExternalTrackingToHMD(ExternalTrackingTransform: Transform): void;
	static BreakKey(InKey: Key,InteractionProfile?: string,Hand?: EControllerHand,MotionSource?: string,Indentifier?: string,Component?: string): {InteractionProfile: string, Hand: EControllerHand, MotionSource: string, Indentifier: string, Component: string};
	static C(Other: UObject | any): HeadMountedDisplayFunctionLibrary;
}

declare type EHandKeypoint = 'Palm' | 'Wrist' | 'ThumbMetacarpal' | 'ThumbProximal' | 'ThumbDistal' | 'ThumbTip' | 'IndexMetacarpal' | 'IndexProximal' | 'IndexIntermediate' | 'IndexDistal' | 'IndexTip' | 'MiddleMetacarpal' | 'MiddleProximal' | 'MiddleIntermediate' | 'MiddleDistal' | 'MiddleTip' | 'RingMetacarpal' | 'RingProximal' | 'RingIntermediate' | 'RingDistal' | 'RingTip' | 'LittleMetacarpal' | 'LittleProximal' | 'LittleIntermediate' | 'LittleDistal' | 'LittleTip' | 'EHandKeypoint_MAX';
declare var EHandKeypoint : { Palm:'Palm',Wrist:'Wrist',ThumbMetacarpal:'ThumbMetacarpal',ThumbProximal:'ThumbProximal',ThumbDistal:'ThumbDistal',ThumbTip:'ThumbTip',IndexMetacarpal:'IndexMetacarpal',IndexProximal:'IndexProximal',IndexIntermediate:'IndexIntermediate',IndexDistal:'IndexDistal',IndexTip:'IndexTip',MiddleMetacarpal:'MiddleMetacarpal',MiddleProximal:'MiddleProximal',MiddleIntermediate:'MiddleIntermediate',MiddleDistal:'MiddleDistal',MiddleTip:'MiddleTip',RingMetacarpal:'RingMetacarpal',RingProximal:'RingProximal',RingIntermediate:'RingIntermediate',RingDistal:'RingDistal',RingTip:'RingTip',LittleMetacarpal:'LittleMetacarpal',LittleProximal:'LittleProximal',LittleIntermediate:'LittleIntermediate',LittleDistal:'LittleDistal',LittleTip:'LittleTip',EHandKeypoint_MAX:'EHandKeypoint_MAX', };
declare class HandKeypointConversion extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): HandKeypointConversion;
	static Find(Outer: UObject, ResourceName: string): HandKeypointConversion;
	static GetDefaultObject(): HandKeypointConversion;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HandKeypointConversion;
	static Conv_HandKeypointToInt32(Input: EHandKeypoint): number;
	static C(Other: UObject | any): HandKeypointConversion;
}

declare class MotionControllerComponent extends PrimitiveComponent { 
	PlayerIndex: number;
	Hand: EControllerHand;
	MotionSource: string;
	bDisableLowLatencyUpdate: boolean;
	CurrentTrackingStatus: ETrackingStatus;
	bDisplayDeviceModel: boolean;
	DisplayModelSource: string;
	CustomDisplayMesh: StaticMesh;
	DisplayMeshMaterialOverrides: MaterialInterface[];
	DisplayComponent: PrimitiveComponent;
	static Load(ResourceName: string): MotionControllerComponent;
	static Find(Outer: UObject, ResourceName: string): MotionControllerComponent;
	static GetDefaultObject(): MotionControllerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MotionControllerComponent;
	SetTrackingSource(NewSource: EControllerHand): void;
	SetTrackingMotionSource(NewSource: string): void;
	SetShowDeviceModel(bShowControllerModel: boolean): void;
	SetDisplayModelSource(NewDisplayModelSource: string): void;
	SetCustomDisplayMesh(NewDisplayMesh: StaticMesh): void;
	SetAssociatedPlayerIndex(NewPlayer: number): void;
	OnMotionControllerUpdated(): void;
	IsTracked(): boolean;
	GetTrackingSource(): EControllerHand;
	GetParameterValue(InName: string,bValueFound?: boolean): {bValueFound: boolean, $: number};
	GetHandJointPosition(jointIndex: number,bValueFound?: boolean): {bValueFound: boolean, $: Vector};
	static C(Other: UObject | any): MotionControllerComponent;
	DisableMotionTrackingForComponent(): void;
	EnableMotionTrackingForComponent(): boolean;
	IsMotionTrackingEnabledForComponent(): boolean;
	static DisableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): void;
	static EnableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
	static IsMotionTrackingEnabledForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
}

declare class MotionTrackedDeviceFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MotionTrackedDeviceFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MotionTrackedDeviceFunctionLibrary;
	static GetDefaultObject(): MotionTrackedDeviceFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MotionTrackedDeviceFunctionLibrary;
	static SetIsControllerMotionTrackingEnabledByDefault(Enable: boolean): void;
	static IsMotionTrackingEnabledForSource(PlayerIndex: number,SourceName: string): boolean;
	static IsMotionTrackingEnabledForDevice(PlayerIndex: number,Hand: EControllerHand): boolean;
	static IsMotionTrackingEnabledForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
	static IsMotionTrackedDeviceCountManagementNecessary(): boolean;
	static IsMotionSourceTracking(PlayerIndex: number,SourceName: string): boolean;
	static GetMotionTrackingEnabledControllerCount(): number;
	static GetMaximumMotionTrackedControllerCount(): number;
	static GetActiveTrackingSystemName(): string;
	static EnumerateMotionSources(): string[];
	static EnableMotionTrackingOfSource(PlayerIndex: number,SourceName: string): boolean;
	static EnableMotionTrackingOfDevice(PlayerIndex: number,Hand: EControllerHand): boolean;
	static EnableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
	static DisableMotionTrackingOfSource(PlayerIndex: number,SourceName: string): void;
	static DisableMotionTrackingOfDevice(PlayerIndex: number,Hand: EControllerHand): void;
	static DisableMotionTrackingOfControllersForPlayer(PlayerIndex: number): void;
	static DisableMotionTrackingOfAllControllers(): void;
	static DisableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): void;
	static C(Other: UObject | any): MotionTrackedDeviceFunctionLibrary;
}

declare class VRNotificationsComponent extends ActorComponent { 
	HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDTrackingInitializedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDRecenteredDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDLostDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDReconnectedDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDConnectCanceledDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDPutOnHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
	HMDRemovedFromHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
	VRControllerRecenteredDelegate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): VRNotificationsComponent;
	static Find(Outer: UObject, ResourceName: string): VRNotificationsComponent;
	static GetDefaultObject(): VRNotificationsComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRNotificationsComponent;
	static C(Other: UObject | any): VRNotificationsComponent;
}

declare class XRAssetFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): XRAssetFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): XRAssetFunctionLibrary;
	static GetDefaultObject(): XRAssetFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): XRAssetFunctionLibrary;
	static AddNamedDeviceVisualizationComponentBlocking(Target: Actor,SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId): {XRDeviceId: XRDeviceId, $: PrimitiveComponent};
	static AddDeviceVisualizationComponentBlocking(Target: Actor,XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform): PrimitiveComponent;
	static C(Other: UObject | any): XRAssetFunctionLibrary;
}

declare class AsyncTask_LoadXRDeviceVisComponent extends BlueprintAsyncActionBase { 
	OnModelLoaded: UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) => void>;
	OnLoadFailure: UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) => void>;
	SpawnedComponent: PrimitiveComponent;
	static Load(ResourceName: string): AsyncTask_LoadXRDeviceVisComponent;
	static Find(Outer: UObject, ResourceName: string): AsyncTask_LoadXRDeviceVisComponent;
	static GetDefaultObject(): AsyncTask_LoadXRDeviceVisComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncTask_LoadXRDeviceVisComponent;
	static AddNamedDeviceVisualizationComponentAsync(Target: Actor,SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId,NewComponent?: PrimitiveComponent): {XRDeviceId: XRDeviceId, NewComponent: PrimitiveComponent, $: AsyncTask_LoadXRDeviceVisComponent};
	static AddDeviceVisualizationComponentAsync(Target: Actor,XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform,NewComponent?: PrimitiveComponent): {NewComponent: PrimitiveComponent, $: AsyncTask_LoadXRDeviceVisComponent};
	static C(Other: UObject | any): AsyncTask_LoadXRDeviceVisComponent;
}

declare class XRLoadingScreenFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): XRLoadingScreenFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): XRLoadingScreenFunctionLibrary;
	static GetDefaultObject(): XRLoadingScreenFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): XRLoadingScreenFunctionLibrary;
	static ShowLoadingScreen(): void;
	static SetLoadingScreen(Texture: Texture,Scale: Vector2D,Offset: Vector,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
	static HideLoadingScreen(): void;
	static ClearLoadingScreenSplashes(): void;
	static AddLoadingScreenSplash(Texture: Texture,Translation: Vector,Rotation: Rotator,Size: Vector2D,DeltaRotation: Rotator,bClearBeforeAdd: boolean): void;
	static C(Other: UObject | any): XRLoadingScreenFunctionLibrary;
}

declare class MoviePlayerSettings extends UObject { 
	bWaitForMoviesToComplete: boolean;
	bMoviesAreSkippable: boolean;
	StartupMovies: string[];
	static Load(ResourceName: string): MoviePlayerSettings;
	static Find(Outer: UObject, ResourceName: string): MoviePlayerSettings;
	static GetDefaultObject(): MoviePlayerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MoviePlayerSettings;
	static C(Other: UObject | any): MoviePlayerSettings;
}

declare type ETimezoneSetting = 'InternationalDateLineWest' | 'CoordinatedUniversalTimeNeg11' | 'Samoa' | 'Hawaii' | 'Alaska' | 'PacificTime_USCAN' | 'BajaCalifornia' | 'MountainTime_USCAN' | 'Chihuahua_LaPaz_Mazatlan' | 'Arizona' | 'Saskatchewan' | 'CentralAmerica' | 'CentralTime_USCAN' | 'Guadalajara_MexicoCity_Monterrey' | 'EasternTime_USCAN' | 'Bogota_Lima_Quito' | 'Indiana_US' | 'Caracas' | 'AtlanticTime_Canada' | 'Cuiaba' | 'Santiago' | 'Georgetown_LaPaz_Manaus_SanJuan' | 'Asuncion' | 'Newfoundland' | 'Brasilia' | 'Greenland' | 'Montevideo' | 'Cayenne_Fortaleza' | 'BuenosAires' | 'MidAtlantic' | 'CoordinatedUniversalTimeNeg02' | 'Azores' | 'CaboVerdeIs' | 'Dublin_Edinburgh_Lisbon_London' | 'Monrovia_Reykjavik' | 'Casablanca' | 'UTC' | 'Belgrade_Bratislava_Budapest_Ljubljana_Prague' | 'Sarajevo_Skopje_Warsaw_Zagreb' | 'Brussels_Copenhagen_Madrid_Paris' | 'WestCentralAfrica' | 'Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna' | 'Windhoek' | 'Minsk' | 'Cairo' | 'Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius' | 'Athens_Bucharest' | 'Jerusalem' | 'Amman' | 'Beirut' | 'Harare_Pretoria' | 'Damascus' | 'Istanbul' | 'Kuwait_Riyadh' | 'Baghdad' | 'Nairobi' | 'Kaliningrad' | 'Tehran' | 'Moscow_StPetersburg_Volgograd' | 'AbuDhabi_Muscat' | 'Baku' | 'Yerevan' | 'Tbilisi' | 'PortLouis' | 'Kabul' | 'Tashkent' | 'Islamabad_Karachi' | 'Chennai_Kolkata_Mumbai_NewDelhi' | 'SriJayawardenepura' | 'Kathmandu' | 'Ekaterinburg' | 'Astana' | 'Dhaka' | 'Yangon_Rangoon' | 'Novosibirsk' | 'Bangkok_Hanoi_Jakarta' | 'Krasnoyarsk' | 'Beijing_Chongqing_HongKong_Urumqi' | 'KualaLumpur_Singapore' | 'Taipei' | 'Perth' | 'Ulaanbaatar' | 'Irkutsk' | 'Seoul' | 'Osaka_Sapporo_Tokyo' | 'Darwin' | 'Adelaide' | 'Yakutsk' | 'Canberra_Melbourne_Sydney' | 'Brisbane' | 'Hobart' | 'Guam_PortMoresby' | 'Vladivostok' | 'SolomonIs_NewCaledonia' | 'Magadan' | 'Fiji' | 'Auckland_Wellington' | 'CoordinatedUniversalTime12' | 'Nukualofa' | 'LocalTime' | 'ETimezoneSetting_MAX';
declare var ETimezoneSetting : { InternationalDateLineWest:'InternationalDateLineWest',CoordinatedUniversalTimeNeg11:'CoordinatedUniversalTimeNeg11',Samoa:'Samoa',Hawaii:'Hawaii',Alaska:'Alaska',PacificTime_USCAN:'PacificTime_USCAN',BajaCalifornia:'BajaCalifornia',MountainTime_USCAN:'MountainTime_USCAN',Chihuahua_LaPaz_Mazatlan:'Chihuahua_LaPaz_Mazatlan',Arizona:'Arizona',Saskatchewan:'Saskatchewan',CentralAmerica:'CentralAmerica',CentralTime_USCAN:'CentralTime_USCAN',Guadalajara_MexicoCity_Monterrey:'Guadalajara_MexicoCity_Monterrey',EasternTime_USCAN:'EasternTime_USCAN',Bogota_Lima_Quito:'Bogota_Lima_Quito',Indiana_US:'Indiana_US',Caracas:'Caracas',AtlanticTime_Canada:'AtlanticTime_Canada',Cuiaba:'Cuiaba',Santiago:'Santiago',Georgetown_LaPaz_Manaus_SanJuan:'Georgetown_LaPaz_Manaus_SanJuan',Asuncion:'Asuncion',Newfoundland:'Newfoundland',Brasilia:'Brasilia',Greenland:'Greenland',Montevideo:'Montevideo',Cayenne_Fortaleza:'Cayenne_Fortaleza',BuenosAires:'BuenosAires',MidAtlantic:'MidAtlantic',CoordinatedUniversalTimeNeg02:'CoordinatedUniversalTimeNeg02',Azores:'Azores',CaboVerdeIs:'CaboVerdeIs',Dublin_Edinburgh_Lisbon_London:'Dublin_Edinburgh_Lisbon_London',Monrovia_Reykjavik:'Monrovia_Reykjavik',Casablanca:'Casablanca',UTC:'UTC',Belgrade_Bratislava_Budapest_Ljubljana_Prague:'Belgrade_Bratislava_Budapest_Ljubljana_Prague',Sarajevo_Skopje_Warsaw_Zagreb:'Sarajevo_Skopje_Warsaw_Zagreb',Brussels_Copenhagen_Madrid_Paris:'Brussels_Copenhagen_Madrid_Paris',WestCentralAfrica:'WestCentralAfrica',Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna:'Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna',Windhoek:'Windhoek',Minsk:'Minsk',Cairo:'Cairo',Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius:'Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius',Athens_Bucharest:'Athens_Bucharest',Jerusalem:'Jerusalem',Amman:'Amman',Beirut:'Beirut',Harare_Pretoria:'Harare_Pretoria',Damascus:'Damascus',Istanbul:'Istanbul',Kuwait_Riyadh:'Kuwait_Riyadh',Baghdad:'Baghdad',Nairobi:'Nairobi',Kaliningrad:'Kaliningrad',Tehran:'Tehran',Moscow_StPetersburg_Volgograd:'Moscow_StPetersburg_Volgograd',AbuDhabi_Muscat:'AbuDhabi_Muscat',Baku:'Baku',Yerevan:'Yerevan',Tbilisi:'Tbilisi',PortLouis:'PortLouis',Kabul:'Kabul',Tashkent:'Tashkent',Islamabad_Karachi:'Islamabad_Karachi',Chennai_Kolkata_Mumbai_NewDelhi:'Chennai_Kolkata_Mumbai_NewDelhi',SriJayawardenepura:'SriJayawardenepura',Kathmandu:'Kathmandu',Ekaterinburg:'Ekaterinburg',Astana:'Astana',Dhaka:'Dhaka',Yangon_Rangoon:'Yangon_Rangoon',Novosibirsk:'Novosibirsk',Bangkok_Hanoi_Jakarta:'Bangkok_Hanoi_Jakarta',Krasnoyarsk:'Krasnoyarsk',Beijing_Chongqing_HongKong_Urumqi:'Beijing_Chongqing_HongKong_Urumqi',KualaLumpur_Singapore:'KualaLumpur_Singapore',Taipei:'Taipei',Perth:'Perth',Ulaanbaatar:'Ulaanbaatar',Irkutsk:'Irkutsk',Seoul:'Seoul',Osaka_Sapporo_Tokyo:'Osaka_Sapporo_Tokyo',Darwin:'Darwin',Adelaide:'Adelaide',Yakutsk:'Yakutsk',Canberra_Melbourne_Sydney:'Canberra_Melbourne_Sydney',Brisbane:'Brisbane',Hobart:'Hobart',Guam_PortMoresby:'Guam_PortMoresby',Vladivostok:'Vladivostok',SolomonIs_NewCaledonia:'SolomonIs_NewCaledonia',Magadan:'Magadan',Fiji:'Fiji',Auckland_Wellington:'Auckland_Wellington',CoordinatedUniversalTime12:'CoordinatedUniversalTime12',Nukualofa:'Nukualofa',LocalTime:'LocalTime',ETimezoneSetting_MAX:'ETimezoneSetting_MAX', };
declare class InternationalizationSettingsModel extends UObject { 
	DisplayTimezone: ETimezoneSetting;
	static Load(ResourceName: string): InternationalizationSettingsModel;
	static Find(Outer: UObject, ResourceName: string): InternationalizationSettingsModel;
	static GetDefaultObject(): InternationalizationSettingsModel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationSettingsModel;
	static C(Other: UObject | any): InternationalizationSettingsModel;
}

declare class AbstractNavData extends NavigationData { 
	static GetDefaultObject(): AbstractNavData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbstractNavData;
	static C(Other: UObject | any): AbstractNavData;
}

declare class CrowdManagerBase extends UObject { 
	static Load(ResourceName: string): CrowdManagerBase;
	static Find(Outer: UObject, ResourceName: string): CrowdManagerBase;
	static GetDefaultObject(): CrowdManagerBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdManagerBase;
	static C(Other: UObject | any): CrowdManagerBase;
}

declare class NavAreaMeta extends NavArea { 
	static Load(ResourceName: string): NavAreaMeta;
	static Find(Outer: UObject, ResourceName: string): NavAreaMeta;
	static GetDefaultObject(): NavAreaMeta;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta;
	static C(Other: UObject | any): NavAreaMeta;
}

declare class NavAreaMeta_SwitchByAgent extends NavAreaMeta { 
	Agent0Area: UnrealEngineClass;
	Agent1Area: UnrealEngineClass;
	Agent2Area: UnrealEngineClass;
	Agent3Area: UnrealEngineClass;
	Agent4Area: UnrealEngineClass;
	Agent5Area: UnrealEngineClass;
	Agent6Area: UnrealEngineClass;
	Agent7Area: UnrealEngineClass;
	Agent8Area: UnrealEngineClass;
	Agent9Area: UnrealEngineClass;
	Agent10Area: UnrealEngineClass;
	Agent11Area: UnrealEngineClass;
	Agent12Area: UnrealEngineClass;
	Agent13Area: UnrealEngineClass;
	Agent14Area: UnrealEngineClass;
	Agent15Area: UnrealEngineClass;
	static Load(ResourceName: string): NavAreaMeta_SwitchByAgent;
	static Find(Outer: UObject, ResourceName: string): NavAreaMeta_SwitchByAgent;
	static GetDefaultObject(): NavAreaMeta_SwitchByAgent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta_SwitchByAgent;
	static C(Other: UObject | any): NavAreaMeta_SwitchByAgent;
}

declare class NavArea_Default extends NavArea { 
	static Load(ResourceName: string): NavArea_Default;
	static Find(Outer: UObject, ResourceName: string): NavArea_Default;
	static GetDefaultObject(): NavArea_Default;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Default;
	static C(Other: UObject | any): NavArea_Default;
}

declare class NavArea_LowHeight extends NavArea { 
	static Load(ResourceName: string): NavArea_LowHeight;
	static Find(Outer: UObject, ResourceName: string): NavArea_LowHeight;
	static GetDefaultObject(): NavArea_LowHeight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_LowHeight;
	static C(Other: UObject | any): NavArea_LowHeight;
}

declare class NavArea_Null extends NavArea { 
	static Load(ResourceName: string): NavArea_Null;
	static Find(Outer: UObject, ResourceName: string): NavArea_Null;
	static GetDefaultObject(): NavArea_Null;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Null;
	static C(Other: UObject | any): NavArea_Null;
}

declare class NavArea_Obstacle extends NavArea { 
	static Load(ResourceName: string): NavArea_Obstacle;
	static Find(Outer: UObject, ResourceName: string): NavArea_Obstacle;
	static GetDefaultObject(): NavArea_Obstacle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Obstacle;
	static C(Other: UObject | any): NavArea_Obstacle;
}

declare class NavCollisionCylinder { 
	Offset: Vector;
	Radius: number;
	Height: number;
	clone() : NavCollisionCylinder;
	static C(Other: UObject | any): NavCollisionCylinder;
}

declare class NavCollisionBox { 
	Offset: Vector;
	Extent: Vector;
	clone() : NavCollisionBox;
	static C(Other: UObject | any): NavCollisionBox;
}

declare class NavCollision extends NavCollisionBase { 
	CylinderCollision: NavCollisionCylinder[];
	BoxCollision: NavCollisionBox[];
	AreaClass: UnrealEngineClass;
	bGatherConvexGeometry: boolean;
	bCreateOnClient: boolean;
	static Load(ResourceName: string): NavCollision;
	static Find(Outer: UObject, ResourceName: string): NavCollision;
	static GetDefaultObject(): NavCollision;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavCollision;
	static C(Other: UObject | any): NavCollision;
}

declare class NavigationGraph extends NavigationData { 
	static GetDefaultObject(): NavigationGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraph;
	static C(Other: UObject | any): NavigationGraph;
}

declare class NavigationGraphNode extends Actor { 
	static GetDefaultObject(): NavigationGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNode;
	static C(Other: UObject | any): NavigationGraphNode;
}

declare class NavGraphNode { 
	Owner: UObject;
	clone() : NavGraphNode;
	static C(Other: UObject | any): NavGraphNode;
}

declare class NavigationGraphNodeComponent extends SceneComponent { 
	UNode: NavGraphNode;
	NextNodeComponent: NavigationGraphNodeComponent;
	PrevNodeComponent: NavigationGraphNodeComponent;
	static Load(ResourceName: string): NavigationGraphNodeComponent;
	static Find(Outer: UObject, ResourceName: string): NavigationGraphNodeComponent;
	static GetDefaultObject(): NavigationGraphNodeComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNodeComponent;
	static C(Other: UObject | any): NavigationGraphNodeComponent;
}

declare class NavigationInvokerComponent extends ActorComponent { 
	TileGenerationRadius: number;
	TileRemovalRadius: number;
	static Load(ResourceName: string): NavigationInvokerComponent;
	static Find(Outer: UObject, ResourceName: string): NavigationInvokerComponent;
	static GetDefaultObject(): NavigationInvokerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationInvokerComponent;
	static C(Other: UObject | any): NavigationInvokerComponent;
}

declare class NavigationPathGenerator extends Interface { 
	static Load(ResourceName: string): NavigationPathGenerator;
	static Find(Outer: UObject, ResourceName: string): NavigationPathGenerator;
	static GetDefaultObject(): NavigationPathGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationPathGenerator;
	static C(Other: UObject | any): NavigationPathGenerator;
}

declare type ENavDataGatheringModeConfig = 'Invalid' | 'Instant' | 'Lazy' | 'ENavDataGatheringModeConfig_MAX';
declare var ENavDataGatheringModeConfig : { Invalid:'Invalid',Instant:'Instant',Lazy:'Lazy',ENavDataGatheringModeConfig_MAX:'ENavDataGatheringModeConfig_MAX', };
declare type FNavigationSystemRunMode = 'InvalidMode' | 'GameMode' | 'EditorMode' | 'SimulationMode' | 'PIEMode' | 'InferFromWorldMode' | 'FNavigationSystemRunMode_MAX';
declare var FNavigationSystemRunMode : { InvalidMode:'InvalidMode',GameMode:'GameMode',EditorMode:'EditorMode',SimulationMode:'SimulationMode',PIEMode:'PIEMode',InferFromWorldMode:'InferFromWorldMode',FNavigationSystemRunMode_MAX:'FNavigationSystemRunMode_MAX', };
declare class NavMeshBoundsVolume extends Volume { 
	SupportedAgents: NavAgentSelector;
	static GetDefaultObject(): NavMeshBoundsVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMeshBoundsVolume;
	static C(Other: UObject | any): NavMeshBoundsVolume;
}

declare type ENavigationQueryResult = 'Invalid' | 'Error' | 'Fail' | 'Success' | 'ENavigationQueryResult_MAX';
declare var ENavigationQueryResult : { Invalid:'Invalid',Error:'Error',Fail:'Fail',Success:'Success',ENavigationQueryResult_MAX:'ENavigationQueryResult_MAX', };
declare class NavigationSystemV1 extends NavigationSystemBase { 
	MainNavData: NavigationData;
	AbstractNavData: NavigationData;
	DefaultAgentName: string;
	CrowdManagerClass: Class;
	bAutoCreateNavigationData: boolean;
	bSpawnNavDataInNavBoundsLevel: boolean;
	bAllowClientSideNavigation: boolean;
	bShouldDiscardSubLevelNavData: boolean;
	bTickWhilePaused: boolean;
	bSupportRebuilding: boolean;
	bInitialBuildingLocked: boolean;
	bSkipAgentHeightCheckWhenPickingNavData: boolean;
	bGenerateNavigationOnlyAroundNavigationInvokers: boolean;
	ActiveTilesUpdateInterval: number;
	DataGatheringMode: ENavDataGatheringModeConfig;
	DirtyAreaWarningSizeThreshold: number;
	GatheringNavModifiersWarningLimitTime: number;
	SupportedAgents: NavDataConfig[];
	SupportedAgentsMask: NavAgentSelector;
	BuildBounds: Box;
	NavDataSet: NavigationData[];
	NavDataRegistrationQueue: NavigationData[];
	OnNavDataRegisteredEvent: UnrealEngineMulticastDelegate<(NavData: NavigationData) => void>;
	OnNavigationGenerationFinishedDelegate: UnrealEngineMulticastDelegate<(NavData: NavigationData) => void>;
	OperationMode: FNavigationSystemRunMode;
	DirtyAreasUpdateFreq: number;
	static Load(ResourceName: string): NavigationSystemV1;
	static Find(Outer: UObject, ResourceName: string): NavigationSystemV1;
	static GetDefaultObject(): NavigationSystemV1;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemV1;
	UnregisterNavigationInvoker(Invoker: Actor): void;
	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
	SetMaxSimultaneousTileGenerationJobsCount(MaxNumberOfJobs: number): void;
	SetGeometryGatheringMode(NewMode: ENavDataGatheringModeConfig): void;
	ResetMaxSimultaneousTileGenerationJobsCount(): void;
	RegisterNavigationInvoker(Invoker: Actor,TileGenerationRadius: number,TileRemovalRadius: number): void;
	static ProjectPointToNavigation(WorldContextObject: UObject,Point: Vector,NavData: NavigationData,FilterClass: UnrealEngineClass,QueryExtent: Vector): Vector;
	OnNavigationBoundsUpdated(NavVolume: NavMeshBoundsVolume): void;
	static NavigationRaycast(WorldContextObject: UObject,RayStart: Vector,RayEnd: Vector,HitLocation?: Vector,FilterClass?: UnrealEngineClass,Querier?: Controller): {HitLocation: Vector, $: boolean};
	K2_ReplaceAreaInOctreeData(UObject: UObject,OldArea: UnrealEngineClass,NewArea: UnrealEngineClass): boolean;
	static K2_ProjectPointToNavigation(WorldContextObject: UObject,Point: Vector,ProjectedLocation?: Vector,NavData?: NavigationData,FilterClass?: UnrealEngineClass,QueryExtent?: Vector): {ProjectedLocation: Vector, $: boolean};
	static K2_GetRandomReachablePointInRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
	static K2_GetRandomPointInNavigableRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
	static K2_GetRandomLocationInNavigableRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
	static IsNavigationBeingBuiltOrLocked(WorldContextObject: UObject): boolean;
	static IsNavigationBeingBuilt(WorldContextObject: UObject): boolean;
	static GetRandomReachablePointInRadius(WorldContextObject: UObject,Origin: Vector,Radius: number,NavData: NavigationData,FilterClass: UnrealEngineClass): Vector;
	static GetRandomPointInNavigableRadius(WorldContextObject: UObject,Origin: Vector,Radius: number,NavData: NavigationData,FilterClass: UnrealEngineClass): Vector;
	static GetPathLength(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathLength?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {PathLength: number, $: ENavigationQueryResult};
	static GetPathCost(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathCost?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {PathCost: number, $: ENavigationQueryResult};
	static GetNavigationSystem(WorldContextObject: UObject): NavigationSystemV1;
	static FindPathToLocationSynchronously(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathfindingContext: Actor,FilterClass: UnrealEngineClass): NavigationPath;
	static FindPathToActorSynchronously(WorldContextObject: UObject,PathStart: Vector,GoalActor: Actor,TetherDistance: number,PathfindingContext: Actor,FilterClass: UnrealEngineClass): NavigationPath;
	static C(Other: UObject | any): NavigationSystemV1;
}

declare class NavigationSystemModuleConfig extends NavigationSystemConfig { 
	bStrictlyStatic: boolean;
	bCreateOnClient: boolean;
	bAutoSpawnMissingNavData: boolean;
	bSpawnNavDataInNavBoundsLevel: boolean;
	static Load(ResourceName: string): NavigationSystemModuleConfig;
	static Find(Outer: UObject, ResourceName: string): NavigationSystemModuleConfig;
	static GetDefaultObject(): NavigationSystemModuleConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemModuleConfig;
	static C(Other: UObject | any): NavigationSystemModuleConfig;
}

declare class DebugDrawComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): DebugDrawComponent;
	static Find(Outer: UObject, ResourceName: string): DebugDrawComponent;
	static GetDefaultObject(): DebugDrawComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugDrawComponent;
	static C(Other: UObject | any): DebugDrawComponent;
}

declare class NavTestRenderingComponent extends DebugDrawComponent { 
	static Load(ResourceName: string): NavTestRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavTestRenderingComponent;
	static GetDefaultObject(): NavTestRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavTestRenderingComponent;
	static C(Other: UObject | any): NavTestRenderingComponent;
}

declare type ENavCostDisplay = 'TotalCost' | 'HeuristicOnly' | 'RealCostOnly' | 'ENavCostDisplay_MAX';
declare var ENavCostDisplay : { TotalCost:'TotalCost',HeuristicOnly:'HeuristicOnly',RealCostOnly:'RealCostOnly',ENavCostDisplay_MAX:'ENavCostDisplay_MAX', };
declare class NavigationTestingActor extends Actor { 
	CapsuleComponent: CapsuleComponent;
	EdRenderComp: NavTestRenderingComponent;
	InvokerComponent: NavigationInvokerComponent;
	bActAsNavigationInvoker: boolean;
	NavAgentProps: NavAgentProperties;
	QueryingExtent: Vector;
	MyNavData: NavigationData;
	ProjectedLocation: Vector;
	bProjectedLocationValid: boolean;
	bSearchStart: boolean;
	CostLimitFactor: number;
	MinimumCostLimit: number;
	bBacktracking: boolean;
	bUseHierarchicalPathfinding: boolean;
	bGatherDetailedInfo: boolean;
	bDrawDistanceToWall: boolean;
	bShowNodePool: boolean;
	bShowBestPath: boolean;
	bShowDiffWithPreviousStep: boolean;
	bShouldBeVisibleInGame: boolean;
	CostDisplayMode: ENavCostDisplay;
	TextCanvasOffset: Vector2D;
	bPathExist: boolean;
	bPathIsPartial: boolean;
	bPathSearchOutOfNodes: boolean;
	PathfindingTime: number;
	PathCost: number;
	PathfindingSteps: number;
	OtherActor: NavigationTestingActor;
	FilterClass: UnrealEngineClass;
	ShowStepIndex: number;
	OffsetFromCornersDistance: number;
	static GetDefaultObject(): NavigationTestingActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationTestingActor;
	static C(Other: UObject | any): NavigationTestingActor;
}

declare type ENavLinkDirection = 'BothWays' | 'LeftToRight' | 'RightToLeft' | 'ENavLinkDirection_MAX';
declare var ENavLinkDirection : { BothWays:'BothWays',LeftToRight:'LeftToRight',RightToLeft:'RightToLeft',ENavLinkDirection_MAX:'ENavLinkDirection_MAX', };
declare class NavigationLinkBase { 
	LeftProjectHeight: number;
	MaxFallDownLength: number;
	SnapRadius: number;
	SnapHeight: number;
	SupportedAgents: NavAgentSelector;
	bSupportsAgent0: boolean;
	bSupportsAgent1: boolean;
	bSupportsAgent2: boolean;
	bSupportsAgent3: boolean;
	bSupportsAgent4: boolean;
	bSupportsAgent5: boolean;
	bSupportsAgent6: boolean;
	bSupportsAgent7: boolean;
	bSupportsAgent8: boolean;
	bSupportsAgent9: boolean;
	bSupportsAgent10: boolean;
	bSupportsAgent11: boolean;
	bSupportsAgent12: boolean;
	bSupportsAgent13: boolean;
	bSupportsAgent14: boolean;
	bSupportsAgent15: boolean;
	Description: string;
	Direction: ENavLinkDirection;
	bUseSnapHeight: boolean;
	bSnapToCheapestArea: boolean;
	bCustomFlag0: boolean;
	bCustomFlag1: boolean;
	bCustomFlag2: boolean;
	bCustomFlag3: boolean;
	bCustomFlag4: boolean;
	bCustomFlag5: boolean;
	bCustomFlag6: boolean;
	bCustomFlag7: boolean;
	AreaClass: UnrealEngineClass;
	clone() : NavigationLinkBase;
	static C(Other: UObject | any): NavigationLinkBase;
}

declare class NavigationLink extends NavigationLinkBase { 
	Left: Vector;
	Right: Vector;
	clone() : NavigationLink;
	static C(Other: UObject | any): NavigationLink;
}

declare class NavLinkComponent extends PrimitiveComponent { 
	Links: NavigationLink[];
	static Load(ResourceName: string): NavLinkComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkComponent;
	static GetDefaultObject(): NavLinkComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkComponent;
	static C(Other: UObject | any): NavLinkComponent;
}

declare class NavRelevantComponent extends ActorComponent { 
	bAttachToOwnersRoot: boolean;
	CachedNavParent: UObject;
	static Load(ResourceName: string): NavRelevantComponent;
	static Find(Outer: UObject, ResourceName: string): NavRelevantComponent;
	static GetDefaultObject(): NavRelevantComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantComponent;
	SetNavigationRelevancy(bRelevant: boolean): void;
	static C(Other: UObject | any): NavRelevantComponent;
}

declare class NavLinkCustomComponent extends NavRelevantComponent { 
	NavLinkUserId: any;
	EnabledAreaClass: UnrealEngineClass;
	DisabledAreaClass: UnrealEngineClass;
	SupportedAgents: NavAgentSelector;
	LinkRelativeStart: Vector;
	LinkRelativeEnd: Vector;
	LinkDirection: ENavLinkDirection;
	bLinkEnabled: boolean;
	bNotifyWhenEnabled: boolean;
	bNotifyWhenDisabled: boolean;
	bCreateBoxObstacle: boolean;
	ObstacleOffset: Vector;
	ObstacleExtent: Vector;
	ObstacleAreaClass: UnrealEngineClass;
	BroadcastRadius: number;
	BroadcastInterval: number;
	BroadcastChannel: ECollisionChannel;
	static Load(ResourceName: string): NavLinkCustomComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkCustomComponent;
	static GetDefaultObject(): NavLinkCustomComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomComponent;
	static C(Other: UObject | any): NavLinkCustomComponent;
}

declare class NavLinkCustomInterface extends Interface { 
	static Load(ResourceName: string): NavLinkCustomInterface;
	static Find(Outer: UObject, ResourceName: string): NavLinkCustomInterface;
	static GetDefaultObject(): NavLinkCustomInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomInterface;
	static C(Other: UObject | any): NavLinkCustomInterface;
}

declare class NavLinkHostInterface extends Interface { 
	static Load(ResourceName: string): NavLinkHostInterface;
	static Find(Outer: UObject, ResourceName: string): NavLinkHostInterface;
	static GetDefaultObject(): NavLinkHostInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkHostInterface;
	static C(Other: UObject | any): NavLinkHostInterface;
}

declare class NavLinkRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): NavLinkRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavLinkRenderingComponent;
	static GetDefaultObject(): NavLinkRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkRenderingComponent;
	static C(Other: UObject | any): NavLinkRenderingComponent;
}

declare class NavigationSegmentLink extends NavigationLinkBase { 
	LeftStart: Vector;
	LeftEnd: Vector;
	RightStart: Vector;
	RightEnd: Vector;
	clone() : NavigationSegmentLink;
	static C(Other: UObject | any): NavigationSegmentLink;
}

declare class NavLinkDefinition extends UObject { 
	Links: NavigationLink[];
	SegmentLinks: NavigationSegmentLink[];
	static Load(ResourceName: string): NavLinkDefinition;
	static Find(Outer: UObject, ResourceName: string): NavLinkDefinition;
	static GetDefaultObject(): NavLinkDefinition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkDefinition;
	static C(Other: UObject | any): NavLinkDefinition;
}

declare class NavLinkTrivial extends NavLinkDefinition { 
	static Load(ResourceName: string): NavLinkTrivial;
	static Find(Outer: UObject, ResourceName: string): NavLinkTrivial;
	static GetDefaultObject(): NavLinkTrivial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkTrivial;
	static C(Other: UObject | any): NavLinkTrivial;
}

declare class NavMeshRenderingComponent extends DebugDrawComponent { 
	static Load(ResourceName: string): NavMeshRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): NavMeshRenderingComponent;
	static GetDefaultObject(): NavMeshRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMeshRenderingComponent;
	static C(Other: UObject | any): NavMeshRenderingComponent;
}

declare class NavModifierComponent extends NavRelevantComponent { 
	AreaClass: UnrealEngineClass;
	FailsafeExtent: Vector;
	bIncludeAgentHeight: boolean;
	static Load(ResourceName: string): NavModifierComponent;
	static Find(Outer: UObject, ResourceName: string): NavModifierComponent;
	static GetDefaultObject(): NavModifierComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierComponent;
	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
	static C(Other: UObject | any): NavModifierComponent;
}

declare class NavModifierVolume extends Volume { 
	AreaClass: UnrealEngineClass;
	bMaskFillCollisionUnderneathForNavmesh: boolean;
	static GetDefaultObject(): NavModifierVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierVolume;
	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
	static C(Other: UObject | any): NavModifierVolume;
}

declare class NavNodeInterface extends Interface { 
	static Load(ResourceName: string): NavNodeInterface;
	static Find(Outer: UObject, ResourceName: string): NavNodeInterface;
	static GetDefaultObject(): NavNodeInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavNodeInterface;
	static C(Other: UObject | any): NavNodeInterface;
}

declare type ENavSystemOverridePolicy = 'Override' | 'Append' | 'Skip' | 'ENavSystemOverridePolicy_MAX';
declare var ENavSystemOverridePolicy : { Override:'Override',Append:'Append',Skip:'Skip',ENavSystemOverridePolicy_MAX:'ENavSystemOverridePolicy_MAX', };
declare class NavSystemConfigOverride extends Actor { 
	SpriteComponent: BillboardComponent;
	NavigationSystemConfig: NavigationSystemConfig;
	OverridePolicy: ENavSystemOverridePolicy;
	bLoadOnClient: boolean;
	static GetDefaultObject(): NavSystemConfigOverride;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavSystemConfigOverride;
	ApplyChanges(): void;
	static C(Other: UObject | any): NavSystemConfigOverride;
}

declare class RecastFilter_UseDefaultArea extends NavigationQueryFilter { 
	static Load(ResourceName: string): RecastFilter_UseDefaultArea;
	static Find(Outer: UObject, ResourceName: string): RecastFilter_UseDefaultArea;
	static GetDefaultObject(): RecastFilter_UseDefaultArea;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastFilter_UseDefaultArea;
	static C(Other: UObject | any): RecastFilter_UseDefaultArea;
}

declare class RecastNavMeshDataChunk extends NavigationDataChunk { 
	static Load(ResourceName: string): RecastNavMeshDataChunk;
	static Find(Outer: UObject, ResourceName: string): RecastNavMeshDataChunk;
	static GetDefaultObject(): RecastNavMeshDataChunk;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastNavMeshDataChunk;
	static C(Other: UObject | any): RecastNavMeshDataChunk;
}

declare class GameplayTaskOwnerInterface extends Interface { 
	static Load(ResourceName: string): GameplayTaskOwnerInterface;
	static Find(Outer: UObject, ResourceName: string): GameplayTaskOwnerInterface;
	static GetDefaultObject(): GameplayTaskOwnerInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTaskOwnerInterface;
	static C(Other: UObject | any): GameplayTaskOwnerInterface;
}

declare class GameplayTask_ClaimResource extends GameplayTask { 
	static Load(ResourceName: string): GameplayTask_ClaimResource;
	static Find(Outer: UObject, ResourceName: string): GameplayTask_ClaimResource;
	static GetDefaultObject(): GameplayTask_ClaimResource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_ClaimResource;
	static C(Other: UObject | any): GameplayTask_ClaimResource;
}

declare class GameplayTask_SpawnActor extends GameplayTask { 
	Success: UnrealEngineMulticastDelegate<(SpawnedActor: Actor) => void>;
	DidNotSpawn: UnrealEngineMulticastDelegate<(SpawnedActor: Actor) => void>;
	ClassToSpawn: UnrealEngineClass;
	static Load(ResourceName: string): GameplayTask_SpawnActor;
	static Find(Outer: UObject, ResourceName: string): GameplayTask_SpawnActor;
	static GetDefaultObject(): GameplayTask_SpawnActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_SpawnActor;
	FinishSpawningActor(WorldContextObject: UObject,SpawnedActor: Actor): void;
	BeginSpawningActor(WorldContextObject: UObject,SpawnedActor?: Actor): {SpawnedActor: Actor, $: boolean};
	static C(Other: UObject | any): GameplayTask_SpawnActor;
}

declare class GameplayTask_TimeLimitedExecution extends GameplayTask { 
	OnFinished: UnrealEngineMulticastDelegate<() => void>;
	OnTimeExpired: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): GameplayTask_TimeLimitedExecution;
	static Find(Outer: UObject, ResourceName: string): GameplayTask_TimeLimitedExecution;
	static GetDefaultObject(): GameplayTask_TimeLimitedExecution;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_TimeLimitedExecution;
	static C(Other: UObject | any): GameplayTask_TimeLimitedExecution;
}

declare class GameplayTask_WaitDelay extends GameplayTask { 
	OnFinish: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): GameplayTask_WaitDelay;
	static Find(Outer: UObject, ResourceName: string): GameplayTask_WaitDelay;
	static GetDefaultObject(): GameplayTask_WaitDelay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_WaitDelay;
	static C(Other: UObject | any): GameplayTask_WaitDelay;
}

declare class MockAI extends UObject { 
	Actor: Actor;
	BBComp: BlackboardComponent;
	BrainComp: BrainComponent;
	PerceptionComp: AIPerceptionComponent;
	PawnActionComp: PawnActionsComponent;
	static Load(ResourceName: string): MockAI;
	static Find(Outer: UObject, ResourceName: string): MockAI;
	static GetDefaultObject(): MockAI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MockAI;
	static C(Other: UObject | any): MockAI;
}

declare class MockAI_BT extends MockAI { 
	BTComp: BehaviorTreeComponent;
	static Load(ResourceName: string): MockAI_BT;
	static Find(Outer: UObject, ResourceName: string): MockAI_BT;
	static GetDefaultObject(): MockAI_BT;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MockAI_BT;
	static C(Other: UObject | any): MockAI_BT;
}

declare class MockTask_Log extends GameplayTask { 
	static Load(ResourceName: string): MockTask_Log;
	static Find(Outer: UObject, ResourceName: string): MockTask_Log;
	static GetDefaultObject(): MockTask_Log;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MockTask_Log;
	static C(Other: UObject | any): MockTask_Log;
}

declare class MockGameplayTasksComponent extends GameplayTasksComponent { 
	static Load(ResourceName: string): MockGameplayTasksComponent;
	static Find(Outer: UObject, ResourceName: string): MockGameplayTasksComponent;
	static GetDefaultObject(): MockGameplayTasksComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MockGameplayTasksComponent;
	static C(Other: UObject | any): MockGameplayTasksComponent;
}

declare class MockGameplayTaskOwner extends UObject { 
	GTComponent: GameplayTasksComponent;
	static Load(ResourceName: string): MockGameplayTaskOwner;
	static Find(Outer: UObject, ResourceName: string): MockGameplayTaskOwner;
	static GetDefaultObject(): MockGameplayTaskOwner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MockGameplayTaskOwner;
	static C(Other: UObject | any): MockGameplayTaskOwner;
}

declare class BTDecorator_BlackboardBase extends BTDecorator { 
	BlackboardKey: BlackboardKeySelector;
	static Load(ResourceName: string): BTDecorator_BlackboardBase;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_BlackboardBase;
	static GetDefaultObject(): BTDecorator_BlackboardBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_BlackboardBase;
	static C(Other: UObject | any): BTDecorator_BlackboardBase;
}

declare type EBTBlackboardRestart = 'ValueChange' | 'ResultChange' | 'EBTBlackboardRestart_MAX';
declare var EBTBlackboardRestart : { ValueChange:'ValueChange',ResultChange:'ResultChange',EBTBlackboardRestart_MAX:'EBTBlackboardRestart_MAX', };
declare type EBasicKeyOperation = 'Set' | 'NotSet' | 'EBasicKeyOperation_MAX';
declare var EBasicKeyOperation : { Set:'Set',NotSet:'NotSet',EBasicKeyOperation_MAX:'EBasicKeyOperation_MAX', };
declare type EArithmeticKeyOperation = 'Equal' | 'NotEqual' | 'Less' | 'LessOrEqual' | 'Greater' | 'GreaterOrEqual' | 'EArithmeticKeyOperation_MAX';
declare var EArithmeticKeyOperation : { Equal:'Equal',NotEqual:'NotEqual',Less:'Less',LessOrEqual:'LessOrEqual',Greater:'Greater',GreaterOrEqual:'GreaterOrEqual',EArithmeticKeyOperation_MAX:'EArithmeticKeyOperation_MAX', };
declare type ETextKeyOperation = 'Equal' | 'NotEqual' | 'Contain' | 'NotContain' | 'ETextKeyOperation_MAX';
declare var ETextKeyOperation : { Equal:'Equal',NotEqual:'NotEqual',Contain:'Contain',NotContain:'NotContain',ETextKeyOperation_MAX:'ETextKeyOperation_MAX', };
declare class BTDecorator_Blackboard extends BTDecorator_BlackboardBase { 
	IntValue: number;
	FloatValue: number;
	StringValue: string;
	CachedDescription: string;
	OperationType: number;
	NotifyObserver: EBTBlackboardRestart;
	BasicOperation: EBasicKeyOperation;
	ArithmeticOperation: EArithmeticKeyOperation;
	TextOperation: ETextKeyOperation;
	static Load(ResourceName: string): BTDecorator_Blackboard;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_Blackboard;
	static GetDefaultObject(): BTDecorator_Blackboard;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Blackboard;
	static C(Other: UObject | any): BTDecorator_Blackboard;
}

declare class TestBTDecorator_Blackboard extends BTDecorator_Blackboard { 
	LogIndexBecomeRelevant: number;
	LogIndexCeaseRelevant: number;
	LogIndexCalculate: number;
	static Load(ResourceName: string): TestBTDecorator_Blackboard;
	static Find(Outer: UObject, ResourceName: string): TestBTDecorator_Blackboard;
	static GetDefaultObject(): TestBTDecorator_Blackboard;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTDecorator_Blackboard;
	static C(Other: UObject | any): TestBTDecorator_Blackboard;
}

declare class TestBTDecorator_CantExecute extends BTDecorator { 
	static Load(ResourceName: string): TestBTDecorator_CantExecute;
	static Find(Outer: UObject, ResourceName: string): TestBTDecorator_CantExecute;
	static GetDefaultObject(): TestBTDecorator_CantExecute;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTDecorator_CantExecute;
	static C(Other: UObject | any): TestBTDecorator_CantExecute;
}

declare class TestBTDecorator_DelayedAbort extends BTDecorator { 
	DelayTicks: number;
	bOnlyOnce: boolean;
	static Load(ResourceName: string): TestBTDecorator_DelayedAbort;
	static Find(Outer: UObject, ResourceName: string): TestBTDecorator_DelayedAbort;
	static GetDefaultObject(): TestBTDecorator_DelayedAbort;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTDecorator_DelayedAbort;
	static C(Other: UObject | any): TestBTDecorator_DelayedAbort;
}

declare class TestBTService_Log extends BTService { 
	LogActivation: number;
	LogDeactivation: number;
	KeyNameTick: string;
	KeyNameBecomeRelevant: string;
	KeyNameCeaseRelevant: string;
	LogTick: number;
	static Load(ResourceName: string): TestBTService_Log;
	static Find(Outer: UObject, ResourceName: string): TestBTService_Log;
	static GetDefaultObject(): TestBTService_Log;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTService_Log;
	static C(Other: UObject | any): TestBTService_Log;
}

declare type EBTNodeResult = 'Succeeded' | 'Failed' | 'Aborted' | 'InProgress' | 'EBTNodeResult_MAX';
declare var EBTNodeResult : { Succeeded:'Succeeded',Failed:'Failed',Aborted:'Aborted',InProgress:'InProgress',EBTNodeResult_MAX:'EBTNodeResult_MAX', };
declare class TestBTTask_LatentWithFlags extends BTTaskNode { 
	LogIndexExecuteStart: number;
	LogIndexExecuting: number;
	LogIndexExecuteFinish: number;
	LogIndexAbortStart: number;
	LogIndexAborting: number;
	LogIndexAbortFinish: number;
	ExecuteHalfTicks: number;
	AbortHalfTicks: number;
	KeyNameExecute: string;
	KeyNameAbort: string;
	LogResult: EBTNodeResult;
	static Load(ResourceName: string): TestBTTask_LatentWithFlags;
	static Find(Outer: UObject, ResourceName: string): TestBTTask_LatentWithFlags;
	static GetDefaultObject(): TestBTTask_LatentWithFlags;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_LatentWithFlags;
	static C(Other: UObject | any): TestBTTask_LatentWithFlags;
}

declare class TestBTTask_Log extends BTTaskNode { 
	LogIndex: number;
	LogFinished: number;
	ExecutionTicks: number;
	LogTickIndex: number;
	LogResult: EBTNodeResult;
	static Load(ResourceName: string): TestBTTask_Log;
	static Find(Outer: UObject, ResourceName: string): TestBTTask_Log;
	static GetDefaultObject(): TestBTTask_Log;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_Log;
	static C(Other: UObject | any): TestBTTask_Log;
}

declare class TestBTTask_SetFlag extends BTTaskNode { 
	KeyName: string;
	bValue: boolean;
	OnAbortKeyName: string;
	bOnAbortValue: boolean;
	TaskResult: EBTNodeResult;
	static Load(ResourceName: string): TestBTTask_SetFlag;
	static Find(Outer: UObject, ResourceName: string): TestBTTask_SetFlag;
	static GetDefaultObject(): TestBTTask_SetFlag;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_SetFlag;
	static C(Other: UObject | any): TestBTTask_SetFlag;
}

declare class TestBTTask_SetValue extends BTTaskNode { 
	KeyName: string;
	Value: number;
	OnAbortKeyName: string;
	OnAbortValue: number;
	TaskResult: EBTNodeResult;
	static Load(ResourceName: string): TestBTTask_SetValue;
	static Find(Outer: UObject, ResourceName: string): TestBTTask_SetValue;
	static GetDefaultObject(): TestBTTask_SetValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_SetValue;
	static C(Other: UObject | any): TestBTTask_SetValue;
}

declare class TestPawnAction_Log extends PawnAction { 
	static Load(ResourceName: string): TestPawnAction_Log;
	static Find(Outer: UObject, ResourceName: string): TestPawnAction_Log;
	static GetDefaultObject(): TestPawnAction_Log;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestPawnAction_Log;
	static C(Other: UObject | any): TestPawnAction_Log;
}

declare class TestPawnAction_CallFunction extends TestPawnAction_Log { 
	static Load(ResourceName: string): TestPawnAction_CallFunction;
	static Find(Outer: UObject, ResourceName: string): TestPawnAction_CallFunction;
	static GetDefaultObject(): TestPawnAction_CallFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestPawnAction_CallFunction;
	static C(Other: UObject | any): TestPawnAction_CallFunction;
}

declare class GameplayDebuggerNetPack { 
	clone() : GameplayDebuggerNetPack;
	static C(Other: UObject | any): GameplayDebuggerNetPack;
}

declare class GameplayDebuggerDebugActor { 
	ActorName: string;
	SyncCounter: number;
	clone() : GameplayDebuggerDebugActor;
	static C(Other: UObject | any): GameplayDebuggerDebugActor;
}

declare class GameplayDebuggerVisLogSync { 
	DeviceIDs: string;
	clone() : GameplayDebuggerVisLogSync;
	static C(Other: UObject | any): GameplayDebuggerVisLogSync;
}

declare class GameplayDebuggerRenderingComponent extends DebugDrawComponent { 
	static Load(ResourceName: string): GameplayDebuggerRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerRenderingComponent;
	static GetDefaultObject(): GameplayDebuggerRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerRenderingComponent;
	static C(Other: UObject | any): GameplayDebuggerRenderingComponent;
}

declare class GameplayDebuggerCategoryReplicator extends Actor { 
	OwnerPC: PlayerController;
	bIsEnabled: boolean;
	ReplicatedData: GameplayDebuggerNetPack;
	DebugActor: GameplayDebuggerDebugActor;
	VisLogSync: GameplayDebuggerVisLogSync;
	RenderingComp: GameplayDebuggerRenderingComponent;
	static GetDefaultObject(): GameplayDebuggerCategoryReplicator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerCategoryReplicator;
	ServerSetViewPoint(InViewLocation: Vector,InViewDirection: Vector): void;
	ServerSetEnabled(bEnable: boolean): void;
	ServerSetDebugActor(Actor: Actor,bSelectInEditor: boolean): void;
	ServerSetCategoryEnabled(CategoryId: number,bEnable: boolean): void;
	ServerSendExtensionInputEvent(ExtensionId: number,HandlerId: number): void;
	ServerSendCategoryInputEvent(CategoryId: number,HandlerId: number): void;
	static C(Other: UObject | any): GameplayDebuggerCategoryReplicator;
}

declare type EGameplayDebuggerOverrideMode = 'Enable' | 'Disable' | 'UseDefault' | 'EGameplayDebuggerOverrideMode_MAX';
declare var EGameplayDebuggerOverrideMode : { Enable:'Enable',Disable:'Disable',UseDefault:'UseDefault',EGameplayDebuggerOverrideMode_MAX:'EGameplayDebuggerOverrideMode_MAX', };
declare class GameplayDebuggerInputConfig { 
	ConfigName: string;
	Key: Key;
	bModShift: boolean;
	bModCtrl: boolean;
	bModAlt: boolean;
	bModCmd: boolean;
	clone() : GameplayDebuggerInputConfig;
	static C(Other: UObject | any): GameplayDebuggerInputConfig;
}

declare class GameplayDebuggerCategoryConfig { 
	CategoryName: string;
	SlotIdx: number;
	ActiveInGame: EGameplayDebuggerOverrideMode;
	ActiveInSimulate: EGameplayDebuggerOverrideMode;
	Hidden: EGameplayDebuggerOverrideMode;
	bOverrideSlotIdx: boolean;
	InputHandlers: GameplayDebuggerInputConfig[];
	clone() : GameplayDebuggerCategoryConfig;
	static C(Other: UObject | any): GameplayDebuggerCategoryConfig;
}

declare class GameplayDebuggerExtensionConfig { 
	ExtensionName: string;
	UseExtension: EGameplayDebuggerOverrideMode;
	InputHandlers: GameplayDebuggerInputConfig[];
	clone() : GameplayDebuggerExtensionConfig;
	static C(Other: UObject | any): GameplayDebuggerExtensionConfig;
}

declare class GameplayDebuggerConfig extends UObject { 
	ActivationKey: Key;
	CategoryRowNextKey: Key;
	CategoryRowPrevKey: Key;
	CategorySlot0: Key;
	CategorySlot1: Key;
	CategorySlot2: Key;
	CategorySlot3: Key;
	CategorySlot4: Key;
	CategorySlot5: Key;
	CategorySlot6: Key;
	CategorySlot7: Key;
	CategorySlot8: Key;
	CategorySlot9: Key;
	DebugCanvasPaddingLeft: number;
	DebugCanvasPaddingRight: number;
	DebugCanvasPaddingTop: number;
	DebugCanvasPaddingBottom: number;
	bDebugCanvasEnableTextShadow: boolean;
	Categories: GameplayDebuggerCategoryConfig[];
	Extensions: GameplayDebuggerExtensionConfig[];
	static Load(ResourceName: string): GameplayDebuggerConfig;
	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerConfig;
	static GetDefaultObject(): GameplayDebuggerConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerConfig;
	static C(Other: UObject | any): GameplayDebuggerConfig;
}

declare class GameplayDebuggerUserSettings extends DeveloperSettings { 
	bEnableGameplayDebuggerInEditor: boolean;
	MaxViewDistance: number;
	MaxViewAngle: number;
	FontSize: number;
	static Load(ResourceName: string): GameplayDebuggerUserSettings;
	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerUserSettings;
	static GetDefaultObject(): GameplayDebuggerUserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerUserSettings;
	static C(Other: UObject | any): GameplayDebuggerUserSettings;
}

declare class GameplayDebuggerPlayerData { 
	Controller: GameplayDebuggerLocalController;
	InputComponent: InputComponent;
	Replicator: GameplayDebuggerCategoryReplicator;
	clone() : GameplayDebuggerPlayerData;
	static C(Other: UObject | any): GameplayDebuggerPlayerData;
}

declare class GameplayDebuggerPlayerManager extends Actor { 
	PlayerData: GameplayDebuggerPlayerData[];
	PendingRegistrations: GameplayDebuggerCategoryReplicator[];
	EditorWorldData: GameplayDebuggerPlayerData;
	static GetDefaultObject(): GameplayDebuggerPlayerManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerPlayerManager;
	static C(Other: UObject | any): GameplayDebuggerPlayerManager;
}

declare class GameplayDebuggerLocalController extends UObject { 
	CachedReplicator: GameplayDebuggerCategoryReplicator;
	CachedPlayerManager: GameplayDebuggerPlayerManager;
	DebugActorCandidate: Actor;
	HUDFont: Font;
	static Load(ResourceName: string): GameplayDebuggerLocalController;
	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerLocalController;
	static GetDefaultObject(): GameplayDebuggerLocalController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerLocalController;
	static C(Other: UObject | any): GameplayDebuggerLocalController;
}

declare class BlueprintGameplayTagLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintGameplayTagLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintGameplayTagLibrary;
	static GetDefaultObject(): BlueprintGameplayTagLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintGameplayTagLibrary;
	static RemoveGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer, $: boolean};
	static NotEqual_TagTag(A: GameplayTag,B: string): boolean;
	static NotEqual_TagContainerTagContainer(A: GameplayTagContainer,B: string): boolean;
	static NotEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
	static NotEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
	static MatchesTag(TagOne: GameplayTag,TagTwo: GameplayTag,bExactMatch: boolean): boolean;
	static MatchesAnyTags(TagOne: GameplayTag,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
	static MakeLiteralGameplayTagContainer(Value: GameplayTagContainer): GameplayTagContainer;
	static MakeLiteralGameplayTag(Value: GameplayTag): GameplayTag;
	static MakeGameplayTagQuery(TagQuery: GameplayTagQuery): GameplayTagQuery;
	static MakeGameplayTagContainerFromTag(SingleTag: GameplayTag): GameplayTagContainer;
	static MakeGameplayTagContainerFromArray(GameplayTags: GameplayTag[]): GameplayTagContainer;
	static IsTagQueryEmpty(TagQuery: GameplayTagQuery): boolean;
	static IsGameplayTagValid(GameplayTag: GameplayTag): boolean;
	static HasTag(TagContainer: GameplayTagContainer,Tag: GameplayTag,bExactMatch: boolean): boolean;
	static HasAnyTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
	static HasAllTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
	static GetTagName(GameplayTag: GameplayTag): string;
	static GetNumGameplayTagsInContainer(TagContainer: GameplayTagContainer): number;
	static GetDebugStringFromGameplayTagContainer(TagContainer: GameplayTagContainer): string;
	static GetDebugStringFromGameplayTag(GameplayTag: GameplayTag): string;
	static GetAllActorsOfClassMatchingTagQuery(WorldContextObject: UObject,ActorClass: UnrealEngineClass,GameplayTagQuery: GameplayTagQuery,OutActors?: Actor[]): {OutActors: Actor[]};
	static EqualEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
	static EqualEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
	static DoesContainerMatchTagQuery(TagContainer: GameplayTagContainer,TagQuery: GameplayTagQuery): boolean;
	static BreakGameplayTagContainer(GameplayTagContainer: GameplayTagContainer,GameplayTags?: GameplayTag[]): {GameplayTags: GameplayTag[]};
	static AppendGameplayTagContainers(InOutTagContainer?: GameplayTagContainer,InTagContainer?: GameplayTagContainer): {InOutTagContainer: GameplayTagContainer};
	static AddGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer};
	static C(Other: UObject | any): BlueprintGameplayTagLibrary;
}

declare class GameplayTagAssetInterface extends Interface { 
	static Load(ResourceName: string): GameplayTagAssetInterface;
	static Find(Outer: UObject, ResourceName: string): GameplayTagAssetInterface;
	static GetDefaultObject(): GameplayTagAssetInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagAssetInterface;
	HasMatchingGameplayTag(TagToCheck: GameplayTag): boolean;
	HasAnyMatchingGameplayTags(TagContainer: GameplayTagContainer): boolean;
	HasAllMatchingGameplayTags(TagContainer: GameplayTagContainer): boolean;
	GetOwnedGameplayTags(TagContainer?: GameplayTagContainer): {TagContainer: GameplayTagContainer};
	static C(Other: UObject | any): GameplayTagAssetInterface;
}

declare class EditableGameplayTagQueryExpression extends UObject { 
	static Load(ResourceName: string): EditableGameplayTagQueryExpression;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression;
	static GetDefaultObject(): EditableGameplayTagQueryExpression;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression;
}

declare class EditableGameplayTagQuery extends UObject { 
	UserDescription: string;
	RootExpression: EditableGameplayTagQueryExpression;
	TagQueryExportText_Helper: GameplayTagQuery;
	static Load(ResourceName: string): EditableGameplayTagQuery;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQuery;
	static GetDefaultObject(): EditableGameplayTagQuery;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQuery;
	static C(Other: UObject | any): EditableGameplayTagQuery;
}

declare class EditableGameplayTagQueryExpression_AnyTagsMatch extends EditableGameplayTagQueryExpression { 
	Tags: GameplayTagContainer;
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AnyTagsMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AnyTagsMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_AnyTagsMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AnyTagsMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AnyTagsMatch;
}

declare class EditableGameplayTagQueryExpression_AllTagsMatch extends EditableGameplayTagQueryExpression { 
	Tags: GameplayTagContainer;
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AllTagsMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AllTagsMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_AllTagsMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AllTagsMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AllTagsMatch;
}

declare class EditableGameplayTagQueryExpression_NoTagsMatch extends EditableGameplayTagQueryExpression { 
	Tags: GameplayTagContainer;
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_NoTagsMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_NoTagsMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_NoTagsMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_NoTagsMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_NoTagsMatch;
}

declare class EditableGameplayTagQueryExpression_AnyExprMatch extends EditableGameplayTagQueryExpression { 
	Expressions: EditableGameplayTagQueryExpression[];
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AnyExprMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AnyExprMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_AnyExprMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AnyExprMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AnyExprMatch;
}

declare class EditableGameplayTagQueryExpression_AllExprMatch extends EditableGameplayTagQueryExpression { 
	Expressions: EditableGameplayTagQueryExpression[];
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AllExprMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AllExprMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_AllExprMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AllExprMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AllExprMatch;
}

declare class EditableGameplayTagQueryExpression_NoExprMatch extends EditableGameplayTagQueryExpression { 
	Expressions: EditableGameplayTagQueryExpression[];
	static Load(ResourceName: string): EditableGameplayTagQueryExpression_NoExprMatch;
	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_NoExprMatch;
	static GetDefaultObject(): EditableGameplayTagQueryExpression_NoExprMatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_NoExprMatch;
	static C(Other: UObject | any): EditableGameplayTagQueryExpression_NoExprMatch;
}

declare class GameplayTagsManager extends UObject { 
	TagSources: any;
	GameplayTagTables: DataTable[];
	static Load(ResourceName: string): GameplayTagsManager;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsManager;
	static GetDefaultObject(): GameplayTagsManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsManager;
	static C(Other: UObject | any): GameplayTagsManager;
}

declare class GameplayTagTableRow extends TableRowBase { 
	Tag: string;
	DevComment: string;
	clone() : GameplayTagTableRow;
	static C(Other: UObject | any): GameplayTagTableRow;
}

declare class GameplayTagsList extends UObject { 
	ConfigFileName: string;
	GameplayTagList: GameplayTagTableRow[];
	static Load(ResourceName: string): GameplayTagsList;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsList;
	static GetDefaultObject(): GameplayTagsList;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsList;
	static C(Other: UObject | any): GameplayTagsList;
}

declare class RestrictedGameplayTagTableRow extends GameplayTagTableRow { 
	bAllowNonRestrictedChildren: boolean;
	clone() : RestrictedGameplayTagTableRow;
	static C(Other: UObject | any): RestrictedGameplayTagTableRow;
}

declare class RestrictedGameplayTagsList extends UObject { 
	ConfigFileName: string;
	RestrictedGameplayTagList: RestrictedGameplayTagTableRow[];
	static Load(ResourceName: string): RestrictedGameplayTagsList;
	static Find(Outer: UObject, ResourceName: string): RestrictedGameplayTagsList;
	static GetDefaultObject(): RestrictedGameplayTagsList;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RestrictedGameplayTagsList;
	static C(Other: UObject | any): RestrictedGameplayTagsList;
}

declare class GameplayTagCategoryRemap { 
	BaseCategory: string;
	RemapCategories: string[];
	clone() : GameplayTagCategoryRemap;
	static C(Other: UObject | any): GameplayTagCategoryRemap;
}

declare class GameplayTagRedirect { 
	OldTagName: string;
	NewTagName: string;
	clone() : GameplayTagRedirect;
	static C(Other: UObject | any): GameplayTagRedirect;
}

declare class RestrictedConfigInfo { 
	RestrictedConfigName: string;
	Owners: string[];
	clone() : RestrictedConfigInfo;
	static C(Other: UObject | any): RestrictedConfigInfo;
}

declare class GameplayTagsSettings extends GameplayTagsList { 
	ImportTagsFromConfig: boolean;
	WarnOnInvalidTags: boolean;
	ClearInvalidTags: boolean;
	FastReplication: boolean;
	InvalidTagCharacters: string;
	CategoryRemapping: GameplayTagCategoryRemap[];
	GameplayTagTableList: SoftObjectPath[];
	GameplayTagRedirects: GameplayTagRedirect[];
	CommonlyReplicatedTags: string[];
	NumBitsForContainerSize: number;
	NetIndexFirstBitSegment: number;
	RestrictedConfigFiles: RestrictedConfigInfo[];
	RestrictedTagList: string;
	static Load(ResourceName: string): GameplayTagsSettings;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsSettings;
	static GetDefaultObject(): GameplayTagsSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsSettings;
	static C(Other: UObject | any): GameplayTagsSettings;
}

declare class GameplayTagsDeveloperSettings extends DeveloperSettings { 
	DeveloperConfigName: string;
	FavoriteTagSource: string;
	static Load(ResourceName: string): GameplayTagsDeveloperSettings;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsDeveloperSettings;
	static GetDefaultObject(): GameplayTagsDeveloperSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsDeveloperSettings;
	static C(Other: UObject | any): GameplayTagsDeveloperSettings;
}

declare class AIBlueprintHelperLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AIBlueprintHelperLibrary;
	static Find(Outer: UObject, ResourceName: string): AIBlueprintHelperLibrary;
	static GetDefaultObject(): AIBlueprintHelperLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIBlueprintHelperLibrary;
	static UnlockAIResourcesWithAnimation(AnimInstance: AnimInstance,bUnlockMovement: boolean,UnlockAILogic: boolean): void;
	static SpawnAIFromClass(WorldContextObject: UObject,PawnClass: UnrealEngineClass,BehaviorTree: BehaviorTree,Location: Vector,Rotation: Rotator,bNoCollisionFail: boolean,Owner: Actor): Pawn;
	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
	static SendAIMessage(Target: Pawn,Message: string,MessageSource: UObject,bSuccess: boolean): void;
	static LockAIResourcesWithAnimation(AnimInstance: AnimInstance,bLockMovement: boolean,LockAILogic: boolean): void;
	static IsValidAIRotation(Rotation: Rotator): boolean;
	static IsValidAILocation(Location: Vector): boolean;
	static IsValidAIDirection(DirectionVector: Vector): boolean;
	static GetNextNavLinkIndex(Controller: Controller): number;
	static GetCurrentPathPoints(Controller: Controller): Vector[];
	static GetCurrentPathIndex(Controller: Controller): number;
	static GetCurrentPath(Controller: Controller): NavigationPath;
	static GetBlackboard(Target: Actor): BlackboardComponent;
	static GetAIController(ControlledActor: Actor): AIController;
	static CreateMoveToProxyObject(WorldContextObject: UObject,Pawn: Pawn,Destination: Vector,TargetActor: Actor,AcceptanceRadius: number,bStopOnOverlap: boolean): AIAsyncTaskBlueprintProxy;
	static C(Other: UObject | any): AIBlueprintHelperLibrary;
}

declare class AIDataProvider_QueryParams extends AIDataProvider { 
	ParamName: string;
	FloatValue: number;
	IntValue: number;
	BoolValue: boolean;
	static Load(ResourceName: string): AIDataProvider_QueryParams;
	static Find(Outer: UObject, ResourceName: string): AIDataProvider_QueryParams;
	static GetDefaultObject(): AIDataProvider_QueryParams;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIDataProvider_QueryParams;
	static C(Other: UObject | any): AIDataProvider_QueryParams;
}

declare class AIDataProvider_Random extends AIDataProvider_QueryParams { 
	Min: number;
	Max: number;
	bInteger: boolean;
	static Load(ResourceName: string): AIDataProvider_Random;
	static Find(Outer: UObject, ResourceName: string): AIDataProvider_Random;
	static GetDefaultObject(): AIDataProvider_Random;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIDataProvider_Random;
	static C(Other: UObject | any): AIDataProvider_Random;
}

declare class AIPerceptionListenerInterface extends Interface { 
	static Load(ResourceName: string): AIPerceptionListenerInterface;
	static Find(Outer: UObject, ResourceName: string): AIPerceptionListenerInterface;
	static GetDefaultObject(): AIPerceptionListenerInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionListenerInterface;
	static C(Other: UObject | any): AIPerceptionListenerInterface;
}

declare class AIPerceptionStimuliSourceComponent extends ActorComponent { 
	bAutoRegisterAsSource: boolean;
	RegisterAsSourceForSenses: UnrealEngineClass[];
	static Load(ResourceName: string): AIPerceptionStimuliSourceComponent;
	static Find(Outer: UObject, ResourceName: string): AIPerceptionStimuliSourceComponent;
	static GetDefaultObject(): AIPerceptionStimuliSourceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionStimuliSourceComponent;
	UnregisterFromSense(SenseClass: UnrealEngineClass): void;
	UnregisterFromPerceptionSystem(): void;
	RegisterWithPerceptionSystem(): void;
	RegisterForSense(SenseClass: UnrealEngineClass): void;
	static C(Other: UObject | any): AIPerceptionStimuliSourceComponent;
}

declare class AIResourceInterface extends Interface { 
	static Load(ResourceName: string): AIResourceInterface;
	static Find(Outer: UObject, ResourceName: string): AIResourceInterface;
	static GetDefaultObject(): AIResourceInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResourceInterface;
	static C(Other: UObject | any): AIResourceInterface;
}

declare class AIResource_Movement extends GameplayTaskResource { 
	static Load(ResourceName: string): AIResource_Movement;
	static Find(Outer: UObject, ResourceName: string): AIResource_Movement;
	static GetDefaultObject(): AIResource_Movement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResource_Movement;
	static C(Other: UObject | any): AIResource_Movement;
}

declare class AIResource_Logic extends GameplayTaskResource { 
	static Load(ResourceName: string): AIResource_Logic;
	static Find(Outer: UObject, ResourceName: string): AIResource_Logic;
	static GetDefaultObject(): AIResource_Logic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResource_Logic;
	static C(Other: UObject | any): AIResource_Logic;
}

declare type EUserDefinedStructureStatus = 'UDSS_UpToDate' | 'UDSS_Dirty' | 'UDSS_Error' | 'UDSS_Duplicate' | 'UDSS_MAX';
declare var EUserDefinedStructureStatus : { UDSS_UpToDate:'UDSS_UpToDate',UDSS_Dirty:'UDSS_Dirty',UDSS_Error:'UDSS_Error',UDSS_Duplicate:'UDSS_Duplicate',UDSS_MAX:'UDSS_MAX', };
declare class UserDefinedStruct extends ScriptStruct { 
	PrimaryStruct: any;
	ErrorMessage: string;
	EditorData: UObject;
	Status: EUserDefinedStructureStatus;
	Guid: Guid;
	static Load(ResourceName: string): UserDefinedStruct;
	static Find(Outer: UObject, ResourceName: string): UserDefinedStruct;
	static GetDefaultObject(): UserDefinedStruct;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedStruct;
	static C(Other: UObject | any): UserDefinedStruct;
}

declare class AISenseBlueprintListener extends UserDefinedStruct { 
	static Load(ResourceName: string): AISenseBlueprintListener;
	static Find(Outer: UObject, ResourceName: string): AISenseBlueprintListener;
	static GetDefaultObject(): AISenseBlueprintListener;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseBlueprintListener;
	static C(Other: UObject | any): AISenseBlueprintListener;
}

declare class AISense_Blueprint extends AISense { 
	ListenerDataType: UnrealEngineClass;
	ListenerContainer: AIPerceptionComponent[];
	UnprocessedEvents: AISenseEvent[];
	static Load(ResourceName: string): AISense_Blueprint;
	static Find(Outer: UObject, ResourceName: string): AISense_Blueprint;
	static GetDefaultObject(): AISense_Blueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Blueprint;
	OnUpdate(EventsToProcess: AISenseEvent[]): number;
	OnListenerUpdated(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
	OnListenerUnregistered(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
	OnListenerRegistered(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
	K2_OnNewPawn(NewPawn: Pawn): void;
	GetAllListenerComponents(ListenerComponents?: AIPerceptionComponent[]): {ListenerComponents: AIPerceptionComponent[]};
	GetAllListenerActors(ListenerActors?: Actor[]): {ListenerActors: Actor[]};
	static C(Other: UObject | any): AISense_Blueprint;
}

declare class AISenseConfig_Blueprint extends AISenseConfig { 
	Implementation: UnrealEngineClass;
	static Load(ResourceName: string): AISenseConfig_Blueprint;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Blueprint;
	static GetDefaultObject(): AISenseConfig_Blueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Blueprint;
	static C(Other: UObject | any): AISenseConfig_Blueprint;
}

declare class AIDamageEvent { 
	Amount: number;
	Location: Vector;
	HitLocation: Vector;
	DamagedActor: Actor;
	Instigator: Actor;
	Tag: string;
	clone() : AIDamageEvent;
	static C(Other: UObject | any): AIDamageEvent;
}

declare class AISense_Damage extends AISense { 
	RegisteredEvents: AIDamageEvent[];
	static Load(ResourceName: string): AISense_Damage;
	static Find(Outer: UObject, ResourceName: string): AISense_Damage;
	static GetDefaultObject(): AISense_Damage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Damage;
	static ReportDamageEvent(WorldContextObject: UObject,DamagedActor: Actor,Instigator: Actor,DamageAmount: number,EventLocation: Vector,HitLocation: Vector,Tag: string): void;
	static C(Other: UObject | any): AISense_Damage;
}

declare class AISenseConfig_Damage extends AISenseConfig { 
	Implementation: UnrealEngineClass;
	static Load(ResourceName: string): AISenseConfig_Damage;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Damage;
	static GetDefaultObject(): AISenseConfig_Damage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Damage;
	static C(Other: UObject | any): AISenseConfig_Damage;
}

declare class AINoiseEvent { 
	NoiseLocation: Vector;
	Loudness: number;
	MaxRange: number;
	Instigator: Actor;
	Tag: string;
	clone() : AINoiseEvent;
	static C(Other: UObject | any): AINoiseEvent;
}

declare class AISense_Hearing extends AISense { 
	NoiseEvents: AINoiseEvent[];
	SpeedOfSoundSq: number;
	static Load(ResourceName: string): AISense_Hearing;
	static Find(Outer: UObject, ResourceName: string): AISense_Hearing;
	static GetDefaultObject(): AISense_Hearing;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Hearing;
	static ReportNoiseEvent(WorldContextObject: UObject,NoiseLocation: Vector,Loudness: number,Instigator: Actor,MaxRange: number,Tag: string): void;
	static C(Other: UObject | any): AISense_Hearing;
}

declare class AISenseAffiliationFilter { 
	bDetectEnemies: boolean;
	bDetectNeutrals: boolean;
	bDetectFriendlies: boolean;
	clone() : AISenseAffiliationFilter;
	static C(Other: UObject | any): AISenseAffiliationFilter;
}

declare class AISenseConfig_Hearing extends AISenseConfig { 
	Implementation: UnrealEngineClass;
	HearingRange: number;
	LoSHearingRange: number;
	bUseLoSHearing: boolean;
	DetectionByAffiliation: AISenseAffiliationFilter;
	static Load(ResourceName: string): AISenseConfig_Hearing;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Hearing;
	static GetDefaultObject(): AISenseConfig_Hearing;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Hearing;
	static C(Other: UObject | any): AISenseConfig_Hearing;
}

declare class AISenseConfig_Prediction extends AISenseConfig { 
	static Load(ResourceName: string): AISenseConfig_Prediction;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Prediction;
	static GetDefaultObject(): AISenseConfig_Prediction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Prediction;
	static C(Other: UObject | any): AISenseConfig_Prediction;
}

declare class AISense_Sight extends AISense { 
	MaxTracesPerTick: number;
	MinQueriesPerTimeSliceCheck: number;
	MaxTimeSlicePerTick: any;
	HighImportanceQueryDistanceThreshold: number;
	MaxQueryImportance: number;
	SightLimitQueryImportance: number;
	static Load(ResourceName: string): AISense_Sight;
	static Find(Outer: UObject, ResourceName: string): AISense_Sight;
	static GetDefaultObject(): AISense_Sight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Sight;
	static C(Other: UObject | any): AISense_Sight;
}

declare class AISenseConfig_Sight extends AISenseConfig { 
	Implementation: UnrealEngineClass;
	SightRadius: number;
	LoseSightRadius: number;
	PeripheralVisionAngleDegrees: number;
	DetectionByAffiliation: AISenseAffiliationFilter;
	AutoSuccessRangeFromLastSeenLocation: number;
	PointOfViewBackwardOffset: number;
	NearClippingRadius: number;
	static Load(ResourceName: string): AISenseConfig_Sight;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Sight;
	static GetDefaultObject(): AISenseConfig_Sight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Sight;
	static C(Other: UObject | any): AISenseConfig_Sight;
}

declare class AISenseConfig_Team extends AISenseConfig { 
	static Load(ResourceName: string): AISenseConfig_Team;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Team;
	static GetDefaultObject(): AISenseConfig_Team;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Team;
	static C(Other: UObject | any): AISenseConfig_Team;
}

declare class AISenseConfig_Touch extends AISenseConfig { 
	static Load(ResourceName: string): AISenseConfig_Touch;
	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Touch;
	static GetDefaultObject(): AISenseConfig_Touch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Touch;
	static C(Other: UObject | any): AISenseConfig_Touch;
}

declare class AISenseEvent_Damage extends AISenseEvent { 
	Event: AIDamageEvent;
	static Load(ResourceName: string): AISenseEvent_Damage;
	static Find(Outer: UObject, ResourceName: string): AISenseEvent_Damage;
	static GetDefaultObject(): AISenseEvent_Damage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseEvent_Damage;
	static C(Other: UObject | any): AISenseEvent_Damage;
}

declare class AISenseEvent_Hearing extends AISenseEvent { 
	Event: AINoiseEvent;
	static Load(ResourceName: string): AISenseEvent_Hearing;
	static Find(Outer: UObject, ResourceName: string): AISenseEvent_Hearing;
	static GetDefaultObject(): AISenseEvent_Hearing;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseEvent_Hearing;
	static C(Other: UObject | any): AISenseEvent_Hearing;
}

declare class AIPredictionEvent { 
	Requestor: Actor;
	PredictedActor: Actor;
	clone() : AIPredictionEvent;
	static C(Other: UObject | any): AIPredictionEvent;
}

declare class AISense_Prediction extends AISense { 
	RegisteredEvents: AIPredictionEvent[];
	static Load(ResourceName: string): AISense_Prediction;
	static Find(Outer: UObject, ResourceName: string): AISense_Prediction;
	static GetDefaultObject(): AISense_Prediction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Prediction;
	static RequestPawnPredictionEvent(Requestor: Pawn,PredictedActor: Actor,PredictionTime: number): void;
	static RequestControllerPredictionEvent(Requestor: AIController,PredictedActor: Actor,PredictionTime: number): void;
	static C(Other: UObject | any): AISense_Prediction;
}

declare class AITeamStimulusEvent { 
	Broadcaster: Actor;
	Enemy: Actor;
	clone() : AITeamStimulusEvent;
	static C(Other: UObject | any): AITeamStimulusEvent;
}

declare class AISense_Team extends AISense { 
	RegisteredEvents: AITeamStimulusEvent[];
	static Load(ResourceName: string): AISense_Team;
	static Find(Outer: UObject, ResourceName: string): AISense_Team;
	static GetDefaultObject(): AISense_Team;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Team;
	static C(Other: UObject | any): AISense_Team;
}

declare class AITouchEvent { 
	TouchReceiver: Actor;
	OtherActor: Actor;
	clone() : AITouchEvent;
	static C(Other: UObject | any): AITouchEvent;
}

declare class AISense_Touch extends AISense { 
	RegisteredEvents: AITouchEvent[];
	static Load(ResourceName: string): AISense_Touch;
	static Find(Outer: UObject, ResourceName: string): AISense_Touch;
	static GetDefaultObject(): AISense_Touch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Touch;
	static C(Other: UObject | any): AISense_Touch;
}

declare class AISightTargetInterface extends Interface { 
	static Load(ResourceName: string): AISightTargetInterface;
	static Find(Outer: UObject, ResourceName: string): AISightTargetInterface;
	static GetDefaultObject(): AISightTargetInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISightTargetInterface;
	static C(Other: UObject | any): AISightTargetInterface;
}

declare class AITask extends GameplayTask { 
	OwnerController: AIController;
	static Load(ResourceName: string): AITask;
	static Find(Outer: UObject, ResourceName: string): AITask;
	static GetDefaultObject(): AITask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask;
	static C(Other: UObject | any): AITask;
}

declare class AITask_LockLogic extends AITask { 
	static Load(ResourceName: string): AITask_LockLogic;
	static Find(Outer: UObject, ResourceName: string): AITask_LockLogic;
	static GetDefaultObject(): AITask_LockLogic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_LockLogic;
	static C(Other: UObject | any): AITask_LockLogic;
}

declare class AIMoveRequest { 
	GoalActor: Actor;
	clone() : AIMoveRequest;
	static C(Other: UObject | any): AIMoveRequest;
}

declare type EAIOptionFlag = 'Default' | 'Enable' | 'Disable' | 'MAX';
declare var EAIOptionFlag : { Default:'Default',Enable:'Enable',Disable:'Disable',MAX:'MAX', };
declare class AITask_MoveTo extends AITask { 
	OnRequestFailed: UnrealEngineMulticastDelegate<() => void>;
	OnMoveFinished: UnrealEngineMulticastDelegate<(Result: EPathFollowingResult, AIController: AIController) => void>;
	MoveRequest: AIMoveRequest;
	static Load(ResourceName: string): AITask_MoveTo;
	static Find(Outer: UObject, ResourceName: string): AITask_MoveTo;
	static GetDefaultObject(): AITask_MoveTo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_MoveTo;
	static AIMoveTo(Controller: AIController,GoalLocation: Vector,GoalActor: Actor,AcceptanceRadius: number,StopOnOverlap: EAIOptionFlag,AcceptPartialPath: EAIOptionFlag,bUsePathfinding: boolean,bLockAILogic: boolean,bUseContinuosGoalTracking: boolean,ProjectGoalOnNavigation: EAIOptionFlag): AITask_MoveTo;
	static C(Other: UObject | any): AITask_MoveTo;
}

declare class AITask_RunEQS extends AITask { 
	static Load(ResourceName: string): AITask_RunEQS;
	static Find(Outer: UObject, ResourceName: string): AITask_RunEQS;
	static GetDefaultObject(): AITask_RunEQS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_RunEQS;
	static RunEQS(Controller: AIController,QueryTemplate: EnvQuery): AITask_RunEQS;
	static C(Other: UObject | any): AITask_RunEQS;
}

declare class BehaviorTreeTypes extends UObject { 
	static Load(ResourceName: string): BehaviorTreeTypes;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeTypes;
	static GetDefaultObject(): BehaviorTreeTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeTypes;
	static C(Other: UObject | any): BehaviorTreeTypes;
}

declare class BlackboardAssetProvider extends Interface { 
	static Load(ResourceName: string): BlackboardAssetProvider;
	static Find(Outer: UObject, ResourceName: string): BlackboardAssetProvider;
	static GetDefaultObject(): BlackboardAssetProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardAssetProvider;
	GetBlackboardAsset(): BlackboardData;
	static C(Other: UObject | any): BlackboardAssetProvider;
}

declare class BlackboardKeyType_Bool extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Bool;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Bool;
	static GetDefaultObject(): BlackboardKeyType_Bool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Bool;
	static C(Other: UObject | any): BlackboardKeyType_Bool;
}

declare class BlackboardKeyType_Class extends BlackboardKeyType { 
	BaseClass: UnrealEngineClass;
	static Load(ResourceName: string): BlackboardKeyType_Class;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Class;
	static GetDefaultObject(): BlackboardKeyType_Class;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Class;
	static C(Other: UObject | any): BlackboardKeyType_Class;
}

declare class BlackboardKeyType_Enum extends BlackboardKeyType { 
	EnumType: Enum;
	EnumName: string;
	bIsEnumNameValid: boolean;
	static Load(ResourceName: string): BlackboardKeyType_Enum;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Enum;
	static GetDefaultObject(): BlackboardKeyType_Enum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Enum;
	static C(Other: UObject | any): BlackboardKeyType_Enum;
}

declare class BlackboardKeyType_Float extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Float;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Float;
	static GetDefaultObject(): BlackboardKeyType_Float;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Float;
	static C(Other: UObject | any): BlackboardKeyType_Float;
}

declare class BlackboardKeyType_Int extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Int;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Int;
	static GetDefaultObject(): BlackboardKeyType_Int;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Int;
	static C(Other: UObject | any): BlackboardKeyType_Int;
}

declare class BlackboardKeyType_Name extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Name;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Name;
	static GetDefaultObject(): BlackboardKeyType_Name;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Name;
	static C(Other: UObject | any): BlackboardKeyType_Name;
}

declare class BlackboardKeyType_NativeEnum extends BlackboardKeyType { 
	EnumName: string;
	EnumType: Enum;
	static Load(ResourceName: string): BlackboardKeyType_NativeEnum;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_NativeEnum;
	static GetDefaultObject(): BlackboardKeyType_NativeEnum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_NativeEnum;
	static C(Other: UObject | any): BlackboardKeyType_NativeEnum;
}

declare class BlackboardKeyType_Object extends BlackboardKeyType { 
	BaseClass: UnrealEngineClass;
	static Load(ResourceName: string): BlackboardKeyType_Object;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Object;
	static GetDefaultObject(): BlackboardKeyType_Object;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Object;
	static C(Other: UObject | any): BlackboardKeyType_Object;
}

declare class BlackboardKeyType_Rotator extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Rotator;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Rotator;
	static GetDefaultObject(): BlackboardKeyType_Rotator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Rotator;
	static C(Other: UObject | any): BlackboardKeyType_Rotator;
}

declare class BlackboardKeyType_String extends BlackboardKeyType { 
	StringValue: string;
	static Load(ResourceName: string): BlackboardKeyType_String;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_String;
	static GetDefaultObject(): BlackboardKeyType_String;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_String;
	static C(Other: UObject | any): BlackboardKeyType_String;
}

declare class BlackboardKeyType_Vector extends BlackboardKeyType { 
	static Load(ResourceName: string): BlackboardKeyType_Vector;
	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Vector;
	static GetDefaultObject(): BlackboardKeyType_Vector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Vector;
	static C(Other: UObject | any): BlackboardKeyType_Vector;
}

declare class BTComposite_Selector extends BTCompositeNode { 
	static Load(ResourceName: string): BTComposite_Selector;
	static Find(Outer: UObject, ResourceName: string): BTComposite_Selector;
	static GetDefaultObject(): BTComposite_Selector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_Selector;
	static C(Other: UObject | any): BTComposite_Selector;
}

declare class BTComposite_Sequence extends BTCompositeNode { 
	static Load(ResourceName: string): BTComposite_Sequence;
	static Find(Outer: UObject, ResourceName: string): BTComposite_Sequence;
	static GetDefaultObject(): BTComposite_Sequence;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_Sequence;
	static C(Other: UObject | any): BTComposite_Sequence;
}

declare type EBTParallelMode = 'AbortBackground' | 'WaitForBackground' | 'EBTParallelMode_MAX';
declare var EBTParallelMode : { AbortBackground:'AbortBackground',WaitForBackground:'WaitForBackground',EBTParallelMode_MAX:'EBTParallelMode_MAX', };
declare class BTComposite_SimpleParallel extends BTCompositeNode { 
	FinishMode: EBTParallelMode;
	static Load(ResourceName: string): BTComposite_SimpleParallel;
	static Find(Outer: UObject, ResourceName: string): BTComposite_SimpleParallel;
	static GetDefaultObject(): BTComposite_SimpleParallel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_SimpleParallel;
	static C(Other: UObject | any): BTComposite_SimpleParallel;
}

declare class BTDecorator_BlueprintBase extends BTDecorator { 
	AIOwner: AIController;
	ActorOwner: Actor;
	ObservedKeyNames: string[];
	CustomDescription: string;
	bShowPropertyDetails: boolean;
	bCheckConditionOnlyBlackBoardChanges: boolean;
	bIsObservingBB: boolean;
	static Load(ResourceName: string): BTDecorator_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_BlueprintBase;
	static GetDefaultObject(): BTDecorator_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_BlueprintBase;
	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
	ReceiveObserverDeactivatedAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveObserverDeactivated(OwnerActor: Actor): void;
	ReceiveObserverActivatedAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveObserverActivated(OwnerActor: Actor): void;
	ReceiveExecutionStartAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveExecutionStart(OwnerActor: Actor): void;
	ReceiveExecutionFinishAI(OwnerController: AIController,ControlledPawn: Pawn,NodeResult: EBTNodeResult): void;
	ReceiveExecutionFinish(OwnerActor: Actor,NodeResult: EBTNodeResult): void;
	PerformConditionCheckAI(OwnerController: AIController,ControlledPawn: Pawn): boolean;
	PerformConditionCheck(OwnerActor: Actor): boolean;
	IsDecoratorObserverActive(): boolean;
	IsDecoratorExecutionActive(): boolean;
	static C(Other: UObject | any): BTDecorator_BlueprintBase;
}

declare type EGameplayContainerMatchType = 'Any' | 'All' | 'EGameplayContainerMatchType_MAX';
declare var EGameplayContainerMatchType : { Any:'Any',All:'All',EGameplayContainerMatchType_MAX:'EGameplayContainerMatchType_MAX', };
declare class BTDecorator_CheckGameplayTagsOnActor extends BTDecorator { 
	ActorToCheck: BlackboardKeySelector;
	TagsToMatch: EGameplayContainerMatchType;
	GameplayTags: GameplayTagContainer;
	CachedDescription: string;
	static Load(ResourceName: string): BTDecorator_CheckGameplayTagsOnActor;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_CheckGameplayTagsOnActor;
	static GetDefaultObject(): BTDecorator_CheckGameplayTagsOnActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_CheckGameplayTagsOnActor;
	static C(Other: UObject | any): BTDecorator_CheckGameplayTagsOnActor;
}

declare type EBlackBoardEntryComparison = 'Equal' | 'NotEqual' | 'EBlackBoardEntryComparison_MAX';
declare var EBlackBoardEntryComparison : { Equal:'Equal',NotEqual:'NotEqual',EBlackBoardEntryComparison_MAX:'EBlackBoardEntryComparison_MAX', };
declare class BTDecorator_CompareBBEntries extends BTDecorator { 
	Operator: EBlackBoardEntryComparison;
	BlackboardKeyA: BlackboardKeySelector;
	BlackboardKeyB: BlackboardKeySelector;
	static Load(ResourceName: string): BTDecorator_CompareBBEntries;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_CompareBBEntries;
	static GetDefaultObject(): BTDecorator_CompareBBEntries;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_CompareBBEntries;
	static C(Other: UObject | any): BTDecorator_CompareBBEntries;
}

declare class BTDecorator_ConditionalLoop extends BTDecorator_Blackboard { 
	static Load(ResourceName: string): BTDecorator_ConditionalLoop;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ConditionalLoop;
	static GetDefaultObject(): BTDecorator_ConditionalLoop;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ConditionalLoop;
	static C(Other: UObject | any): BTDecorator_ConditionalLoop;
}

declare class BTDecorator_ConeCheck extends BTDecorator { 
	ConeHalfAngle: number;
	ConeOrigin: BlackboardKeySelector;
	ConeDirection: BlackboardKeySelector;
	Observed: BlackboardKeySelector;
	static Load(ResourceName: string): BTDecorator_ConeCheck;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ConeCheck;
	static GetDefaultObject(): BTDecorator_ConeCheck;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ConeCheck;
	static C(Other: UObject | any): BTDecorator_ConeCheck;
}

declare class BTDecorator_Cooldown extends BTDecorator { 
	CoolDownTime: number;
	static Load(ResourceName: string): BTDecorator_Cooldown;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_Cooldown;
	static GetDefaultObject(): BTDecorator_Cooldown;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Cooldown;
	static C(Other: UObject | any): BTDecorator_Cooldown;
}

declare type EPathExistanceQueryType = 'NavmeshRaycast2D' | 'HierarchicalQuery' | 'RegularPathFinding' | 'EPathExistanceQueryType_MAX';
declare var EPathExistanceQueryType : { NavmeshRaycast2D:'NavmeshRaycast2D',HierarchicalQuery:'HierarchicalQuery',RegularPathFinding:'RegularPathFinding',EPathExistanceQueryType_MAX:'EPathExistanceQueryType_MAX', };
declare class BTDecorator_DoesPathExist extends BTDecorator { 
	BlackboardKeyA: BlackboardKeySelector;
	BlackboardKeyB: BlackboardKeySelector;
	bUseSelf: boolean;
	PathQueryType: EPathExistanceQueryType;
	FilterClass: UnrealEngineClass;
	static Load(ResourceName: string): BTDecorator_DoesPathExist;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_DoesPathExist;
	static GetDefaultObject(): BTDecorator_DoesPathExist;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_DoesPathExist;
	static C(Other: UObject | any): BTDecorator_DoesPathExist;
}

declare class BTDecorator_ForceSuccess extends BTDecorator { 
	static Load(ResourceName: string): BTDecorator_ForceSuccess;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ForceSuccess;
	static GetDefaultObject(): BTDecorator_ForceSuccess;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ForceSuccess;
	static C(Other: UObject | any): BTDecorator_ForceSuccess;
}

declare type FAIDistanceType = 'Distance3D' | 'Distance2D' | 'DistanceZ' | 'MAX';
declare var FAIDistanceType : { Distance3D:'Distance3D',Distance2D:'Distance2D',DistanceZ:'DistanceZ',MAX:'MAX', };
declare class BTDecorator_IsAtLocation extends BTDecorator_BlackboardBase { 
	AcceptableRadius: number;
	ParametrizedAcceptableRadius: AIDataProviderFloatValue;
	GeometricDistanceType: FAIDistanceType;
	bUseParametrizedRadius: boolean;
	bUseNavAgentGoalLocation: boolean;
	bPathFindingBasedTest: boolean;
	static Load(ResourceName: string): BTDecorator_IsAtLocation;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_IsAtLocation;
	static GetDefaultObject(): BTDecorator_IsAtLocation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_IsAtLocation;
	static C(Other: UObject | any): BTDecorator_IsAtLocation;
}

declare class BTDecorator_IsBBEntryOfClass extends BTDecorator_BlackboardBase { 
	TestClass: UnrealEngineClass;
	static Load(ResourceName: string): BTDecorator_IsBBEntryOfClass;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_IsBBEntryOfClass;
	static GetDefaultObject(): BTDecorator_IsBBEntryOfClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_IsBBEntryOfClass;
	static C(Other: UObject | any): BTDecorator_IsBBEntryOfClass;
}

declare class BTDecorator_KeepInCone extends BTDecorator { 
	ConeHalfAngle: number;
	ConeOrigin: BlackboardKeySelector;
	Observed: BlackboardKeySelector;
	bUseSelfAsOrigin: boolean;
	bUseSelfAsObserved: boolean;
	static Load(ResourceName: string): BTDecorator_KeepInCone;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_KeepInCone;
	static GetDefaultObject(): BTDecorator_KeepInCone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_KeepInCone;
	static C(Other: UObject | any): BTDecorator_KeepInCone;
}

declare class BTDecorator_Loop extends BTDecorator { 
	NumLoops: number;
	bInfiniteLoop: boolean;
	InfiniteLoopTimeoutTime: number;
	static Load(ResourceName: string): BTDecorator_Loop;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_Loop;
	static GetDefaultObject(): BTDecorator_Loop;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Loop;
	static C(Other: UObject | any): BTDecorator_Loop;
}

declare class BTDecorator_ReachedMoveGoal extends BTDecorator { 
	static Load(ResourceName: string): BTDecorator_ReachedMoveGoal;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_ReachedMoveGoal;
	static GetDefaultObject(): BTDecorator_ReachedMoveGoal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ReachedMoveGoal;
	static C(Other: UObject | any): BTDecorator_ReachedMoveGoal;
}

declare class BTDecorator_SetTagCooldown extends BTDecorator { 
	CooldownTag: GameplayTag;
	CooldownDuration: number;
	bAddToExistingDuration: boolean;
	static Load(ResourceName: string): BTDecorator_SetTagCooldown;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_SetTagCooldown;
	static GetDefaultObject(): BTDecorator_SetTagCooldown;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_SetTagCooldown;
	static C(Other: UObject | any): BTDecorator_SetTagCooldown;
}

declare class BTDecorator_TagCooldown extends BTDecorator { 
	CooldownTag: GameplayTag;
	CooldownDuration: number;
	bAddToExistingDuration: boolean;
	bActivatesCooldown: boolean;
	static Load(ResourceName: string): BTDecorator_TagCooldown;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_TagCooldown;
	static GetDefaultObject(): BTDecorator_TagCooldown;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_TagCooldown;
	static C(Other: UObject | any): BTDecorator_TagCooldown;
}

declare class BTDecorator_TimeLimit extends BTDecorator { 
	TimeLimit: number;
	static Load(ResourceName: string): BTDecorator_TimeLimit;
	static Find(Outer: UObject, ResourceName: string): BTDecorator_TimeLimit;
	static GetDefaultObject(): BTDecorator_TimeLimit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_TimeLimit;
	static C(Other: UObject | any): BTDecorator_TimeLimit;
}

declare class BTFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BTFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): BTFunctionLibrary;
	static GetDefaultObject(): BTFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTFunctionLibrary;
	static StopUsingExternalEvent(NodeOwner: BTNode): void;
	static StartUsingExternalEvent(NodeOwner: BTNode,OwningActor: Actor): void;
	static SetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Vector): void;
	static SetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
	static SetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Rotator): void;
	static SetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UObject): void;
	static SetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
	static SetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
	static SetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
	static SetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
	static SetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UnrealEngineClass): void;
	static SetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: boolean): void;
	static GetOwnersBlackboard(NodeOwner: BTNode): BlackboardComponent;
	static GetOwnerComponent(NodeOwner: BTNode): BehaviorTreeComponent;
	static GetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): Vector;
	static GetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
	static GetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector): Rotator;
	static GetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector): UObject;
	static GetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
	static GetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
	static GetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
	static GetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
	static GetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector): UnrealEngineClass;
	static GetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector): boolean;
	static GetBlackboardValueAsActor(NodeOwner: BTNode,Key: BlackboardKeySelector): Actor;
	static ClearBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
	static ClearBlackboardValue(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
	static C(Other: UObject | any): BTFunctionLibrary;
}

declare class BTService_BlackboardBase extends BTService { 
	BlackboardKey: BlackboardKeySelector;
	static Load(ResourceName: string): BTService_BlackboardBase;
	static Find(Outer: UObject, ResourceName: string): BTService_BlackboardBase;
	static GetDefaultObject(): BTService_BlackboardBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_BlackboardBase;
	static C(Other: UObject | any): BTService_BlackboardBase;
}

declare class BTService_BlueprintBase extends BTService { 
	AIOwner: AIController;
	ActorOwner: Actor;
	CustomDescription: string;
	bShowPropertyDetails: boolean;
	bShowEventDetails: boolean;
	static Load(ResourceName: string): BTService_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): BTService_BlueprintBase;
	static GetDefaultObject(): BTService_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_BlueprintBase;
	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
	ReceiveSearchStartAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveSearchStart(OwnerActor: Actor): void;
	ReceiveDeactivationAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveDeactivation(OwnerActor: Actor): void;
	ReceiveActivationAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveActivation(OwnerActor: Actor): void;
	IsServiceActive(): boolean;
	static C(Other: UObject | any): BTService_BlueprintBase;
}

declare class BTService_DefaultFocus extends BTService_BlackboardBase { 
	FocusPriority: number;
	static Load(ResourceName: string): BTService_DefaultFocus;
	static Find(Outer: UObject, ResourceName: string): BTService_DefaultFocus;
	static GetDefaultObject(): BTService_DefaultFocus;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_DefaultFocus;
	static C(Other: UObject | any): BTService_DefaultFocus;
}

declare type EAIParamType = 'Float' | 'Int' | 'Bool' | 'MAX';
declare var EAIParamType : { Float:'Float',Int:'Int',Bool:'Bool',MAX:'MAX', };
declare class AIDynamicParam { 
	ParamName: string;
	ParamType: EAIParamType;
	Value: number;
	BBKey: BlackboardKeySelector;
	clone() : AIDynamicParam;
	static C(Other: UObject | any): AIDynamicParam;
}

declare class EQSParametrizedQueryExecutionRequest { 
	QueryTemplate: EnvQuery;
	QueryConfig: AIDynamicParam[];
	EQSQueryBlackboardKey: BlackboardKeySelector;
	RunMode: EEnvQueryRunMode;
	bUseBBKeyForQueryTemplate: boolean;
	clone() : EQSParametrizedQueryExecutionRequest;
	static C(Other: UObject | any): EQSParametrizedQueryExecutionRequest;
}

declare class BTService_RunEQS extends BTService_BlackboardBase { 
	EQSRequest: EQSParametrizedQueryExecutionRequest;
	bUpdateBBOnFail: boolean;
	static Load(ResourceName: string): BTService_RunEQS;
	static Find(Outer: UObject, ResourceName: string): BTService_RunEQS;
	static GetDefaultObject(): BTService_RunEQS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_RunEQS;
	static C(Other: UObject | any): BTService_RunEQS;
}

declare class BTTask_BlackboardBase extends BTTaskNode { 
	BlackboardKey: BlackboardKeySelector;
	static Load(ResourceName: string): BTTask_BlackboardBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_BlackboardBase;
	static GetDefaultObject(): BTTask_BlackboardBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_BlackboardBase;
	static C(Other: UObject | any): BTTask_BlackboardBase;
}

declare class IntervalCountdown { 
	Interval: number;
	clone() : IntervalCountdown;
	static C(Other: UObject | any): IntervalCountdown;
}

declare class BTTask_BlueprintBase extends BTTaskNode { 
	AIOwner: AIController;
	ActorOwner: Actor;
	TickInterval: IntervalCountdown;
	CustomDescription: string;
	bShowPropertyDetails: boolean;
	static Load(ResourceName: string): BTTask_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_BlueprintBase;
	static GetDefaultObject(): BTTask_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_BlueprintBase;
	SetFinishOnMessageWithId(MessageName: string,RequestID: number): void;
	SetFinishOnMessage(MessageName: string): void;
	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
	ReceiveExecuteAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveExecute(OwnerActor: Actor): void;
	ReceiveAbortAI(OwnerController: AIController,ControlledPawn: Pawn): void;
	ReceiveAbort(OwnerActor: Actor): void;
	IsTaskExecuting(): boolean;
	IsTaskAborting(): boolean;
	FinishExecute(bSuccess: boolean): void;
	FinishAbort(): void;
	static C(Other: UObject | any): BTTask_BlueprintBase;
}

declare class BTTask_FinishWithResult extends BTTaskNode { 
	Result: EBTNodeResult;
	static Load(ResourceName: string): BTTask_FinishWithResult;
	static Find(Outer: UObject, ResourceName: string): BTTask_FinishWithResult;
	static GetDefaultObject(): BTTask_FinishWithResult;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_FinishWithResult;
	static C(Other: UObject | any): BTTask_FinishWithResult;
}

declare class BTTask_GameplayTaskBase extends BTTaskNode { 
	bWaitForGameplayTask: boolean;
	static Load(ResourceName: string): BTTask_GameplayTaskBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_GameplayTaskBase;
	static GetDefaultObject(): BTTask_GameplayTaskBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_GameplayTaskBase;
	static C(Other: UObject | any): BTTask_GameplayTaskBase;
}

declare class BTTask_MakeNoise extends BTTaskNode { 
	Loudnes: number;
	static Load(ResourceName: string): BTTask_MakeNoise;
	static Find(Outer: UObject, ResourceName: string): BTTask_MakeNoise;
	static GetDefaultObject(): BTTask_MakeNoise;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MakeNoise;
	static C(Other: UObject | any): BTTask_MakeNoise;
}

declare class BTTask_MoveTo extends BTTask_BlackboardBase { 
	AcceptableRadius: number;
	FilterClass: UnrealEngineClass;
	ObservedBlackboardValueTolerance: number;
	bObserveBlackboardValue: boolean;
	bAllowStrafe: boolean;
	bAllowPartialPath: boolean;
	bTrackMovingGoal: boolean;
	bProjectGoalLocation: boolean;
	bReachTestIncludesAgentRadius: boolean;
	bReachTestIncludesGoalRadius: boolean;
	bStopOnOverlap: boolean;
	bStopOnOverlapNeedsUpdate: boolean;
	static Load(ResourceName: string): BTTask_MoveTo;
	static Find(Outer: UObject, ResourceName: string): BTTask_MoveTo;
	static GetDefaultObject(): BTTask_MoveTo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MoveTo;
	static C(Other: UObject | any): BTTask_MoveTo;
}

declare class BTTask_MoveDirectlyToward extends BTTask_MoveTo { 
	bDisablePathUpdateOnGoalLocationChange: boolean;
	bProjectVectorGoalToNavigation: boolean;
	bUpdatedDeprecatedProperties: boolean;
	static Load(ResourceName: string): BTTask_MoveDirectlyToward;
	static Find(Outer: UObject, ResourceName: string): BTTask_MoveDirectlyToward;
	static GetDefaultObject(): BTTask_MoveDirectlyToward;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MoveDirectlyToward;
	static C(Other: UObject | any): BTTask_MoveDirectlyToward;
}

declare class BTTask_PawnActionBase extends BTTaskNode { 
	static Load(ResourceName: string): BTTask_PawnActionBase;
	static Find(Outer: UObject, ResourceName: string): BTTask_PawnActionBase;
	static GetDefaultObject(): BTTask_PawnActionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PawnActionBase;
	static C(Other: UObject | any): BTTask_PawnActionBase;
}

declare class BTTask_PlayAnimation extends BTTaskNode { 
	AnimationToPlay: AnimationAsset;
	bLooping: boolean;
	bNonBlocking: boolean;
	MyOwnerComp: BehaviorTreeComponent;
	CachedSkelMesh: SkeletalMeshComponent;
	static Load(ResourceName: string): BTTask_PlayAnimation;
	static Find(Outer: UObject, ResourceName: string): BTTask_PlayAnimation;
	static GetDefaultObject(): BTTask_PlayAnimation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PlayAnimation;
	static C(Other: UObject | any): BTTask_PlayAnimation;
}

declare class BTTask_PlaySound extends BTTaskNode { 
	SoundToPlay: SoundCue;
	static Load(ResourceName: string): BTTask_PlaySound;
	static Find(Outer: UObject, ResourceName: string): BTTask_PlaySound;
	static GetDefaultObject(): BTTask_PlaySound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PlaySound;
	static C(Other: UObject | any): BTTask_PlaySound;
}

declare class BTTask_PushPawnAction extends BTTask_PawnActionBase { 
	Action: PawnAction;
	static Load(ResourceName: string): BTTask_PushPawnAction;
	static Find(Outer: UObject, ResourceName: string): BTTask_PushPawnAction;
	static GetDefaultObject(): BTTask_PushPawnAction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PushPawnAction;
	static C(Other: UObject | any): BTTask_PushPawnAction;
}

declare class BTTask_RotateToFaceBBEntry extends BTTask_BlackboardBase { 
	Precision: number;
	static Load(ResourceName: string): BTTask_RotateToFaceBBEntry;
	static Find(Outer: UObject, ResourceName: string): BTTask_RotateToFaceBBEntry;
	static GetDefaultObject(): BTTask_RotateToFaceBBEntry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RotateToFaceBBEntry;
	static C(Other: UObject | any): BTTask_RotateToFaceBBEntry;
}

declare class BTTask_RunBehavior extends BTTaskNode { 
	BehaviorAsset: BehaviorTree;
	static Load(ResourceName: string): BTTask_RunBehavior;
	static Find(Outer: UObject, ResourceName: string): BTTask_RunBehavior;
	static GetDefaultObject(): BTTask_RunBehavior;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunBehavior;
	static C(Other: UObject | any): BTTask_RunBehavior;
}

declare class BTTask_RunBehaviorDynamic extends BTTaskNode { 
	InjectionTag: GameplayTag;
	DefaultBehaviorAsset: BehaviorTree;
	BehaviorAsset: BehaviorTree;
	static Load(ResourceName: string): BTTask_RunBehaviorDynamic;
	static Find(Outer: UObject, ResourceName: string): BTTask_RunBehaviorDynamic;
	static GetDefaultObject(): BTTask_RunBehaviorDynamic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunBehaviorDynamic;
	static C(Other: UObject | any): BTTask_RunBehaviorDynamic;
}

declare class EnvNamedValue { 
	ParamName: string;
	ParamType: EAIParamType;
	Value: number;
	clone() : EnvNamedValue;
	static C(Other: UObject | any): EnvNamedValue;
}

declare class BTTask_RunEQSQuery extends BTTask_BlackboardBase { 
	QueryTemplate: EnvQuery;
	QueryParams: EnvNamedValue[];
	QueryConfig: AIDynamicParam[];
	RunMode: EEnvQueryRunMode;
	EQSQueryBlackboardKey: BlackboardKeySelector;
	bUseBBKey: boolean;
	EQSRequest: EQSParametrizedQueryExecutionRequest;
	bUpdateBBOnFail: boolean;
	static Load(ResourceName: string): BTTask_RunEQSQuery;
	static Find(Outer: UObject, ResourceName: string): BTTask_RunEQSQuery;
	static GetDefaultObject(): BTTask_RunEQSQuery;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunEQSQuery;
	static C(Other: UObject | any): BTTask_RunEQSQuery;
}

declare class BTTask_SetTagCooldown extends BTTaskNode { 
	CooldownTag: GameplayTag;
	bAddToExistingDuration: boolean;
	CooldownDuration: number;
	static Load(ResourceName: string): BTTask_SetTagCooldown;
	static Find(Outer: UObject, ResourceName: string): BTTask_SetTagCooldown;
	static GetDefaultObject(): BTTask_SetTagCooldown;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_SetTagCooldown;
	static C(Other: UObject | any): BTTask_SetTagCooldown;
}

declare class BTTask_Wait extends BTTaskNode { 
	WaitTime: number;
	RandomDeviation: number;
	static Load(ResourceName: string): BTTask_Wait;
	static Find(Outer: UObject, ResourceName: string): BTTask_Wait;
	static GetDefaultObject(): BTTask_Wait;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_Wait;
	static C(Other: UObject | any): BTTask_Wait;
}

declare class BTTask_WaitBlackboardTime extends BTTask_Wait { 
	BlackboardKey: BlackboardKeySelector;
	static Load(ResourceName: string): BTTask_WaitBlackboardTime;
	static Find(Outer: UObject, ResourceName: string): BTTask_WaitBlackboardTime;
	static GetDefaultObject(): BTTask_WaitBlackboardTime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_WaitBlackboardTime;
	static C(Other: UObject | any): BTTask_WaitBlackboardTime;
}

declare class CrowdAgentInterface extends Interface { 
	static Load(ResourceName: string): CrowdAgentInterface;
	static Find(Outer: UObject, ResourceName: string): CrowdAgentInterface;
	static GetDefaultObject(): CrowdAgentInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdAgentInterface;
	static C(Other: UObject | any): CrowdAgentInterface;
}

declare class CrowdFollowingComponent extends PathFollowingComponent { 
	CrowdAgentMoveDirection: Vector;
	CharacterMovement: CharacterMovementComponent;
	AvoidanceGroup: NavAvoidanceMask;
	GroupsToAvoid: NavAvoidanceMask;
	GroupsToIgnore: NavAvoidanceMask;
	static Load(ResourceName: string): CrowdFollowingComponent;
	static Find(Outer: UObject, ResourceName: string): CrowdFollowingComponent;
	static GetDefaultObject(): CrowdFollowingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdFollowingComponent;
	SuspendCrowdSteering(bSuspend: boolean): void;
	static C(Other: UObject | any): CrowdFollowingComponent;
}

declare class CrowdAvoidanceConfig { 
	VelocityBias: number;
	DesiredVelocityWeight: number;
	CurrentVelocityWeight: number;
	SideBiasWeight: number;
	ImpactTimeWeight: number;
	ImpactTimeRange: number;
	CustomPatternIdx: number;
	AdaptiveDivisions: number;
	AdaptiveRings: number;
	AdaptiveDepth: number;
	clone() : CrowdAvoidanceConfig;
	static C(Other: UObject | any): CrowdAvoidanceConfig;
}

declare class CrowdAvoidanceSamplingPattern { 
	Angles: number[];
	Radii: number[];
	clone() : CrowdAvoidanceSamplingPattern;
	static C(Other: UObject | any): CrowdAvoidanceSamplingPattern;
}

declare class CrowdManager extends CrowdManagerBase { 
	MyNavData: NavigationData;
	AvoidanceConfig: CrowdAvoidanceConfig[];
	SamplingPatterns: CrowdAvoidanceSamplingPattern[];
	MaxAgents: number;
	MaxAgentRadius: number;
	MaxAvoidedAgents: number;
	MaxAvoidedWalls: number;
	NavmeshCheckInterval: number;
	PathOptimizationInterval: number;
	SeparationDirClamp: number;
	PathOffsetRadiusMultiplier: number;
	bResolveCollisions: boolean;
	static Load(ResourceName: string): CrowdManager;
	static Find(Outer: UObject, ResourceName: string): CrowdManager;
	static GetDefaultObject(): CrowdManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdManager;
	static C(Other: UObject | any): CrowdManager;
}

declare class DetourCrowdAIController extends AIController { 
	static GetDefaultObject(): DetourCrowdAIController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DetourCrowdAIController;
	static C(Other: UObject | any): DetourCrowdAIController;
}

declare class EnvQueryContext_BlueprintBase extends EnvQueryContext { 
	static Load(ResourceName: string): EnvQueryContext_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_BlueprintBase;
	static GetDefaultObject(): EnvQueryContext_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_BlueprintBase;
	ProvideSingleLocation(QuerierObject: UObject,QuerierActor: Actor,ResultingLocation?: Vector): {ResultingLocation: Vector};
	ProvideSingleActor(QuerierObject: UObject,QuerierActor: Actor,ResultingActor?: Actor): {ResultingActor: Actor};
	ProvideLocationsSet(QuerierObject: UObject,QuerierActor: Actor,ResultingLocationSet?: Vector[]): {ResultingLocationSet: Vector[]};
	ProvideActorsSet(QuerierObject: UObject,QuerierActor: Actor,ResultingActorsSet?: Actor[]): {ResultingActorsSet: Actor[]};
	static C(Other: UObject | any): EnvQueryContext_BlueprintBase;
}

declare class EnvQueryContext_Item extends EnvQueryContext { 
	static Load(ResourceName: string): EnvQueryContext_Item;
	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_Item;
	static GetDefaultObject(): EnvQueryContext_Item;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_Item;
	static C(Other: UObject | any): EnvQueryContext_Item;
}

declare class EnvQueryContext_Querier extends EnvQueryContext { 
	static Load(ResourceName: string): EnvQueryContext_Querier;
	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_Querier;
	static GetDefaultObject(): EnvQueryContext_Querier;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_Querier;
	static C(Other: UObject | any): EnvQueryContext_Querier;
}

declare class EnvQueryDebugHelpers extends UObject { 
	static Load(ResourceName: string): EnvQueryDebugHelpers;
	static Find(Outer: UObject, ResourceName: string): EnvQueryDebugHelpers;
	static GetDefaultObject(): EnvQueryDebugHelpers;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryDebugHelpers;
	static C(Other: UObject | any): EnvQueryDebugHelpers;
}

declare class EnvQueryGenerator_ActorsOfClass extends EnvQueryGenerator { 
	SearchedActorClass: UnrealEngineClass;
	GenerateOnlyActorsInRadius: AIDataProviderBoolValue;
	SearchRadius: AIDataProviderFloatValue;
	SearchCenter: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryGenerator_ActorsOfClass;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_ActorsOfClass;
	static GetDefaultObject(): EnvQueryGenerator_ActorsOfClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_ActorsOfClass;
	static C(Other: UObject | any): EnvQueryGenerator_ActorsOfClass;
}

declare class EnvQueryGenerator_BlueprintBase extends EnvQueryGenerator { 
	GeneratorsActionDescription: string;
	Context: UnrealEngineClass;
	GeneratedItemType: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryGenerator_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_BlueprintBase;
	static GetDefaultObject(): EnvQueryGenerator_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_BlueprintBase;
	GetQuerier(): UObject;
	DoItemGeneration(ContextLocations: Vector[]): void;
	AddGeneratedVector(GeneratedVector: Vector): void;
	AddGeneratedActor(GeneratedActor: Actor): void;
	static C(Other: UObject | any): EnvQueryGenerator_BlueprintBase;
}

declare class EnvQueryGenerator_Composite extends EnvQueryGenerator { 
	Generators: EnvQueryGenerator[];
	bAllowDifferentItemTypes: boolean;
	bHasMatchingItemType: boolean;
	ForcedItemType: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryGenerator_Composite;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Composite;
	static GetDefaultObject(): EnvQueryGenerator_Composite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Composite;
	static C(Other: UObject | any): EnvQueryGenerator_Composite;
}

declare type EEnvTraceShape = 'Line' | 'Box' | 'Sphere' | 'Capsule' | 'EEnvTraceShape_MAX';
declare var EEnvTraceShape : { Line:'Line',Box:'Box',Sphere:'Sphere',Capsule:'Capsule',EEnvTraceShape_MAX:'EEnvTraceShape_MAX', };
declare type EEnvQueryTrace = 'None' | 'Navigation' | 'GeometryByChannel' | 'GeometryByProfile' | 'NavigationOverLedges' | 'EEnvQueryTrace_MAX';
declare var EEnvQueryTrace : { None:'None',Navigation:'Navigation',GeometryByChannel:'GeometryByChannel',GeometryByProfile:'GeometryByProfile',NavigationOverLedges:'NavigationOverLedges',EEnvQueryTrace_MAX:'EEnvQueryTrace_MAX', };
declare class EnvTraceData { 
	VersionNum: number;
	NavigationFilter: UnrealEngineClass;
	ProjectDown: number;
	ProjectUp: number;
	ExtentX: number;
	ExtentY: number;
	ExtentZ: number;
	PostProjectionVerticalOffset: number;
	TraceChannel: ETraceTypeQuery;
	SerializedChannel: ECollisionChannel;
	TraceProfileName: string;
	TraceShape: EEnvTraceShape;
	TraceMode: EEnvQueryTrace;
	bTraceComplex: boolean;
	bOnlyBlockingHits: boolean;
	bCanTraceOnNavMesh: boolean;
	bCanTraceOnGeometry: boolean;
	bCanDisableTrace: boolean;
	bCanProjectDown: boolean;
	clone() : EnvTraceData;
	static C(Other: UObject | any): EnvTraceData;
}

declare class EnvQueryGenerator_ProjectedPoints extends EnvQueryGenerator { 
	ProjectionData: EnvTraceData;
	static Load(ResourceName: string): EnvQueryGenerator_ProjectedPoints;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_ProjectedPoints;
	static GetDefaultObject(): EnvQueryGenerator_ProjectedPoints;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_ProjectedPoints;
	static C(Other: UObject | any): EnvQueryGenerator_ProjectedPoints;
}

declare class EnvQueryGenerator_Cone extends EnvQueryGenerator_ProjectedPoints { 
	AlignedPointsDistance: AIDataProviderFloatValue;
	ConeDegrees: AIDataProviderFloatValue;
	AngleStep: AIDataProviderFloatValue;
	Range: AIDataProviderFloatValue;
	CenterActor: UnrealEngineClass;
	bIncludeContextLocation: boolean;
	static Load(ResourceName: string): EnvQueryGenerator_Cone;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Cone;
	static GetDefaultObject(): EnvQueryGenerator_Cone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Cone;
	static C(Other: UObject | any): EnvQueryGenerator_Cone;
}

declare class EnvQueryGenerator_CurrentLocation extends EnvQueryGenerator { 
	QueryContext: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryGenerator_CurrentLocation;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_CurrentLocation;
	static GetDefaultObject(): EnvQueryGenerator_CurrentLocation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_CurrentLocation;
	static C(Other: UObject | any): EnvQueryGenerator_CurrentLocation;
}

declare class AIDataProviderIntValue extends AIDataProviderTypedValue { 
	DefaultValue: number;
	clone() : AIDataProviderIntValue;
	static C(Other: UObject | any): AIDataProviderIntValue;
}

declare type EEnvDirection = 'TwoPoints' | 'Rotation' | 'EEnvDirection_MAX';
declare var EEnvDirection : { TwoPoints:'TwoPoints',Rotation:'Rotation',EEnvDirection_MAX:'EEnvDirection_MAX', };
declare class EnvDirection { 
	LineFrom: UnrealEngineClass;
	LineTo: UnrealEngineClass;
	Rotation: UnrealEngineClass;
	DirMode: EEnvDirection;
	clone() : EnvDirection;
	static C(Other: UObject | any): EnvDirection;
}

declare class EnvQueryGenerator_Donut extends EnvQueryGenerator_ProjectedPoints { 
	InnerRadius: AIDataProviderFloatValue;
	OuterRadius: AIDataProviderFloatValue;
	NumberOfRings: AIDataProviderIntValue;
	PointsPerRing: AIDataProviderIntValue;
	ArcDirection: EnvDirection;
	ArcAngle: AIDataProviderFloatValue;
	bUseSpiralPattern: boolean;
	Center: UnrealEngineClass;
	bDefineArc: boolean;
	static Load(ResourceName: string): EnvQueryGenerator_Donut;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Donut;
	static GetDefaultObject(): EnvQueryGenerator_Donut;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Donut;
	static C(Other: UObject | any): EnvQueryGenerator_Donut;
}

declare type EPointOnCircleSpacingMethod = 'BySpaceBetween' | 'ByNumberOfPoints' | 'EPointOnCircleSpacingMethod_MAX';
declare var EPointOnCircleSpacingMethod : { BySpaceBetween:'BySpaceBetween',ByNumberOfPoints:'ByNumberOfPoints',EPointOnCircleSpacingMethod_MAX:'EPointOnCircleSpacingMethod_MAX', };
declare class EnvQueryGenerator_OnCircle extends EnvQueryGenerator_ProjectedPoints { 
	CircleRadius: AIDataProviderFloatValue;
	SpaceBetween: AIDataProviderFloatValue;
	NumberOfPoints: AIDataProviderIntValue;
	PointOnCircleSpacingMethod: EPointOnCircleSpacingMethod;
	ArcDirection: EnvDirection;
	ArcAngle: AIDataProviderFloatValue;
	AngleRadians: number;
	CircleCenter: UnrealEngineClass;
	bIgnoreAnyContextActorsWhenGeneratingCircle: boolean;
	CircleCenterZOffset: AIDataProviderFloatValue;
	TraceData: EnvTraceData;
	bDefineArc: boolean;
	static Load(ResourceName: string): EnvQueryGenerator_OnCircle;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_OnCircle;
	static GetDefaultObject(): EnvQueryGenerator_OnCircle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_OnCircle;
	static C(Other: UObject | any): EnvQueryGenerator_OnCircle;
}

declare class EnvQueryGenerator_SimpleGrid extends EnvQueryGenerator_ProjectedPoints { 
	GridSize: AIDataProviderFloatValue;
	SpaceBetween: AIDataProviderFloatValue;
	GenerateAround: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryGenerator_SimpleGrid;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_SimpleGrid;
	static GetDefaultObject(): EnvQueryGenerator_SimpleGrid;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_SimpleGrid;
	static C(Other: UObject | any): EnvQueryGenerator_SimpleGrid;
}

declare class EnvQueryGenerator_PathingGrid extends EnvQueryGenerator_SimpleGrid { 
	PathToItem: AIDataProviderBoolValue;
	NavigationFilter: UnrealEngineClass;
	ScanRangeMultiplier: AIDataProviderFloatValue;
	static Load(ResourceName: string): EnvQueryGenerator_PathingGrid;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_PathingGrid;
	static GetDefaultObject(): EnvQueryGenerator_PathingGrid;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_PathingGrid;
	static C(Other: UObject | any): EnvQueryGenerator_PathingGrid;
}

declare class EnvQueryGenerator_PerceivedActors extends EnvQueryGenerator { 
	AllowedActorClass: UnrealEngineClass;
	SearchRadius: AIDataProviderFloatValue;
	ListenerContext: UnrealEngineClass;
	SenseToUse: UnrealEngineClass;
	bIncludeKnownActors: boolean;
	static Load(ResourceName: string): EnvQueryGenerator_PerceivedActors;
	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_PerceivedActors;
	static GetDefaultObject(): EnvQueryGenerator_PerceivedActors;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_PerceivedActors;
	static C(Other: UObject | any): EnvQueryGenerator_PerceivedActors;
}

declare class EnvQueryItemType_VectorBase extends EnvQueryItemType { 
	static Load(ResourceName: string): EnvQueryItemType_VectorBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_VectorBase;
	static GetDefaultObject(): EnvQueryItemType_VectorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_VectorBase;
	static C(Other: UObject | any): EnvQueryItemType_VectorBase;
}

declare class EnvQueryItemType_ActorBase extends EnvQueryItemType_VectorBase { 
	static Load(ResourceName: string): EnvQueryItemType_ActorBase;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_ActorBase;
	static GetDefaultObject(): EnvQueryItemType_ActorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_ActorBase;
	static C(Other: UObject | any): EnvQueryItemType_ActorBase;
}

declare class EnvQueryItemType_Actor extends EnvQueryItemType_ActorBase { 
	static Load(ResourceName: string): EnvQueryItemType_Actor;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Actor;
	static GetDefaultObject(): EnvQueryItemType_Actor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Actor;
	static C(Other: UObject | any): EnvQueryItemType_Actor;
}

declare class EnvQueryItemType_Direction extends EnvQueryItemType_VectorBase { 
	static Load(ResourceName: string): EnvQueryItemType_Direction;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Direction;
	static GetDefaultObject(): EnvQueryItemType_Direction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Direction;
	static C(Other: UObject | any): EnvQueryItemType_Direction;
}

declare class EnvQueryItemType_Point extends EnvQueryItemType_VectorBase { 
	static Load(ResourceName: string): EnvQueryItemType_Point;
	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Point;
	static GetDefaultObject(): EnvQueryItemType_Point;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Point;
	static C(Other: UObject | any): EnvQueryItemType_Point;
}

declare type EEnvTestDistance = 'Distance3D' | 'Distance2D' | 'DistanceZ' | 'DistanceAbsoluteZ' | 'EEnvTestDistance_MAX';
declare var EEnvTestDistance : { Distance3D:'Distance3D',Distance2D:'Distance2D',DistanceZ:'DistanceZ',DistanceAbsoluteZ:'DistanceAbsoluteZ',EEnvTestDistance_MAX:'EEnvTestDistance_MAX', };
declare class EnvQueryTest_Distance extends EnvQueryTest { 
	TestMode: EEnvTestDistance;
	DistanceTo: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryTest_Distance;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Distance;
	static GetDefaultObject(): EnvQueryTest_Distance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Distance;
	static C(Other: UObject | any): EnvQueryTest_Distance;
}

declare type EEnvTestDot = 'Dot3D' | 'Dot2D' | 'EEnvTestDot_MAX';
declare var EEnvTestDot : { Dot3D:'Dot3D',Dot2D:'Dot2D',EEnvTestDot_MAX:'EEnvTestDot_MAX', };
declare class EnvQueryTest_Dot extends EnvQueryTest { 
	LineA: EnvDirection;
	LineB: EnvDirection;
	TestMode: EEnvTestDot;
	bAbsoluteValue: boolean;
	static Load(ResourceName: string): EnvQueryTest_Dot;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Dot;
	static GetDefaultObject(): EnvQueryTest_Dot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Dot;
	static C(Other: UObject | any): EnvQueryTest_Dot;
}

declare class EnvQueryTest_GameplayTags extends EnvQueryTest { 
	TagQueryToMatch: GameplayTagQuery;
	bRejectIncompatibleItems: boolean;
	bUpdatedToUseQuery: boolean;
	TagsToMatch: EGameplayContainerMatchType;
	GameplayTags: GameplayTagContainer;
	static Load(ResourceName: string): EnvQueryTest_GameplayTags;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_GameplayTags;
	static GetDefaultObject(): EnvQueryTest_GameplayTags;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_GameplayTags;
	static C(Other: UObject | any): EnvQueryTest_GameplayTags;
}

declare type EEnvOverlapShape = 'Box' | 'Sphere' | 'Capsule' | 'EEnvOverlapShape_MAX';
declare var EEnvOverlapShape : { Box:'Box',Sphere:'Sphere',Capsule:'Capsule',EEnvOverlapShape_MAX:'EEnvOverlapShape_MAX', };
declare class EnvOverlapData { 
	ExtentX: number;
	ExtentY: number;
	ExtentZ: number;
	ShapeOffset: Vector;
	OverlapChannel: ECollisionChannel;
	OverlapShape: EEnvOverlapShape;
	bOnlyBlockingHits: boolean;
	bOverlapComplex: boolean;
	bSkipOverlapQuerier: boolean;
	clone() : EnvOverlapData;
	static C(Other: UObject | any): EnvOverlapData;
}

declare class EnvQueryTest_Overlap extends EnvQueryTest { 
	OverlapData: EnvOverlapData;
	static Load(ResourceName: string): EnvQueryTest_Overlap;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Overlap;
	static GetDefaultObject(): EnvQueryTest_Overlap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Overlap;
	static C(Other: UObject | any): EnvQueryTest_Overlap;
}

declare type EEnvTestPathfinding = 'PathExist' | 'PathCost' | 'PathLength' | 'EEnvTestPathfinding_MAX';
declare var EEnvTestPathfinding : { PathExist:'PathExist',PathCost:'PathCost',PathLength:'PathLength',EEnvTestPathfinding_MAX:'EEnvTestPathfinding_MAX', };
declare class EnvQueryTest_Pathfinding extends EnvQueryTest { 
	TestMode: EEnvTestPathfinding;
	Context: UnrealEngineClass;
	PathFromContext: AIDataProviderBoolValue;
	SkipUnreachable: AIDataProviderBoolValue;
	FilterClass: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryTest_Pathfinding;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Pathfinding;
	static GetDefaultObject(): EnvQueryTest_Pathfinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Pathfinding;
	static C(Other: UObject | any): EnvQueryTest_Pathfinding;
}

declare class EnvQueryTest_PathfindingBatch extends EnvQueryTest_Pathfinding { 
	ScanRangeMultiplier: AIDataProviderFloatValue;
	static Load(ResourceName: string): EnvQueryTest_PathfindingBatch;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_PathfindingBatch;
	static GetDefaultObject(): EnvQueryTest_PathfindingBatch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_PathfindingBatch;
	static C(Other: UObject | any): EnvQueryTest_PathfindingBatch;
}

declare class EnvQueryTest_Project extends EnvQueryTest { 
	ProjectionData: EnvTraceData;
	static Load(ResourceName: string): EnvQueryTest_Project;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Project;
	static GetDefaultObject(): EnvQueryTest_Project;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Project;
	static C(Other: UObject | any): EnvQueryTest_Project;
}

declare class EnvQueryTest_Random extends EnvQueryTest { 
	static Load(ResourceName: string): EnvQueryTest_Random;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Random;
	static GetDefaultObject(): EnvQueryTest_Random;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Random;
	static C(Other: UObject | any): EnvQueryTest_Random;
}

declare class EnvQueryTest_Trace extends EnvQueryTest { 
	TraceData: EnvTraceData;
	TraceFromContext: AIDataProviderBoolValue;
	ItemHeightOffset: AIDataProviderFloatValue;
	ContextHeightOffset: AIDataProviderFloatValue;
	Context: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryTest_Trace;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Trace;
	static GetDefaultObject(): EnvQueryTest_Trace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Trace;
	static C(Other: UObject | any): EnvQueryTest_Trace;
}

declare class EnvQueryTest_Volume extends EnvQueryTest { 
	VolumeContext: UnrealEngineClass;
	VolumeClass: UnrealEngineClass;
	bDoComplexVolumeTest: boolean;
	static Load(ResourceName: string): EnvQueryTest_Volume;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Volume;
	static GetDefaultObject(): EnvQueryTest_Volume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Volume;
	static C(Other: UObject | any): EnvQueryTest_Volume;
}

declare class EnvQueryTypes extends UObject { 
	static Load(ResourceName: string): EnvQueryTypes;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTypes;
	static GetDefaultObject(): EnvQueryTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTypes;
	static C(Other: UObject | any): EnvQueryTypes;
}

declare class EQSQueryResultSourceInterface extends Interface { 
	static Load(ResourceName: string): EQSQueryResultSourceInterface;
	static Find(Outer: UObject, ResourceName: string): EQSQueryResultSourceInterface;
	static GetDefaultObject(): EQSQueryResultSourceInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSQueryResultSourceInterface;
	static C(Other: UObject | any): EQSQueryResultSourceInterface;
}

declare class EQSRenderingComponent extends DebugDrawComponent { 
	static Load(ResourceName: string): EQSRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): EQSRenderingComponent;
	static GetDefaultObject(): EQSRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSRenderingComponent;
	static C(Other: UObject | any): EQSRenderingComponent;
}

declare type EEnvQueryHightlightMode = 'All' | 'Best5Pct' | 'Best25Pct' | 'EEnvQueryHightlightMode_MAX';
declare var EEnvQueryHightlightMode : { All:'All',Best5Pct:'Best5Pct',Best25Pct:'Best25Pct',EEnvQueryHightlightMode_MAX:'EEnvQueryHightlightMode_MAX', };
declare class EQSTestingPawn extends Character { 
	QueryTemplate: EnvQuery;
	QueryParams: EnvNamedValue[];
	QueryConfig: AIDynamicParam[];
	TimeLimitPerStep: number;
	StepToDebugDraw: number;
	HighlightMode: EEnvQueryHightlightMode;
	bDrawLabels: boolean;
	bDrawFailedItems: boolean;
	bReRunQueryOnlyOnFinishedMove: boolean;
	bShouldBeVisibleInGame: boolean;
	bTickDuringGame: boolean;
	QueryingMode: EEnvQueryRunMode;
	NavAgentProperties: NavAgentProperties;
	EdRenderComp: EQSRenderingComponent;
	static GetDefaultObject(): EQSTestingPawn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSTestingPawn;
	static C(Other: UObject | any): EQSTestingPawn;
}

declare class GenericTeamAgentInterface extends Interface { 
	static Load(ResourceName: string): GenericTeamAgentInterface;
	static Find(Outer: UObject, ResourceName: string): GenericTeamAgentInterface;
	static GetDefaultObject(): GenericTeamAgentInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenericTeamAgentInterface;
	static C(Other: UObject | any): GenericTeamAgentInterface;
}

declare class GridPathAIController extends AIController { 
	static GetDefaultObject(): GridPathAIController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridPathAIController;
	static C(Other: UObject | any): GridPathAIController;
}

declare class GridPathFollowingComponent extends PathFollowingComponent { 
	GridManager: NavLocalGridManager;
	static Load(ResourceName: string): GridPathFollowingComponent;
	static Find(Outer: UObject, ResourceName: string): GridPathFollowingComponent;
	static GetDefaultObject(): GridPathFollowingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridPathFollowingComponent;
	static C(Other: UObject | any): GridPathFollowingComponent;
}

declare class NavFilter_AIControllerDefault extends NavigationQueryFilter { 
	static Load(ResourceName: string): NavFilter_AIControllerDefault;
	static Find(Outer: UObject, ResourceName: string): NavFilter_AIControllerDefault;
	static GetDefaultObject(): NavFilter_AIControllerDefault;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavFilter_AIControllerDefault;
	static C(Other: UObject | any): NavFilter_AIControllerDefault;
}

declare class NavLinkProxy extends Actor { 
	PointLinks: NavigationLink[];
	SegmentLinks: NavigationSegmentLink[];
	SmartLinkComp: NavLinkCustomComponent;
	bSmartLinkIsRelevant: boolean;
	EdRenderComp: NavLinkRenderingComponent;
	SpriteComponent: BillboardComponent;
	OnSmartLinkReached: UnrealEngineMulticastDelegate<(MovingActor: Actor, DestinationPoint: Vector) => void>;
	static GetDefaultObject(): NavLinkProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkProxy;
	SetSmartLinkEnabled(bEnabled: boolean): void;
	ResumePathFollowing(Agent: Actor): void;
	ReceiveSmartLinkReached(Agent: Actor,Destination: Vector): void;
	IsSmartLinkEnabled(): boolean;
	HasMovingAgents(): boolean;
	CopyEndPointsFromSimpleLinkToSmartLink(): void;
	static C(Other: UObject | any): NavLinkProxy;
}

declare class PathFollowingManager extends UObject { 
	static Load(ResourceName: string): PathFollowingManager;
	static Find(Outer: UObject, ResourceName: string): PathFollowingManager;
	static GetDefaultObject(): PathFollowingManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PathFollowingManager;
	static C(Other: UObject | any): PathFollowingManager;
}

declare class PawnAction_BlueprintBase extends PawnAction { 
	static Load(ResourceName: string): PawnAction_BlueprintBase;
	static Find(Outer: UObject, ResourceName: string): PawnAction_BlueprintBase;
	static GetDefaultObject(): PawnAction_BlueprintBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_BlueprintBase;
	ActionTick(ControlledPawn: Pawn,DeltaSeconds: number): void;
	ActionStart(ControlledPawn: Pawn): void;
	ActionResume(ControlledPawn: Pawn): void;
	ActionPause(ControlledPawn: Pawn): void;
	ActionFinished(ControlledPawn: Pawn,WithResult: EPawnActionResult): void;
	static C(Other: UObject | any): PawnAction_BlueprintBase;
}

declare class PawnAction_Move extends PawnAction { 
	GoalActor: Actor;
	GoalLocation: Vector;
	AcceptableRadius: number;
	FilterClass: UnrealEngineClass;
	bAllowStrafe: boolean;
	bFinishOnOverlap: boolean;
	bUsePathfinding: boolean;
	bAllowPartialPath: boolean;
	bProjectGoalToNavigation: boolean;
	bUpdatePathToGoal: boolean;
	bAbortChildActionOnPathChange: boolean;
	static Load(ResourceName: string): PawnAction_Move;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Move;
	static GetDefaultObject(): PawnAction_Move;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Move;
	static C(Other: UObject | any): PawnAction_Move;
}

declare type EPawnActionFailHandling = 'RequireSuccess' | 'IgnoreFailure' | 'EPawnActionFailHandling_MAX';
declare var EPawnActionFailHandling : { RequireSuccess:'RequireSuccess',IgnoreFailure:'IgnoreFailure',EPawnActionFailHandling_MAX:'EPawnActionFailHandling_MAX', };
declare class PawnAction_Repeat extends PawnAction { 
	ActionToRepeat: PawnAction;
	RecentActionCopy: PawnAction;
	ChildFailureHandlingMode: EPawnActionFailHandling;
	static Load(ResourceName: string): PawnAction_Repeat;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Repeat;
	static GetDefaultObject(): PawnAction_Repeat;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Repeat;
	static C(Other: UObject | any): PawnAction_Repeat;
}

declare class PawnAction_Sequence extends PawnAction { 
	ActionSequence: PawnAction[];
	ChildFailureHandlingMode: EPawnActionFailHandling;
	RecentActionCopy: PawnAction;
	static Load(ResourceName: string): PawnAction_Sequence;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Sequence;
	static GetDefaultObject(): PawnAction_Sequence;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Sequence;
	static C(Other: UObject | any): PawnAction_Sequence;
}

declare class PawnAction_Wait extends PawnAction { 
	TimeToWait: number;
	static Load(ResourceName: string): PawnAction_Wait;
	static Find(Outer: UObject, ResourceName: string): PawnAction_Wait;
	static GetDefaultObject(): PawnAction_Wait;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Wait;
	static C(Other: UObject | any): PawnAction_Wait;
}

declare class PawnSensingComponent extends ActorComponent { 
	HearingThreshold: number;
	LOSHearingThreshold: number;
	SightRadius: number;
	SensingInterval: number;
	HearingMaxSoundAge: number;
	bEnableSensingUpdates: boolean;
	bOnlySensePlayers: boolean;
	bSeePawns: boolean;
	bHearNoises: boolean;
	OnSeePawn: UnrealEngineMulticastDelegate<(Pawn: Pawn) => void>;
	OnHearNoise: UnrealEngineMulticastDelegate<(Instigator: Pawn, Location: Vector, Volume: number) => void>;
	PeripheralVisionAngle: number;
	PeripheralVisionCosine: number;
	static Load(ResourceName: string): PawnSensingComponent;
	static Find(Outer: UObject, ResourceName: string): PawnSensingComponent;
	static GetDefaultObject(): PawnSensingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnSensingComponent;
	SetSensingUpdatesEnabled(bEnabled: boolean): void;
	SetSensingInterval(NewSensingInterval: number): void;
	SetPeripheralVisionAngle(NewPeripheralVisionAngle: number): void;
	GetPeripheralVisionCosine(): number;
	GetPeripheralVisionAngle(): number;
	static C(Other: UObject | any): PawnSensingComponent;
}

declare class VisualLoggerExtension extends UObject { 
	static Load(ResourceName: string): VisualLoggerExtension;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerExtension;
	static GetDefaultObject(): VisualLoggerExtension;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerExtension;
	static C(Other: UObject | any): VisualLoggerExtension;
}

declare class PropertyConfigFileDisplayRow extends UObject { 
	ConfigFileName: string;
	ExternalProperty: any;
	bIsFileWritable: boolean;
	static Load(ResourceName: string): PropertyConfigFileDisplayRow;
	static Find(Outer: UObject, ResourceName: string): PropertyConfigFileDisplayRow;
	static GetDefaultObject(): PropertyConfigFileDisplayRow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyConfigFileDisplayRow;
	static C(Other: UObject | any): PropertyConfigFileDisplayRow;
}

declare class ConfigHierarchyPropertyView extends UObject { 
	EditProperty: any;
	ConfigFilePropertyObjects: PropertyConfigFileDisplayRow[];
	static Load(ResourceName: string): ConfigHierarchyPropertyView;
	static Find(Outer: UObject, ResourceName: string): ConfigHierarchyPropertyView;
	static GetDefaultObject(): ConfigHierarchyPropertyView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConfigHierarchyPropertyView;
	static C(Other: UObject | any): ConfigHierarchyPropertyView;
}

declare class Manipulator extends Actor { 
	AssociatedComponent: SceneComponent;
	StaticMeshComponent: StaticMeshComponent;
	static GetDefaultObject(): Manipulator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Manipulator;
	static C(Other: UObject | any): Manipulator;
}

declare class PropertyNameAndIndex { 
	Name: string;
	index: number;
	clone() : PropertyNameAndIndex;
	static C(Other: UObject | any): PropertyNameAndIndex;
}

declare class ComponentPropertyPath { 
	ParentOwningActor: any;
	LastResortComponentPtr: any;
	PropertyChain: PropertyNameAndIndex[];
	clone() : ComponentPropertyPath;
	static C(Other: UObject | any): ComponentPropertyPath;
}

declare type ESelectedTangentHandle = 'None' | 'Leave' | 'Arrive' | 'ESelectedTangentHandle_MAX';
declare var ESelectedTangentHandle : { None:'None',Leave:'Leave',Arrive:'Arrive',ESelectedTangentHandle_MAX:'ESelectedTangentHandle_MAX', };
declare class SplineComponentVisualizerSelectionState extends UObject { 
	SplinePropertyPath: ComponentPropertyPath;
	SelectedKeys: any;
	LastKeyIndexSelected: number;
	SelectedSegmentIndex: number;
	SelectedTangentHandle: number;
	SelectedTangentHandleType: ESelectedTangentHandle;
	SelectedSplinePosition: Vector;
	CachedRotation: Quat;
	static Load(ResourceName: string): SplineComponentVisualizerSelectionState;
	static Find(Outer: UObject, ResourceName: string): SplineComponentVisualizerSelectionState;
	static GetDefaultObject(): SplineComponentVisualizerSelectionState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineComponentVisualizerSelectionState;
	static C(Other: UObject | any): SplineComponentVisualizerSelectionState;
}

declare type EShapeAddMode = 'AppendAfter' | 'AppendBefore' | 'InsertAfter' | 'InsertBefore' | 'EShapeAddMode_MAX';
declare var EShapeAddMode : { AppendAfter:'AppendAfter',AppendBefore:'AppendBefore',InsertAfter:'InsertAfter',InsertBefore:'InsertBefore',EShapeAddMode_MAX:'EShapeAddMode_MAX', };
declare class SplineGeneratorBase extends UObject { 
	ShapeAddMode: EShapeAddMode;
	static Load(ResourceName: string): SplineGeneratorBase;
	static Find(Outer: UObject, ResourceName: string): SplineGeneratorBase;
	static GetDefaultObject(): SplineGeneratorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineGeneratorBase;
	static C(Other: UObject | any): SplineGeneratorBase;
}

declare class CircleSplineGenerator extends SplineGeneratorBase { 
	NumberOfPoints: number;
	Radius: number;
	bReverseDir: boolean;
	bKeepFirstKeyTangent: boolean;
	bBranchRight: boolean;
	static Load(ResourceName: string): CircleSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): CircleSplineGenerator;
	static GetDefaultObject(): CircleSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CircleSplineGenerator;
	static C(Other: UObject | any): CircleSplineGenerator;
}

declare class ArcSplineGenerator extends SplineGeneratorBase { 
	NumberOfPoints: number;
	Radius: number;
	Degrees: number;
	bReverseDir: boolean;
	bKeepFirstKeyTangent: boolean;
	bBranchRight: boolean;
	static Load(ResourceName: string): ArcSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): ArcSplineGenerator;
	static GetDefaultObject(): ArcSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ArcSplineGenerator;
	static C(Other: UObject | any): ArcSplineGenerator;
}

declare class SquareSplineGenerator extends SplineGeneratorBase { 
	Length: number;
	bBranchRight: boolean;
	static Load(ResourceName: string): SquareSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): SquareSplineGenerator;
	static GetDefaultObject(): SquareSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SquareSplineGenerator;
	static C(Other: UObject | any): SquareSplineGenerator;
}

declare class EllipseSplineGenerator extends SplineGeneratorBase { 
	NumberOfPoints: number;
	Length: number;
	Width: number;
	bReverseDir: boolean;
	bKeepFirstKeyTangent: boolean;
	bBranchRight: boolean;
	static Load(ResourceName: string): EllipseSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): EllipseSplineGenerator;
	static GetDefaultObject(): EllipseSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EllipseSplineGenerator;
	static C(Other: UObject | any): EllipseSplineGenerator;
}

declare class RectangleSplineGenerator extends SplineGeneratorBase { 
	Length: number;
	Width: number;
	bBranchRight: boolean;
	static Load(ResourceName: string): RectangleSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): RectangleSplineGenerator;
	static GetDefaultObject(): RectangleSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RectangleSplineGenerator;
	static C(Other: UObject | any): RectangleSplineGenerator;
}

declare class LineSplineGenerator extends SplineGeneratorBase { 
	NumberOfPoints: number;
	Length: number;
	bEnableUpToNextPoint: boolean;
	bUpToNextPoint: boolean;
	static Load(ResourceName: string): LineSplineGenerator;
	static Find(Outer: UObject, ResourceName: string): LineSplineGenerator;
	static GetDefaultObject(): LineSplineGenerator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LineSplineGenerator;
	static C(Other: UObject | any): LineSplineGenerator;
}

declare class AnimationModifier extends UObject { 
	RevisionGuid: Guid;
	AppliedGuid: Guid;
	StoredNativeRevision: number;
	PreviouslyAppliedModifier: AnimationModifier;
	static Load(ResourceName: string): AnimationModifier;
	static Find(Outer: UObject, ResourceName: string): AnimationModifier;
	static GetDefaultObject(): AnimationModifier;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationModifier;
	OnRevert(AnimationSequence: AnimSequence): void;
	OnApply(AnimationSequence: AnimSequence): void;
	static C(Other: UObject | any): AnimationModifier;
}

declare class AnimationModifiersAssetUserData extends AssetUserData { 
	AnimationModifierInstances: AnimationModifier[];
	static Load(ResourceName: string): AnimationModifiersAssetUserData;
	static Find(Outer: UObject, ResourceName: string): AnimationModifiersAssetUserData;
	static GetDefaultObject(): AnimationModifiersAssetUserData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationModifiersAssetUserData;
	static C(Other: UObject | any): AnimationModifiersAssetUserData;
}

declare class AnimationModifierSettings extends DeveloperSettings { 
	DefaultAnimationModifiers: UnrealEngineClass[];
	bApplyAnimationModifiersOnImport: boolean;
	static Load(ResourceName: string): AnimationModifierSettings;
	static Find(Outer: UObject, ResourceName: string): AnimationModifierSettings;
	static GetDefaultObject(): AnimationModifierSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationModifierSettings;
	static C(Other: UObject | any): AnimationModifierSettings;
}

declare class ClothingAssetFactoryBase extends UObject { 
	static Load(ResourceName: string): ClothingAssetFactoryBase;
	static Find(Outer: UObject, ResourceName: string): ClothingAssetFactoryBase;
	static GetDefaultObject(): ClothingAssetFactoryBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetFactoryBase;
	static C(Other: UObject | any): ClothingAssetFactoryBase;
}

declare class ClothConfigBase extends UObject { 
	static Load(ResourceName: string): ClothConfigBase;
	static Find(Outer: UObject, ResourceName: string): ClothConfigBase;
	static GetDefaultObject(): ClothConfigBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothConfigBase;
	static C(Other: UObject | any): ClothConfigBase;
}

declare class ClothSharedSimConfigBase extends UObject { 
	static Load(ResourceName: string): ClothSharedSimConfigBase;
	static Find(Outer: UObject, ResourceName: string): ClothSharedSimConfigBase;
	static GetDefaultObject(): ClothSharedSimConfigBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothSharedSimConfigBase;
	static C(Other: UObject | any): ClothSharedSimConfigBase;
}

declare class ClothVertBoneData { 
	NumInfluences: number;
	BoneIndices: any;
	BoneWeights: number;
	clone() : ClothVertBoneData;
	static C(Other: UObject | any): ClothVertBoneData;
}

declare class ClothPhysicalMeshDataBase_Legacy extends UObject { 
	Vertices: Vector3f[];
	Normals: Vector3f[];
	VertexColors: Color[];
	Indices: any[];
	InverseMasses: number[];
	BoneData: ClothVertBoneData[];
	NumFixedVerts: number;
	MaxBoneWeights: number;
	SelfCollisionIndices: any[];
	static Load(ResourceName: string): ClothPhysicalMeshDataBase_Legacy;
	static Find(Outer: UObject, ResourceName: string): ClothPhysicalMeshDataBase_Legacy;
	static GetDefaultObject(): ClothPhysicalMeshDataBase_Legacy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothPhysicalMeshDataBase_Legacy;
	static C(Other: UObject | any): ClothPhysicalMeshDataBase_Legacy;
}

declare class ClothConfigCommon extends ClothConfigBase { 
	static Load(ResourceName: string): ClothConfigCommon;
	static Find(Outer: UObject, ResourceName: string): ClothConfigCommon;
	static GetDefaultObject(): ClothConfigCommon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothConfigCommon;
	static C(Other: UObject | any): ClothConfigCommon;
}

declare class ClothSharedConfigCommon extends ClothConfigCommon { 
	static Load(ResourceName: string): ClothSharedConfigCommon;
	static Find(Outer: UObject, ResourceName: string): ClothSharedConfigCommon;
	static GetDefaultObject(): ClothSharedConfigCommon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothSharedConfigCommon;
	static C(Other: UObject | any): ClothSharedConfigCommon;
}

declare class ClothingAssetCustomData extends UObject { 
	static Load(ResourceName: string): ClothingAssetCustomData;
	static Find(Outer: UObject, ResourceName: string): ClothingAssetCustomData;
	static GetDefaultObject(): ClothingAssetCustomData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetCustomData;
	static C(Other: UObject | any): ClothingAssetCustomData;
}

declare class ClothTetherData { 
	clone() : ClothTetherData;
	static C(Other: UObject | any): ClothTetherData;
}

declare class ClothPhysicalMeshData { 
	Vertices: Vector3f[];
	Normals: Vector3f[];
	VertexColors: Color[];
	Indices: any[];
	WeightMaps: any;
	InverseMasses: number[];
	BoneData: ClothVertBoneData[];
	SelfCollisionIndices: any[];
	EuclideanTethers: ClothTetherData;
	GeodesicTethers: ClothTetherData;
	MaxBoneWeights: number;
	NumFixedVerts: number;
	MaxDistances: number[];
	BackstopDistances: number[];
	BackstopRadiuses: number[];
	AnimDriveMultipliers: number[];
	clone() : ClothPhysicalMeshData;
	static C(Other: UObject | any): ClothPhysicalMeshData;
}

declare class ClothCollisionPrim_Sphere { 
	BoneIndex: number;
	Radius: number;
	LocalPosition: Vector;
	clone() : ClothCollisionPrim_Sphere;
	static C(Other: UObject | any): ClothCollisionPrim_Sphere;
}

declare class ClothCollisionPrim_SphereConnection { 
	SphereIndices: number;
	clone() : ClothCollisionPrim_SphereConnection;
	static C(Other: UObject | any): ClothCollisionPrim_SphereConnection;
}

declare class ClothCollisionPrim_ConvexFace { 
	Plane: Plane;
	Indices: number[];
	clone() : ClothCollisionPrim_ConvexFace;
	static C(Other: UObject | any): ClothCollisionPrim_ConvexFace;
}

declare class ClothCollisionPrim_Convex { 
	planes: Plane[];
	Faces: ClothCollisionPrim_ConvexFace[];
	SurfacePoints: Vector[];
	BoneIndex: number;
	clone() : ClothCollisionPrim_Convex;
	static C(Other: UObject | any): ClothCollisionPrim_Convex;
}

declare class ClothCollisionPrim_Box { 
	LocalPosition: Vector;
	LocalRotation: Quat;
	HalfExtents: Vector;
	BoneIndex: number;
	clone() : ClothCollisionPrim_Box;
	static C(Other: UObject | any): ClothCollisionPrim_Box;
}

declare class ClothCollisionData { 
	Spheres: ClothCollisionPrim_Sphere[];
	SphereConnections: ClothCollisionPrim_SphereConnection[];
	Convexes: ClothCollisionPrim_Convex[];
	Boxes: ClothCollisionPrim_Box[];
	clone() : ClothCollisionData;
	static C(Other: UObject | any): ClothCollisionData;
}

declare class PointWeightMap { 
	Values: number[];
	Name: string;
	CurrentTarget: number;
	bEnabled: boolean;
	clone() : PointWeightMap;
	static C(Other: UObject | any): PointWeightMap;
}

declare class ClothLODDataCommon_Legacy extends UObject { 
	PhysicalMeshData: ClothPhysicalMeshDataBase_Legacy;
	ClothPhysicalMeshData: ClothPhysicalMeshData;
	CollisionData: ClothCollisionData;
	ParameterMasks: PointWeightMap[];
	static Load(ResourceName: string): ClothLODDataCommon_Legacy;
	static Find(Outer: UObject, ResourceName: string): ClothLODDataCommon_Legacy;
	static GetDefaultObject(): ClothLODDataCommon_Legacy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothLODDataCommon_Legacy;
	static C(Other: UObject | any): ClothLODDataCommon_Legacy;
}

declare type EWeightMapTargetCommon = 'None' | 'MaxDistance' | 'BackstopDistance' | 'BackstopRadius' | 'AnimDriveStiffness' | 'AnimDriveDamping_DEPRECATED' | 'EWeightMapTargetCommon_MAX';
declare var EWeightMapTargetCommon : { None:'None',MaxDistance:'MaxDistance',BackstopDistance:'BackstopDistance',BackstopRadius:'BackstopRadius',AnimDriveStiffness:'AnimDriveStiffness',AnimDriveDamping_DEPRECATED:'AnimDriveDamping_DEPRECATED',EWeightMapTargetCommon_MAX:'EWeightMapTargetCommon_MAX', };
declare class ClothParameterMask_Legacy { 
	MaskName: string;
	CurrentTarget: EWeightMapTargetCommon;
	MaxValue: number;
	MinValue: number;
	Values: number[];
	bEnabled: boolean;
	clone() : ClothParameterMask_Legacy;
	static C(Other: UObject | any): ClothParameterMask_Legacy;
}

declare class ClothLODDataCommon { 
	PhysicalMeshData: ClothPhysicalMeshData;
	CollisionData: ClothCollisionData;
	bUseMultipleInfluences: boolean;
	SkinningKernelRadius: number;
	bSmoothTransition: boolean;
	ParameterMasks: ClothParameterMask_Legacy[];
	PointWeightMaps: PointWeightMap[];
	clone() : ClothLODDataCommon;
	static C(Other: UObject | any): ClothLODDataCommon;
}

declare type EClothingWindMethod_Legacy = 'Legacy' | 'Accurate' | 'EClothingWindMethod_MAX';
declare var EClothingWindMethod_Legacy : { Legacy:'Legacy',Accurate:'Accurate',EClothingWindMethod_MAX:'EClothingWindMethod_MAX', };
declare class ClothConstraintSetup_Legacy { 
	Stiffness: number;
	StiffnessMultiplier: number;
	StretchLimit: number;
	CompressionLimit: number;
	clone() : ClothConstraintSetup_Legacy;
	static C(Other: UObject | any): ClothConstraintSetup_Legacy;
}

declare class ClothConfig_Legacy { 
	WindMethod: EClothingWindMethod_Legacy;
	VerticalConstraintConfig: ClothConstraintSetup_Legacy;
	HorizontalConstraintConfig: ClothConstraintSetup_Legacy;
	BendConstraintConfig: ClothConstraintSetup_Legacy;
	ShearConstraintConfig: ClothConstraintSetup_Legacy;
	SelfCollisionRadius: number;
	SelfCollisionStiffness: number;
	SelfCollisionCullScale: number;
	Damping: Vector;
	Friction: number;
	WindDragCoefficient: number;
	WindLiftCoefficient: number;
	LinearDrag: Vector;
	AngularDrag: Vector;
	LinearInertiaScale: Vector;
	AngularInertiaScale: Vector;
	CentrifugalInertiaScale: Vector;
	SolverFrequency: number;
	StiffnessFrequency: number;
	GravityScale: number;
	GravityOverride: Vector;
	bUseGravityOverride: boolean;
	TetherStiffness: number;
	TetherLimit: number;
	CollisionThickness: number;
	AnimDriveSpringStiffness: number;
	AnimDriveDamperStiffness: number;
	clone() : ClothConfig_Legacy;
	static C(Other: UObject | any): ClothConfig_Legacy;
}

declare class ClothingAssetCommon extends ClothingAssetBase { 
	PhysicsAsset: PhysicsAsset;
	ClothConfigs: any;
	ClothSharedSimConfig: ClothConfigBase;
	ClothSimConfig: ClothConfigBase;
	ChaosClothSimConfig: ClothConfigBase;
	ClothLODData: ClothLODDataCommon_Legacy[];
	LODData: ClothLODDataCommon[];
	LodMap: number[];
	UsedBoneNames: string[];
	UsedBoneIndices: number[];
	ReferenceBoneIndex: number;
	CustomData: ClothingAssetCustomData;
	ClothConfig: ClothConfig_Legacy;
	static Load(ResourceName: string): ClothingAssetCommon;
	static Find(Outer: UObject, ResourceName: string): ClothingAssetCommon;
	static GetDefaultObject(): ClothingAssetCommon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetCommon;
	static C(Other: UObject | any): ClothingAssetCommon;
}

declare type EPinnedCommandListType = 'Command' | 'CustomWidget' | 'EPinnedCommandListType_MAX';
declare var EPinnedCommandListType : { Command:'Command',CustomWidget:'CustomWidget',EPinnedCommandListType_MAX:'EPinnedCommandListType_MAX', };
declare class PinnedCommandListCommand { 
	Name: string;
	Binding: string;
	Type: EPinnedCommandListType;
	clone() : PinnedCommandListCommand;
	static C(Other: UObject | any): PinnedCommandListCommand;
}

declare class PinnedCommandListContext { 
	Name: string;
	Commands: PinnedCommandListCommand[];
	clone() : PinnedCommandListContext;
	static C(Other: UObject | any): PinnedCommandListContext;
}

declare class PinnedCommandListSettings extends UObject { 
	Contexts: PinnedCommandListContext[];
	static Load(ResourceName: string): PinnedCommandListSettings;
	static Find(Outer: UObject, ResourceName: string): PinnedCommandListSettings;
	static GetDefaultObject(): PinnedCommandListSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PinnedCommandListSettings;
	static C(Other: UObject | any): PinnedCommandListSettings;
}

declare class AnimationEditorPreviewActor extends Actor { 
	static GetDefaultObject(): AnimationEditorPreviewActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationEditorPreviewActor;
	static C(Other: UObject | any): AnimationEditorPreviewActor;
}

declare class AnimationSequenceBrowserContextMenuContext extends UObject { 
	SelectedObjects: any[];
	static Load(ResourceName: string): AnimationSequenceBrowserContextMenuContext;
	static Find(Outer: UObject, ResourceName: string): AnimationSequenceBrowserContextMenuContext;
	static GetDefaultObject(): AnimationSequenceBrowserContextMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationSequenceBrowserContextMenuContext;
	GetSelectedObjects(): UObject[];
	static C(Other: UObject | any): AnimationSequenceBrowserContextMenuContext;
}

declare class CachedAnalysisProperties extends UObject { 
	static Load(ResourceName: string): CachedAnalysisProperties;
	static Find(Outer: UObject, ResourceName: string): CachedAnalysisProperties;
	static GetDefaultObject(): CachedAnalysisProperties;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CachedAnalysisProperties;
	static C(Other: UObject | any): CachedAnalysisProperties;
}

declare type EAnalysisLinearAxis = 'PlusX' | 'PlusY' | 'PlusZ' | 'MinusX' | 'MinusY' | 'MinusZ' | 'EAnalysisLinearAxis_MAX';
declare var EAnalysisLinearAxis : { PlusX:'PlusX',PlusY:'PlusY',PlusZ:'PlusZ',MinusX:'MinusX',MinusY:'MinusY',MinusZ:'MinusZ',EAnalysisLinearAxis_MAX:'EAnalysisLinearAxis_MAX', };
declare type EAnalysisSpace = 'World' | 'Fixed' | 'Changing' | 'Moving' | 'EAnalysisSpace_MAX';
declare var EAnalysisSpace : { World:'World',Fixed:'Fixed',Changing:'Changing',Moving:'Moving',EAnalysisSpace_MAX:'EAnalysisSpace_MAX', };
declare class LinearAnalysisProperties extends AnalysisProperties { 
	FunctionAxis: EAnalysisLinearAxis;
	BoneSocket: BoneSocketTarget;
	Space: EAnalysisSpace;
	SpaceBoneSocket: BoneSocketTarget;
	StartTimeFraction: number;
	EndTimeFraction: number;
	static Load(ResourceName: string): LinearAnalysisProperties;
	static Find(Outer: UObject, ResourceName: string): LinearAnalysisProperties;
	static GetDefaultObject(): LinearAnalysisProperties;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinearAnalysisProperties;
	static C(Other: UObject | any): LinearAnalysisProperties;
}

declare type EAnalysisEulerAxis = 'Roll' | 'Pitch' | 'Yaw' | 'EAnalysisEulerAxis_MAX';
declare var EAnalysisEulerAxis : { Roll:'Roll',Pitch:'Pitch',Yaw:'Yaw',EAnalysisEulerAxis_MAX:'EAnalysisEulerAxis_MAX', };
declare class EulerAnalysisProperties extends AnalysisProperties { 
	FunctionAxis: EAnalysisEulerAxis;
	BoneSocket: BoneSocketTarget;
	BoneFacingAxis: EAnalysisLinearAxis;
	BoneRightAxis: EAnalysisLinearAxis;
	Space: EAnalysisSpace;
	SpaceBoneSocket: BoneSocketTarget;
	CharacterFacingAxis: EAnalysisLinearAxis;
	CharacterUpAxis: EAnalysisLinearAxis;
	StartTimeFraction: number;
	EndTimeFraction: number;
	static Load(ResourceName: string): EulerAnalysisProperties;
	static Find(Outer: UObject, ResourceName: string): EulerAnalysisProperties;
	static GetDefaultObject(): EulerAnalysisProperties;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EulerAnalysisProperties;
	static C(Other: UObject | any): EulerAnalysisProperties;
}

declare class LODInfoUILayout extends UObject { 
	LODInfo: SkeletalMeshLODInfo;
	static Load(ResourceName: string): LODInfoUILayout;
	static Find(Outer: UObject, ResourceName: string): LODInfoUILayout;
	static GetDefaultObject(): LODInfoUILayout;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LODInfoUILayout;
	static C(Other: UObject | any): LODInfoUILayout;
}

declare class PersonaPreviewSceneController extends UObject { 
	static Load(ResourceName: string): PersonaPreviewSceneController;
	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneController;
	static GetDefaultObject(): PersonaPreviewSceneController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneController;
	static C(Other: UObject | any): PersonaPreviewSceneController;
}

declare class PersonaPreviewSceneAnimationController extends PersonaPreviewSceneController { 
	Animation: AnimationAsset;
	static Load(ResourceName: string): PersonaPreviewSceneAnimationController;
	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneAnimationController;
	static GetDefaultObject(): PersonaPreviewSceneAnimationController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneAnimationController;
	static C(Other: UObject | any): PersonaPreviewSceneAnimationController;
}

declare class PersonaPreviewSceneDefaultController extends PersonaPreviewSceneController { 
	static Load(ResourceName: string): PersonaPreviewSceneDefaultController;
	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneDefaultController;
	static GetDefaultObject(): PersonaPreviewSceneDefaultController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneDefaultController;
	static C(Other: UObject | any): PersonaPreviewSceneDefaultController;
}

declare class PreviewMeshCollectionEntry { 
	SkeletalMesh: SkeletalMesh;
	clone() : PreviewMeshCollectionEntry;
	static C(Other: UObject | any): PreviewMeshCollectionEntry;
}

declare class PreviewMeshCollection extends DataAsset { 
	Skeleton: Skeleton;
	SkeletalMeshes: PreviewMeshCollectionEntry[];
	static Load(ResourceName: string): PreviewMeshCollection;
	static Find(Outer: UObject, ResourceName: string): PreviewMeshCollection;
	static GetDefaultObject(): PreviewMeshCollection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMeshCollection;
	static C(Other: UObject | any): PreviewMeshCollection;
}

declare class PersonaPreviewSceneDescription extends UObject { 
	PreviewController: UnrealEngineClass;
	PreviewControllerInstance: PersonaPreviewSceneController;
	PreviewControllerInstances: PersonaPreviewSceneController[];
	PreviewMesh: SkeletalMesh;
	PreviewAnimationBlueprint: AnimBlueprint;
	ApplicationMethod: EPreviewAnimationBlueprintApplicationMethod;
	LinkedAnimGraphTag: string;
	AdditionalMeshes: DataAsset;
	DefaultAdditionalMeshes: PreviewMeshCollection;
	static Load(ResourceName: string): PersonaPreviewSceneDescription;
	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneDescription;
	static GetDefaultObject(): PersonaPreviewSceneDescription;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneDescription;
	static C(Other: UObject | any): PersonaPreviewSceneDescription;
}

declare class PersonaPreviewSceneRefPoseController extends PersonaPreviewSceneController { 
	bResetBoneTransforms: boolean;
	static Load(ResourceName: string): PersonaPreviewSceneRefPoseController;
	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneRefPoseController;
	static GetDefaultObject(): PersonaPreviewSceneRefPoseController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneRefPoseController;
	static C(Other: UObject | any): PersonaPreviewSceneRefPoseController;
}

declare type EProcessRootMotionMode = 'Ignore' | 'Loop' | 'LoopAndReset' | 'EProcessRootMotionMode_MAX';
declare var EProcessRootMotionMode : { Ignore:'Ignore',Loop:'Loop',LoopAndReset:'LoopAndReset',EProcessRootMotionMode_MAX:'EProcessRootMotionMode_MAX', };
declare class DebugSkelMeshComponent extends SkeletalMeshComponent { 
	bRenderRawSkeleton: boolean;
	bDrawMesh: boolean;
	bShowBoneNames: boolean;
	bDrawBoneInfluences: boolean;
	bDrawMorphTargetVerts: boolean;
	bDrawNormals: boolean;
	bDrawTangents: boolean;
	bDrawBinormals: boolean;
	bDrawSockets: boolean;
	bDrawAttributes: boolean;
	bSkeletonSocketsVisible: boolean;
	bMeshSocketsVisible: boolean;
	bDisplayRawAnimation: boolean;
	bDisplayNonRetargetedPose: boolean;
	bDisplayAdditiveBasePose: boolean;
	bDisplayBakedAnimation: boolean;
	bDisplaySourceAnimation: boolean;
	bDisplayBound: boolean;
	bDisplayVertexColors: boolean;
	WireframeMeshOverlayColor: LinearColor;
	bPreviewRootMotion: boolean;
	ProcessRootMotionMode: EProcessRootMotionMode;
	ConsumeRootMotionPreviousPlaybackTime: number;
	bShowClothData: boolean;
	MinClothPropertyView: number;
	MaxClothPropertyView: number;
	ClothMeshOpacity: number;
	bClothFlipNormal: boolean;
	bClothCullBackface: boolean;
	bRequiredBonesUpToDateDuringTick: boolean;
	BoneRadiusMultiplier: number;
	BonesOfInterest: number[];
	MorphTargetOfInterests: MorphTarget[];
	SkelMaterials: MaterialInterface[];
	PreviewInstance: AnimPreviewInstance;
	SavedAnimScriptInstance: AnimInstance;
	bIsUsingInGameBounds: boolean;
	bIsUsingPreSkinnedBounds: boolean;
	bPerformSingleClothingTick: boolean;
	bPauseClothingSimulationWithAnim: boolean;
	bTrackAttachedInstanceLOD: boolean;
	static Load(ResourceName: string): DebugSkelMeshComponent;
	static Find(Outer: UObject, ResourceName: string): DebugSkelMeshComponent;
	static GetDefaultObject(): DebugSkelMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugSkelMeshComponent;
	static C(Other: UObject | any): DebugSkelMeshComponent;
}

declare class PersonaToolMenuContext extends UObject { 
	static Load(ResourceName: string): PersonaToolMenuContext;
	static Find(Outer: UObject, ResourceName: string): PersonaToolMenuContext;
	static GetDefaultObject(): PersonaToolMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaToolMenuContext;
	GetSkeleton(): Skeleton;
	GetPreviewMeshComponent(): DebugSkelMeshComponent;
	GetMesh(): SkeletalMesh;
	GetAnimBlueprint(): AnimBlueprint;
	GetAnimationAsset(): AnimationAsset;
	static C(Other: UObject | any): PersonaToolMenuContext;
}

declare class SkinWeightImportOptions extends UObject { 
	ProfileName: string;
	FilePath: string;
	LODIndex: number;
	static Load(ResourceName: string): SkinWeightImportOptions;
	static Find(Outer: UObject, ResourceName: string): SkinWeightImportOptions;
	static GetDefaultObject(): SkinWeightImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkinWeightImportOptions;
	static C(Other: UObject | any): SkinWeightImportOptions;
}

declare class BoneProxy extends UObject { 
	BoneName: string;
	Location: Vector;
	Rotation: Rotator;
	Scale: Vector;
	ReferenceLocation: Vector;
	ReferenceRotation: Rotator;
	ReferenceScale: Vector;
	MeshLocation: Vector;
	MeshRotation: Rotator;
	MeshScale: Vector;
	SkelMeshComponent: any;
	static Load(ResourceName: string): BoneProxy;
	static Find(Outer: UObject, ResourceName: string): BoneProxy;
	static GetDefaultObject(): BoneProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoneProxy;
	static C(Other: UObject | any): BoneProxy;
}

declare class RuntimeVirtualTextureFactory extends Factory { 
	static Load(ResourceName: string): RuntimeVirtualTextureFactory;
	static Find(Outer: UObject, ResourceName: string): RuntimeVirtualTextureFactory;
	static GetDefaultObject(): RuntimeVirtualTextureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RuntimeVirtualTextureFactory;
	static C(Other: UObject | any): RuntimeVirtualTextureFactory;
}

declare class ThumbnailRenderer extends UObject { 
	static Load(ResourceName: string): ThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ThumbnailRenderer;
	static GetDefaultObject(): ThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailRenderer;
	static C(Other: UObject | any): ThumbnailRenderer;
}

declare class DefaultSizedThumbnailRenderer extends ThumbnailRenderer { 
	DefaultSizeX: number;
	DefaultSizeY: number;
	static Load(ResourceName: string): DefaultSizedThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): DefaultSizedThumbnailRenderer;
	static GetDefaultObject(): DefaultSizedThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultSizedThumbnailRenderer;
	static C(Other: UObject | any): DefaultSizedThumbnailRenderer;
}

declare class RuntimeVirtualTextureThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): RuntimeVirtualTextureThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): RuntimeVirtualTextureThumbnailRenderer;
	static GetDefaultObject(): RuntimeVirtualTextureThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RuntimeVirtualTextureThumbnailRenderer;
	static C(Other: UObject | any): RuntimeVirtualTextureThumbnailRenderer;
}

declare class VirtualTextureBuilderFactory extends Factory { 
	static Load(ResourceName: string): VirtualTextureBuilderFactory;
	static Find(Outer: UObject, ResourceName: string): VirtualTextureBuilderFactory;
	static GetDefaultObject(): VirtualTextureBuilderFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTextureBuilderFactory;
	static C(Other: UObject | any): VirtualTextureBuilderFactory;
}

declare class TextureThumbnailRenderer extends ThumbnailRenderer { 
	static Load(ResourceName: string): TextureThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): TextureThumbnailRenderer;
	static GetDefaultObject(): TextureThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureThumbnailRenderer;
	static C(Other: UObject | any): TextureThumbnailRenderer;
}

declare class VirtualTextureBuilderThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): VirtualTextureBuilderThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): VirtualTextureBuilderThumbnailRenderer;
	static GetDefaultObject(): VirtualTextureBuilderThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTextureBuilderThumbnailRenderer;
	static C(Other: UObject | any): VirtualTextureBuilderThumbnailRenderer;
}

declare class SplineMetadataDetailsFactoryBase extends UObject { 
	static Load(ResourceName: string): SplineMetadataDetailsFactoryBase;
	static Find(Outer: UObject, ResourceName: string): SplineMetadataDetailsFactoryBase;
	static GetDefaultObject(): SplineMetadataDetailsFactoryBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMetadataDetailsFactoryBase;
	static C(Other: UObject | any): SplineMetadataDetailsFactoryBase;
}

declare class PropertyViewBase extends Widget { 
	UObject: UObject;
	SoftObjectPath: SoftObjectPath;
	bAutoLoadAsset: boolean;
	OnPropertyChanged: UnrealEngineMulticastDelegate<(PropertyName: string) => void>;
	static Load(ResourceName: string): PropertyViewBase;
	static Find(Outer: UObject, ResourceName: string): PropertyViewBase;
	static GetDefaultObject(): PropertyViewBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyViewBase;
	SetObject(NewObject: UObject): void;
	GetObject(): UObject;
	static C(Other: UObject | any): PropertyViewBase;
}

declare class DetailsView extends PropertyViewBase { 
	bAllowFiltering: boolean;
	bAllowFavoriteSystem: boolean;
	bShowModifiedPropertiesOption: boolean;
	bShowKeyablePropertiesOption: boolean;
	bShowAnimatedPropertiesOption: boolean;
	ColumnWidth: number;
	bShowScrollBar: boolean;
	bForceHiddenPropertyVisibility: boolean;
	ViewIdentifier: string;
	CategoriesToShow: string[];
	PropertiesToShow: string[];
	bShowOnlyAllowed: boolean;
	static Load(ResourceName: string): DetailsView;
	static Find(Outer: UObject, ResourceName: string): DetailsView;
	static GetDefaultObject(): DetailsView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DetailsView;
	static C(Other: UObject | any): DetailsView;
}

declare class K2Node_CreateDragDropOperation extends K2Node_ConstructObjectFromClass { 
	static Load(ResourceName: string): K2Node_CreateDragDropOperation;
	static Find(Outer: UObject, ResourceName: string): K2Node_CreateDragDropOperation;
	static GetDefaultObject(): K2Node_CreateDragDropOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateDragDropOperation;
	static C(Other: UObject | any): K2Node_CreateDragDropOperation;
}

declare class K2Node_CreateWidget extends K2Node_ConstructObjectFromClass { 
	static Load(ResourceName: string): K2Node_CreateWidget;
	static Find(Outer: UObject, ResourceName: string): K2Node_CreateWidget;
	static GetDefaultObject(): K2Node_CreateWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateWidget;
	static C(Other: UObject | any): K2Node_CreateWidget;
}

declare class K2Node_PlayAnimation extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_PlayAnimation;
	static Find(Outer: UObject, ResourceName: string): K2Node_PlayAnimation;
	static GetDefaultObject(): K2Node_PlayAnimation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_PlayAnimation;
	static C(Other: UObject | any): K2Node_PlayAnimation;
}

declare class K2Node_PlayAnimationTimeRange extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_PlayAnimationTimeRange;
	static Find(Outer: UObject, ResourceName: string): K2Node_PlayAnimationTimeRange;
	static GetDefaultObject(): K2Node_PlayAnimationTimeRange;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_PlayAnimationTimeRange;
	static C(Other: UObject | any): K2Node_PlayAnimationTimeRange;
}

declare class BaseWidgetBlueprint extends UserWidgetBlueprint { 
	WidgetTree: WidgetTree;
	static Load(ResourceName: string): BaseWidgetBlueprint;
	static Find(Outer: UObject, ResourceName: string): BaseWidgetBlueprint;
	static GetDefaultObject(): BaseWidgetBlueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseWidgetBlueprint;
	static C(Other: UObject | any): BaseWidgetBlueprint;
}

declare class EditorPropertyPathSegment { 
	struct: Struct;
	MemberName: string;
	MemberGuid: Guid;
	IsProperty: boolean;
	clone() : EditorPropertyPathSegment;
	static C(Other: UObject | any): EditorPropertyPathSegment;
}

declare class EditorPropertyPath { 
	Segments: EditorPropertyPathSegment[];
	clone() : EditorPropertyPath;
	static C(Other: UObject | any): EditorPropertyPath;
}

declare class DelegateEditorBinding { 
	ObjectName: string;
	PropertyName: string;
	FunctionName: string;
	SourceProperty: string;
	SourcePath: EditorPropertyPath;
	MemberGuid: Guid;
	Kind: EBindingKind;
	clone() : DelegateEditorBinding;
	static C(Other: UObject | any): DelegateEditorBinding;
}

declare class WidgetAnimation_DEPRECATED { 
	MovieScene: MovieScene;
	AnimationBindings: WidgetAnimationBinding[];
	clone() : WidgetAnimation_DEPRECATED;
	static C(Other: UObject | any): WidgetAnimation_DEPRECATED;
}

declare type EWidgetCompileTimeTickPrediction = 'WontTick' | 'OnDemand' | 'WillTick' | 'EWidgetCompileTimeTickPrediction_MAX';
declare var EWidgetCompileTimeTickPrediction : { WontTick:'WontTick',OnDemand:'OnDemand',WillTick:'WillTick',EWidgetCompileTimeTickPrediction_MAX:'EWidgetCompileTimeTickPrediction_MAX', };
declare type EThumbnailPreviewSizeMode = 'MatchDesignerMode' | 'FillScreen' | 'Custom' | 'Desired' | 'EThumbnailPreviewSizeMode_MAX';
declare var EThumbnailPreviewSizeMode : { MatchDesignerMode:'MatchDesignerMode',FillScreen:'FillScreen',Custom:'Custom',Desired:'Desired',EThumbnailPreviewSizeMode_MAX:'EThumbnailPreviewSizeMode_MAX', };
declare class WidgetBlueprint extends BaseWidgetBlueprint { 
	Bindings: DelegateEditorBinding[];
	AnimationData: WidgetAnimation_DEPRECATED[];
	Animations: WidgetAnimation[];
	PaletteCategory: string;
	TickFrequency: EWidgetTickFrequency;
	TickPrediction: EWidgetCompileTimeTickPrediction;
	TickPredictionReason: string;
	PropertyBindings: number;
	ThumbnailSizeMode: EThumbnailPreviewSizeMode;
	ThumbnailCustomSize: Vector2D;
	ThumbnailImage: Texture2D;
	static Load(ResourceName: string): WidgetBlueprint;
	static Find(Outer: UObject, ResourceName: string): WidgetBlueprint;
	static GetDefaultObject(): WidgetBlueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprint;
	static C(Other: UObject | any): WidgetBlueprint;
}

declare class K2Node_WidgetAnimationEvent extends K2Node_Event { 
	Action: EWidgetAnimationEvent;
	AnimationPropertyName: string;
	UserTag: string;
	SourceWidgetBlueprint: WidgetBlueprint;
	static Load(ResourceName: string): K2Node_WidgetAnimationEvent;
	static Find(Outer: UObject, ResourceName: string): K2Node_WidgetAnimationEvent;
	static GetDefaultObject(): K2Node_WidgetAnimationEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_WidgetAnimationEvent;
	static C(Other: UObject | any): K2Node_WidgetAnimationEvent;
}

declare class SinglePropertyView extends PropertyViewBase { 
	PropertyName: string;
	NameOverride: string;
	static Load(ResourceName: string): SinglePropertyView;
	static Find(Outer: UObject, ResourceName: string): SinglePropertyView;
	static GetDefaultObject(): SinglePropertyView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SinglePropertyView;
	SetPropertyName(NewPropertyName: string): void;
	SetNameOverride(NewPropertyName: string): void;
	GetPropertyName(): string;
	GetNameOverride(): string;
	static C(Other: UObject | any): SinglePropertyView;
}

declare class SlateVectorArtDataFactory extends Factory { 
	static Load(ResourceName: string): SlateVectorArtDataFactory;
	static Find(Outer: UObject, ResourceName: string): SlateVectorArtDataFactory;
	static GetDefaultObject(): SlateVectorArtDataFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateVectorArtDataFactory;
	static C(Other: UObject | any): SlateVectorArtDataFactory;
}

declare type EPropertyBindingPermissionLevel = 'Allow' | 'Prevent' | 'PreventAndWarn' | 'PreventAndError' | 'EPropertyBindingPermissionLevel_MAX';
declare var EPropertyBindingPermissionLevel : { Allow:'Allow',Prevent:'Prevent',PreventAndWarn:'PreventAndWarn',PreventAndError:'PreventAndError',EPropertyBindingPermissionLevel_MAX:'EPropertyBindingPermissionLevel_MAX', };
declare class WidgetCompilerOptions { 
	bAllowBlueprintTick: boolean;
	bAllowBlueprintPaint: boolean;
	PropertyBindingRule: EPropertyBindingPermissionLevel;
	Rules: Class[];
	clone() : WidgetCompilerOptions;
	static C(Other: UObject | any): WidgetCompilerOptions;
}

declare class DirectoryWidgetCompilerOptions { 
	Directory: DirectoryPath;
	IgnoredWidgets: WidgetBlueprint[];
	Options: WidgetCompilerOptions;
	clone() : DirectoryWidgetCompilerOptions;
	static C(Other: UObject | any): DirectoryWidgetCompilerOptions;
}

declare class DebugResolution { 
	Width: number;
	Height: number;
	Description: string;
	Color: LinearColor;
	clone() : DebugResolution;
	static C(Other: UObject | any): DebugResolution;
}

declare class UMGEditorProjectSettings extends DeveloperSettings { 
	DefaultCompilerOptions: WidgetCompilerOptions;
	DirectoryCompilerOptions: DirectoryWidgetCompilerOptions[];
	bShowWidgetsFromEngineContent: boolean;
	bShowWidgetsFromDeveloperContent: boolean;
	CategoriesToHide: string[];
	WidgetClassesToHide: SoftClassPath[];
	bUseWidgetTemplateSelector: boolean;
	DefaultRootWidget: UnrealEngineClass;
	DefaultWidgetParentClass: Class;
	DebugResolutions: DebugResolution[];
	Version: number;
	static Load(ResourceName: string): UMGEditorProjectSettings;
	static Find(Outer: UObject, ResourceName: string): UMGEditorProjectSettings;
	static GetDefaultObject(): UMGEditorProjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UMGEditorProjectSettings;
	static C(Other: UObject | any): UMGEditorProjectSettings;
}

declare class WidgetBlueprintFactory extends Factory { 
	BlueprintType: EBlueprintType;
	ParentClass: UnrealEngineClass;
	RootWidgetClass: UnrealEngineClass;
	static Load(ResourceName: string): WidgetBlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): WidgetBlueprintFactory;
	static GetDefaultObject(): WidgetBlueprintFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprintFactory;
	static C(Other: UObject | any): WidgetBlueprintFactory;
}

declare class WidgetBlueprintThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): WidgetBlueprintThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): WidgetBlueprintThumbnailRenderer;
	static GetDefaultObject(): WidgetBlueprintThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprintThumbnailRenderer;
	static C(Other: UObject | any): WidgetBlueprintThumbnailRenderer;
}

declare class WidgetCompilerRule extends UObject { 
	static Load(ResourceName: string): WidgetCompilerRule;
	static Find(Outer: UObject, ResourceName: string): WidgetCompilerRule;
	static GetDefaultObject(): WidgetCompilerRule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetCompilerRule;
	static C(Other: UObject | any): WidgetCompilerRule;
}

declare type EDisplayOnCompile = 'DoC_ErrorsOrWarnings' | 'DoC_ErrorsOnly' | 'DoC_WarningsOnly' | 'DoC_Never' | 'DoC_MAX';
declare var EDisplayOnCompile : { DoC_ErrorsOrWarnings:'DoC_ErrorsOrWarnings',DoC_ErrorsOnly:'DoC_ErrorsOnly',DoC_WarningsOnly:'DoC_WarningsOnly',DoC_Never:'DoC_Never',DoC_MAX:'DoC_MAX', };
declare class WidgetPaletteFavorites extends UObject { 
	Favorites: string[];
	static Load(ResourceName: string): WidgetPaletteFavorites;
	static Find(Outer: UObject, ResourceName: string): WidgetPaletteFavorites;
	static GetDefaultObject(): WidgetPaletteFavorites;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetPaletteFavorites;
	static C(Other: UObject | any): WidgetPaletteFavorites;
}

declare class WidgetDesignerSettings extends DeveloperSettings { 
	GridSnapEnabled: boolean;
	GridSnapSize: number;
	bLockToPanelOnDragByDefault: boolean;
	bShowOutlines: boolean;
	bExecutePreConstructEvent: boolean;
	bRespectLocks: boolean;
	CreateOnCompile: EDisplayOnCompile;
	DismissOnCompile: EDisplayOnCompile;
	Favorites: WidgetPaletteFavorites;
	static Load(ResourceName: string): WidgetDesignerSettings;
	static Find(Outer: UObject, ResourceName: string): WidgetDesignerSettings;
	static GetDefaultObject(): WidgetDesignerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetDesignerSettings;
	static C(Other: UObject | any): WidgetDesignerSettings;
}

declare class WidgetGraphSchema extends EdGraphSchema_K2 { 
	static Load(ResourceName: string): WidgetGraphSchema;
	static Find(Outer: UObject, ResourceName: string): WidgetGraphSchema;
	static GetDefaultObject(): WidgetGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetGraphSchema;
	static C(Other: UObject | any): WidgetGraphSchema;
}

declare class WidgetSlotPair extends UObject { 
	widgetname: string;
	SlotPropertyNames: string[];
	SlotPropertyValues: string[];
	static Load(ResourceName: string): WidgetSlotPair;
	static Find(Outer: UObject, ResourceName: string): WidgetSlotPair;
	static GetDefaultObject(): WidgetSlotPair;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetSlotPair;
	static C(Other: UObject | any): WidgetSlotPair;
}

declare class BlueprintCompilerExtension extends UObject { 
	static Load(ResourceName: string): BlueprintCompilerExtension;
	static Find(Outer: UObject, ResourceName: string): BlueprintCompilerExtension;
	static GetDefaultObject(): BlueprintCompilerExtension;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintCompilerExtension;
	static C(Other: UObject | any): BlueprintCompilerExtension;
}

declare class BlueprintEditorToolMenuContext extends UObject { 
	static Load(ResourceName: string): BlueprintEditorToolMenuContext;
	static Find(Outer: UObject, ResourceName: string): BlueprintEditorToolMenuContext;
	static GetDefaultObject(): BlueprintEditorToolMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintEditorToolMenuContext;
	GetBlueprintObj(): Blueprint;
	static C(Other: UObject | any): BlueprintEditorToolMenuContext;
}

declare class FavoritedBlueprintPaletteItem { 
	clone() : FavoritedBlueprintPaletteItem;
	static C(Other: UObject | any): FavoritedBlueprintPaletteItem;
}

declare class BlueprintPaletteFavorites extends UObject { 
	CustomFavorites: string[];
	CurrentFavorites: FavoritedBlueprintPaletteItem[];
	CurrentProfile: string;
	static Load(ResourceName: string): BlueprintPaletteFavorites;
	static Find(Outer: UObject, ResourceName: string): BlueprintPaletteFavorites;
	static GetDefaultObject(): BlueprintPaletteFavorites;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPaletteFavorites;
	static C(Other: UObject | any): BlueprintPaletteFavorites;
}

declare class SCSEditorExtensionContext extends UObject { 
	static Load(ResourceName: string): SCSEditorExtensionContext;
	static Find(Outer: UObject, ResourceName: string): SCSEditorExtensionContext;
	static GetDefaultObject(): SCSEditorExtensionContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SCSEditorExtensionContext;
	static C(Other: UObject | any): SCSEditorExtensionContext;
}

declare class SSCSEditorMenuContext extends UObject { 
	static Load(ResourceName: string): SSCSEditorMenuContext;
	static Find(Outer: UObject, ResourceName: string): SSCSEditorMenuContext;
	static GetDefaultObject(): SSCSEditorMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SSCSEditorMenuContext;
	static C(Other: UObject | any): SSCSEditorMenuContext;
}

declare class SubobjectEditorExtensionContext extends UObject { 
	static Load(ResourceName: string): SubobjectEditorExtensionContext;
	static Find(Outer: UObject, ResourceName: string): SubobjectEditorExtensionContext;
	static GetDefaultObject(): SubobjectEditorExtensionContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubobjectEditorExtensionContext;
	static C(Other: UObject | any): SubobjectEditorExtensionContext;
}

declare class AnimationBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AnimationBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): AnimationBlueprintLibrary;
	static GetDefaultObject(): AnimationBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationBlueprintLibrary;
	static SetRootMotionLockType(AnimationSequence: AnimSequence,RootMotionLockType: ERootMotionRootLock): void;
	static SetRootMotionEnabled(AnimationSequence: AnimSequence,bEnabled: boolean): void;
	static SetRateScale(AnimationSequenceBase: AnimSequenceBase,RateScale: number): void;
	static SetIsRootMotionLockForced(AnimationSequence: AnimSequence,bForced: boolean): void;
	static SetCurveCompressionSettings(AnimationSequence: AnimSequence,CompressionSettings: AnimCurveCompressionSettings): void;
	static SetBoneCompressionSettings(AnimationSequence: AnimSequence,CompressionSettings: AnimBoneCompressionSettings): void;
	static SetAnimationInterpolationType(AnimationSequence: AnimSequence,InterpolationType: EAnimInterpolationType): void;
	static SetAdditiveBasePoseType(AnimationSequence: AnimSequence,AdditiveBasePoseType: EAdditiveBasePoseType): void;
	static SetAdditiveAnimationType(AnimationSequence: AnimSequence,AdditiveAnimationType: EAdditiveAnimationType): void;
	static RemoveVirtualBones(AnimationSequence: AnimSequence,VirtualBoneNames: string[]): void;
	static RemoveVirtualBone(AnimationSequence: AnimSequence,VirtualBoneName: string): void;
	static RemoveMetaDataOfClass(AnimationAsset: AnimationAsset,MetaDataClass: UnrealEngineClass): void;
	static RemoveMetaData(AnimationAsset: AnimationAsset,MetaDataObject: AnimMetaData): void;
	static RemoveCurve(AnimationSequence: AnimSequence,CurveName: string,bRemoveNameFromSkeleton: boolean): void;
	static RemoveBoneAnimation(AnimationSequence: AnimSequence,BoneName: string,bIncludeChildren: boolean,bFinalize: boolean): void;
	static RemoveAnimationSyncMarkersByTrack(AnimationSequence: AnimSequence,NotifyTrackName: string): number;
	static RemoveAnimationSyncMarkersByName(AnimationSequence: AnimSequence,MarkerName: string): number;
	static RemoveAnimationNotifyTrack(AnimationSequenceBase: AnimSequenceBase,NotifyTrackName: string): void;
	static RemoveAnimationNotifyEventsByTrack(AnimationSequenceBase: AnimSequenceBase,NotifyTrackName: string): number;
	static RemoveAnimationNotifyEventsByName(AnimationSequenceBase: AnimSequenceBase,NotifyName: string): number;
	static RemoveAllVirtualBones(AnimationSequence: AnimSequence): void;
	static RemoveAllMetaData(AnimationAsset: AnimationAsset): void;
	static RemoveAllCurveData(AnimationSequence: AnimSequence): void;
	static RemoveAllBoneAnimation(AnimationSequence: AnimSequence): void;
	static RemoveAllAnimationSyncMarkers(AnimationSequence: AnimSequence): void;
	static RemoveAllAnimationNotifyTracks(AnimationSequenceBase: AnimSequenceBase): void;
	static IsValidTime(AnimationSequenceBase: AnimSequenceBase,Time: number,IsValid?: boolean): {IsValid: boolean};
	static IsValidRawAnimationTrackName(AnimationSequenceBase: AnimSequenceBase,TrackName: string): boolean;
	static IsValidAnimNotifyTrackName(AnimationSequenceBase: AnimSequenceBase,NotifyTrackName: string): boolean;
	static IsValidAnimationSyncMarkerName(AnimationSequence: AnimSequence,MarkerName: string): boolean;
	static IsRootMotionLockForced(AnimationSequence: AnimSequence): boolean;
	static IsRootMotionEnabled(AnimationSequence: AnimSequence): boolean;
	static GetVectorKeys(AnimationSequence: AnimSequence,CurveName: string,Times?: number[],Values?: Vector[]): {Times: number[], Values: Vector[]};
	static GetUniqueMarkerNames(AnimationSequence: AnimSequence,MarkerNames?: string[]): {MarkerNames: string[]};
	static GetTransformationKeys(AnimationSequence: AnimSequence,CurveName: string,Times?: number[],Values?: Transform[]): {Times: number[], Values: Transform[]};
	static GetTimeAtFrame(AnimationSequenceBase: AnimSequenceBase,Frame: number,Time?: number): {Time: number};
	static GetSequenceLength(AnimationSequenceBase: AnimSequenceBase,Length?: number): {Length: number};
	static GetRootMotionLockType(AnimationSequence: AnimSequence,LockType?: ERootMotionRootLock): {LockType: ERootMotionRootLock};
	static GetRawTrackScaleData(AnimationSequenceBase: AnimSequenceBase,TrackName: string,ScaleData?: Vector[]): {ScaleData: Vector[]};
	static GetRawTrackRotationData(AnimationSequenceBase: AnimSequenceBase,TrackName: string,RotationData?: Quat[]): {RotationData: Quat[]};
	static GetRawTrackPositionData(AnimationSequenceBase: AnimSequenceBase,TrackName: string,PositionData?: Vector[]): {PositionData: Vector[]};
	static GetRawTrackData(AnimationSequenceBase: AnimSequenceBase,TrackName: string,PositionKeys?: Vector[],RotationKeys?: Quat[],ScalingKeys?: Vector[]): {PositionKeys: Vector[], RotationKeys: Quat[], ScalingKeys: Vector[]};
	static GetRateScale(AnimationSequenceBase: AnimSequenceBase,RateScale?: number): {RateScale: number};
	static GetNumKeys(AnimationSequenceBase: AnimSequenceBase,NumKeys?: number): {NumKeys: number};
	static GetNumFrames(AnimationSequenceBase: AnimSequenceBase,NumFrames?: number): {NumFrames: number};
	static GetNodesOfClass(AnimationBlueprint: AnimBlueprint,NodeClass: UnrealEngineClass,GraphNodes?: AnimGraphNode_Base[],bIncludeChildClasses?: boolean): {GraphNodes: AnimGraphNode_Base[]};
	static GetMetaDataOfClass(AnimationAsset: AnimationAsset,MetaDataClass: UnrealEngineClass,MetaDataOfClass?: AnimMetaData[]): {MetaDataOfClass: AnimMetaData[]};
	static GetMetaData(AnimationAsset: AnimationAsset,MetaData?: AnimMetaData[]): {MetaData: AnimMetaData[]};
	static GetFrameAtTime(AnimationSequenceBase: AnimSequenceBase,Time: number,Frame?: number): {Frame: number};
	static GetFloatKeys(AnimationSequence: AnimSequence,CurveName: string,Times?: number[],Values?: number[]): {Times: number[], Values: number[]};
	static GetCurveCompressionSettings(AnimationSequence: AnimSequence,CompressionSettings?: AnimCurveCompressionSettings): {CompressionSettings: AnimCurveCompressionSettings};
	static GetBonePosesForTime(AnimationSequenceBase: AnimSequenceBase,BoneNames: string[],Time: number,bExtractRootMotion: boolean,Poses?: Transform[],PreviewMesh?: SkeletalMesh): {Poses: Transform[]};
	static GetBonePosesForFrame(AnimationSequenceBase: AnimSequenceBase,BoneNames: string[],Frame: number,bExtractRootMotion: boolean,Poses?: Transform[],PreviewMesh?: SkeletalMesh): {Poses: Transform[]};
	static GetBonePoseForTime(AnimationSequenceBase: AnimSequenceBase,BoneName: string,Time: number,bExtractRootMotion: boolean,Pose?: Transform): {Pose: Transform};
	static GetBonePoseForFrame(AnimationSequenceBase: AnimSequenceBase,BoneName: string,Frame: number,bExtractRootMotion: boolean,Pose?: Transform): {Pose: Transform};
	static GetBoneCompressionSettings(AnimationSequence: AnimSequence,CompressionSettings?: AnimBoneCompressionSettings): {CompressionSettings: AnimBoneCompressionSettings};
	static GetAnimNotifyEventTriggerTime(NotifyEvent: AnimNotifyEvent): number;
	static GetAnimNotifyEventDuration(NotifyEvent: AnimNotifyEvent): number;
	static GetAnimationTrackNames(AnimationSequenceBase: AnimSequenceBase,TrackNames?: string[]): {TrackNames: string[]};
	static GetAnimationSyncMarkersForTrack(AnimationSequence: AnimSequence,NotifyTrackName: string,Markers?: AnimSyncMarker[]): {Markers: AnimSyncMarker[]};
	static GetAnimationSyncMarkers(AnimationSequence: AnimSequence,Markers?: AnimSyncMarker[]): {Markers: AnimSyncMarker[]};
	static GetAnimationNotifyTrackNames(AnimationSequenceBase: AnimSequenceBase,TrackNames?: string[]): {TrackNames: string[]};
	static GetAnimationNotifyEventsForTrack(AnimationSequenceBase: AnimSequenceBase,NotifyTrackName: string,Events?: AnimNotifyEvent[]): {Events: AnimNotifyEvent[]};
	static GetAnimationNotifyEvents(AnimationSequenceBase: AnimSequenceBase,NotifyEvents?: AnimNotifyEvent[]): {NotifyEvents: AnimNotifyEvent[]};
	static GetAnimationNotifyEventNames(AnimationSequenceBase: AnimSequenceBase,EventNames?: string[]): {EventNames: string[]};
	static GetAnimationInterpolationType(AnimationSequence: AnimSequence,InterpolationType?: EAnimInterpolationType): {InterpolationType: EAnimInterpolationType};
	static GetAnimationGraphs(AnimationBlueprint: AnimBlueprint,AnimationGraphs?: AnimationGraph[]): {AnimationGraphs: AnimationGraph[]};
	static GetAnimationCurveNames(AnimationSequence: AnimSequence,CurveType: ERawCurveTrackTypes,CurveNames?: string[]): {CurveNames: string[]};
	static GetAdditiveBasePoseType(AnimationSequence: AnimSequence,AdditiveBasePoseType?: EAdditiveBasePoseType): {AdditiveBasePoseType: EAdditiveBasePoseType};
	static GetAdditiveAnimationType(AnimationSequence: AnimSequence,AdditiveAnimationType?: EAdditiveAnimationType): {AdditiveAnimationType: EAdditiveAnimationType};
	static FindBonePathToRoot(AnimationSequenceBase: AnimSequenceBase,BoneName: string,BonePath?: string[]): {BonePath: string[]};
	static FinalizeBoneAnimation(AnimationSequence: AnimSequence): void;
	static EvaluateRootBoneTimecodeAttributesAtTime(AnimationSequenceBase: AnimSequenceBase,EvalTime: number,OutQualifiedFrameTime?: QualifiedFrameTime): {OutQualifiedFrameTime: QualifiedFrameTime, $: boolean};
	static DoesCurveExist(AnimationSequence: AnimSequence,CurveName: string,CurveType: ERawCurveTrackTypes): boolean;
	static DoesBoneNameExist(AnimationSequence: AnimSequence,BoneName: string,bExists?: boolean): {bExists: boolean};
	static CopyAnimNotifiesFromSequence(SourceAnimationSequenceBase: AnimSequenceBase,DestinationAnimationSequenceBase: AnimSequenceBase,bDeleteExistingNotifies: boolean): void;
	static CopyAnimationCurveNamesToSkeleton(OldSkeleton: Skeleton,NewSkeleton: Skeleton,SequenceBase: AnimSequenceBase,CurveType: ERawCurveTrackTypes): void;
	static ContainsMetaDataOfClass(AnimationAsset: AnimationAsset,MetaDataClass: UnrealEngineClass): boolean;
	static AddVirtualBone(AnimationSequence: AnimSequence,SourceBoneName: string,TargetBoneName: string,VirtualBoneName?: string): {VirtualBoneName: string};
	static AddVectorCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Vectors: Vector[]): void;
	static AddVectorCurveKey(AnimationSequence: AnimSequence,CurveName: string,Time: number,Vector: Vector): void;
	static AddTransformationCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Transforms: Transform[]): void;
	static AddTransformationCurveKey(AnimationSequence: AnimSequence,CurveName: string,Time: number,Transform: Transform): void;
	static AddMetaDataObject(AnimationAsset: AnimationAsset,MetaDataObject: AnimMetaData): void;
	static AddMetaData(AnimationAsset: AnimationAsset,MetaDataClass: UnrealEngineClass,MetaDataInstance?: AnimMetaData): {MetaDataInstance: AnimMetaData};
	static AddFloatCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Values: number[]): void;
	static AddFloatCurveKey(AnimationSequence: AnimSequence,CurveName: string,Time: number,Value: number): void;
	static AddCurve(AnimationSequence: AnimSequence,CurveName: string,CurveType: ERawCurveTrackTypes,bMetaDataCurve: boolean): void;
	static AddAnimationSyncMarker(AnimationSequence: AnimSequence,MarkerName: string,Time: number,NotifyTrackName: string): void;
	static AddAnimationNotifyTrack(AnimationSequenceBase: AnimSequenceBase,NotifyTrackName: string,TrackColor: LinearColor): void;
	static AddAnimationNotifyStateEventObject(AnimationSequenceBase: AnimSequenceBase,StartTime: number,Duration: number,NotifyState: AnimNotifyState,NotifyTrackName: string): void;
	static AddAnimationNotifyStateEvent(AnimationSequenceBase: AnimSequenceBase,NotifyTrackName: string,StartTime: number,Duration: number,NotifyStateClass: UnrealEngineClass): AnimNotifyState;
	static AddAnimationNotifyEventObject(AnimationSequenceBase: AnimSequenceBase,StartTime: number,Notify: AnimNotify,NotifyTrackName: string): void;
	static AddAnimationNotifyEvent(AnimationSequenceBase: AnimSequenceBase,NotifyTrackName: string,StartTime: number,NotifyClass: UnrealEngineClass): AnimNotify;
	static C(Other: UObject | any): AnimationBlueprintLibrary;
}

declare class AnimPoseExtensions extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AnimPoseExtensions;
	static Find(Outer: UObject, ResourceName: string): AnimPoseExtensions;
	static GetDefaultObject(): AnimPoseExtensions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimPoseExtensions;
	static SetBonePose(Pose?: AnimPose,Transform?: Transform,BoneName?: string,Space?: EAnimPoseSpaces): {Pose: AnimPose};
	static IsValid(Pose: AnimPose): boolean;
	static GetRelativeTransform(Pose: AnimPose,FromBoneName: string,ToBoneName: string,Space: EAnimPoseSpaces): Transform;
	static GetRelativeToRefPoseTransform(Pose: AnimPose,BoneName: string,Space: EAnimPoseSpaces): Transform;
	static GetRefPoseRelativeTransform(Pose: AnimPose,FromBoneName: string,ToBoneName: string,Space: EAnimPoseSpaces): Transform;
	static GetReferencePose(Skeleton: Skeleton,OutPose?: AnimPose): {OutPose: AnimPose};
	static GetRefBonePose(Pose: AnimPose,BoneName: string,Space: EAnimPoseSpaces): Transform;
	static GetBonePose(Pose: AnimPose,BoneName: string,Space: EAnimPoseSpaces): Transform;
	static GetBoneNames(Pose: AnimPose,Bones?: string[]): {Bones: string[]};
	static GetAnimPoseAtTime(AnimationSequenceBase: AnimSequenceBase,Time: number,EvaluationOptions: AnimPoseEvaluationOptions,Pose?: AnimPose): {Pose: AnimPose};
	static GetAnimPoseAtFrame(AnimationSequenceBase: AnimSequenceBase,FrameIndex: number,EvaluationOptions: AnimPoseEvaluationOptions,Pose?: AnimPose): {Pose: AnimPose};
	static EvaluateAnimationBlueprintWithInputPose(InputPose: AnimPose,TargetSkeletalMesh: SkeletalMesh,AnimationBlueprint: AnimBlueprint,OutPose?: AnimPose): {OutPose: AnimPose};
	static C(Other: UObject | any): AnimPoseExtensions;
}

declare class ByteChannelEvaluatorSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): ByteChannelEvaluatorSystem;
	static Find(Outer: UObject, ResourceName: string): ByteChannelEvaluatorSystem;
	static GetDefaultObject(): ByteChannelEvaluatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ByteChannelEvaluatorSystem;
	static C(Other: UObject | any): ByteChannelEvaluatorSystem;
}

declare class DoubleChannelEvaluatorSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): DoubleChannelEvaluatorSystem;
	static Find(Outer: UObject, ResourceName: string): DoubleChannelEvaluatorSystem;
	static GetDefaultObject(): DoubleChannelEvaluatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DoubleChannelEvaluatorSystem;
	static C(Other: UObject | any): DoubleChannelEvaluatorSystem;
}

declare class FloatChannelEvaluatorSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): FloatChannelEvaluatorSystem;
	static Find(Outer: UObject, ResourceName: string): FloatChannelEvaluatorSystem;
	static GetDefaultObject(): FloatChannelEvaluatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatChannelEvaluatorSystem;
	static C(Other: UObject | any): FloatChannelEvaluatorSystem;
}

declare class MovieSceneTransformOrigin extends Interface { 
	static Load(ResourceName: string): MovieSceneTransformOrigin;
	static Find(Outer: UObject, ResourceName: string): MovieSceneTransformOrigin;
	static GetDefaultObject(): MovieSceneTransformOrigin;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTransformOrigin;
	BP_GetTransformOrigin(): Transform;
	static C(Other: UObject | any): MovieSceneTransformOrigin;
}

declare class IntegerChannelEvaluatorSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): IntegerChannelEvaluatorSystem;
	static Find(Outer: UObject, ResourceName: string): IntegerChannelEvaluatorSystem;
	static GetDefaultObject(): IntegerChannelEvaluatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntegerChannelEvaluatorSystem;
	static C(Other: UObject | any): IntegerChannelEvaluatorSystem;
}

declare class MovieScene3DConstraintSection extends MovieSceneSection { 
	ConstraintId: Guid;
	ConstraintBindingID: MovieSceneObjectBindingID;
	static Load(ResourceName: string): MovieScene3DConstraintSection;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DConstraintSection;
	static GetDefaultObject(): MovieScene3DConstraintSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DConstraintSection;
	SetConstraintBindingID(InConstraintBindingID: MovieSceneObjectBindingID): void;
	GetConstraintBindingID(): MovieSceneObjectBindingID;
	static C(Other: UObject | any): MovieScene3DConstraintSection;
}

declare class MovieScene3DAttachSection extends MovieScene3DConstraintSection { 
	AttachSocketName: string;
	AttachComponentName: string;
	bFullRevertOnDetach: boolean;
	ReAttachOnDetach: SceneComponent;
	AttachmentLocationRule: EAttachmentRule;
	AttachmentRotationRule: EAttachmentRule;
	AttachmentScaleRule: EAttachmentRule;
	DetachmentLocationRule: EDetachmentRule;
	DetachmentRotationRule: EDetachmentRule;
	DetachmentScaleRule: EDetachmentRule;
	static Load(ResourceName: string): MovieScene3DAttachSection;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DAttachSection;
	static GetDefaultObject(): MovieScene3DAttachSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DAttachSection;
	static C(Other: UObject | any): MovieScene3DAttachSection;
}

declare class MovieScene3DConstraintTrack extends MovieSceneTrack { 
	ConstraintSections: MovieSceneSection[];
	static Load(ResourceName: string): MovieScene3DConstraintTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DConstraintTrack;
	static GetDefaultObject(): MovieScene3DConstraintTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DConstraintTrack;
	static C(Other: UObject | any): MovieScene3DConstraintTrack;
}

declare class MovieScene3DAttachTrack extends MovieScene3DConstraintTrack { 
	static Load(ResourceName: string): MovieScene3DAttachTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DAttachTrack;
	static GetDefaultObject(): MovieScene3DAttachTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DAttachTrack;
	static C(Other: UObject | any): MovieScene3DAttachTrack;
}

declare type MovieScene3DPathSection_Axis = 'X' | 'Y' | 'Z' | 'NEG_X' | 'NEG_Y' | 'NEG_Z' | 'MovieScene3DPathSection_MAX';
declare var MovieScene3DPathSection_Axis : { X:'X',Y:'Y',Z:'Z',NEG_X:'NEG_X',NEG_Y:'NEG_Y',NEG_Z:'NEG_Z',MovieScene3DPathSection_MAX:'MovieScene3DPathSection_MAX', };
declare class MovieScene3DPathSection extends MovieScene3DConstraintSection { 
	TimingCurve: MovieSceneFloatChannel;
	FrontAxisEnum: MovieScene3DPathSection_Axis;
	UpAxisEnum: MovieScene3DPathSection_Axis;
	bFollow: boolean;
	bReverse: boolean;
	bForceUpright: boolean;
	static Load(ResourceName: string): MovieScene3DPathSection;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DPathSection;
	static GetDefaultObject(): MovieScene3DPathSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DPathSection;
	static C(Other: UObject | any): MovieScene3DPathSection;
}

declare class MovieScene3DPathTrack extends MovieScene3DConstraintTrack { 
	static Load(ResourceName: string): MovieScene3DPathTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DPathTrack;
	static GetDefaultObject(): MovieScene3DPathTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DPathTrack;
	static C(Other: UObject | any): MovieScene3DPathTrack;
}

declare class MovieScene3DTransformPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieScene3DTransformPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DTransformPropertySystem;
	static GetDefaultObject(): MovieScene3DTransformPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DTransformPropertySystem;
	static C(Other: UObject | any): MovieScene3DTransformPropertySystem;
}

declare class MovieScene3DTransformTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieScene3DTransformTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DTransformTrack;
	static GetDefaultObject(): MovieScene3DTransformTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DTransformTrack;
	static C(Other: UObject | any): MovieScene3DTransformTrack;
}

declare class MovieSceneActorReferenceKey { 
	UObject: MovieSceneObjectBindingID;
	ComponentName: string;
	SocketName: string;
	clone() : MovieSceneActorReferenceKey;
	static C(Other: UObject | any): MovieSceneActorReferenceKey;
}

declare class MovieSceneActorReferenceData extends MovieSceneChannel { 
	KeyTimes: FrameNumber[];
	DefaultValue: MovieSceneActorReferenceKey;
	KeyValues: MovieSceneActorReferenceKey[];
	clone() : MovieSceneActorReferenceData;
	static C(Other: UObject | any): MovieSceneActorReferenceData;
}

declare class IntegralKey { 
	Time: number;
	Value: number;
	clone() : IntegralKey;
	static C(Other: UObject | any): IntegralKey;
}

declare class IntegralCurve extends IndexedCurve { 
	Keys: IntegralKey[];
	DefaultValue: number;
	bUseDefaultValueBeforeFirstKey: boolean;
	clone() : IntegralCurve;
	static C(Other: UObject | any): IntegralCurve;
}

declare class MovieSceneActorReferenceSection extends MovieSceneSection { 
	ActorReferenceData: MovieSceneActorReferenceData;
	ActorGuidIndexCurve: IntegralCurve;
	ActorGuidStrings: string[];
	static Load(ResourceName: string): MovieSceneActorReferenceSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneActorReferenceSection;
	static GetDefaultObject(): MovieSceneActorReferenceSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneActorReferenceSection;
	static C(Other: UObject | any): MovieSceneActorReferenceSection;
}

declare class MovieSceneActorReferenceTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneActorReferenceTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneActorReferenceTrack;
	static GetDefaultObject(): MovieSceneActorReferenceTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneActorReferenceTrack;
	static C(Other: UObject | any): MovieSceneActorReferenceTrack;
}

declare class MovieSceneAudioSection extends MovieSceneSection { 
	Sound: SoundBase;
	StartFrameOffset: FrameNumber;
	StartOffset: number;
	AudioStartTime: number;
	AudioDilationFactor: number;
	AudioVolume: number;
	SoundVolume: MovieSceneFloatChannel;
	PitchMultiplier: MovieSceneFloatChannel;
	Inputs_Float: any;
	Inputs_String: any;
	Inputs_Bool: any;
	Inputs_Int: any;
	Inputs_Trigger: any;
	AttachActorData: MovieSceneActorReferenceData;
	bLooping: boolean;
	bSuppressSubtitles: boolean;
	bOverrideAttenuation: boolean;
	AttenuationSettings: SoundAttenuation;
	OnQueueSubtitles: UnrealEngineDelegate<(Subtitles: SubtitleCue[], CueDuration: number) => void>;
	OnAudioFinished: UnrealEngineMulticastDelegate<() => void>;
	OnAudioPlaybackPercent: UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, PlaybackPercent: number) => void>;
	static Load(ResourceName: string): MovieSceneAudioSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneAudioSection;
	static GetDefaultObject(): MovieSceneAudioSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneAudioSection;
	SetStartOffset(InStartOffset: FrameNumber): void;
	SetSound(InSound: SoundBase): void;
	GetStartOffset(): FrameNumber;
	GetSound(): SoundBase;
	static C(Other: UObject | any): MovieSceneAudioSection;
}

declare class MovieSceneAudioTrack extends MovieSceneNameableTrack { 
	AudioSections: MovieSceneSection[];
	RowHeight: number;
	static Load(ResourceName: string): MovieSceneAudioTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneAudioTrack;
	static GetDefaultObject(): MovieSceneAudioTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneAudioTrack;
	static C(Other: UObject | any): MovieSceneAudioTrack;
}

declare class MovieSceneBaseValueEvaluatorSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneBaseValueEvaluatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBaseValueEvaluatorSystem;
	static GetDefaultObject(): MovieSceneBaseValueEvaluatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBaseValueEvaluatorSystem;
	static C(Other: UObject | any): MovieSceneBaseValueEvaluatorSystem;
}

declare class MovieSceneBoolPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneBoolPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBoolPropertySystem;
	static GetDefaultObject(): MovieSceneBoolPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBoolPropertySystem;
	static C(Other: UObject | any): MovieSceneBoolPropertySystem;
}

declare class MovieSceneBoolTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneBoolTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBoolTrack;
	static GetDefaultObject(): MovieSceneBoolTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBoolTrack;
	static C(Other: UObject | any): MovieSceneBoolTrack;
}

declare class MovieSceneBytePropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneBytePropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneBytePropertySystem;
	static GetDefaultObject(): MovieSceneBytePropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBytePropertySystem;
	static C(Other: UObject | any): MovieSceneBytePropertySystem;
}

declare class MovieSceneByteSection extends MovieSceneSection { 
	ByteCurve: MovieSceneByteChannel;
	static Load(ResourceName: string): MovieSceneByteSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneByteSection;
	static GetDefaultObject(): MovieSceneByteSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneByteSection;
	static C(Other: UObject | any): MovieSceneByteSection;
}

declare class MovieSceneByteTrack extends MovieScenePropertyTrack { 
	Enum: Enum;
	static Load(ResourceName: string): MovieSceneByteTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneByteTrack;
	static GetDefaultObject(): MovieSceneByteTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneByteTrack;
	static C(Other: UObject | any): MovieSceneByteTrack;
}

declare class MovieSceneCameraAnimSectionData { 
	CameraAnim: CameraAnim;
	PlayRate: number;
	PlayScale: number;
	BlendInTime: number;
	BlendOutTime: number;
	bLooping: boolean;
	clone() : MovieSceneCameraAnimSectionData;
	static C(Other: UObject | any): MovieSceneCameraAnimSectionData;
}

declare class MovieSceneCameraAnimSection extends MovieSceneSection { 
	AnimData: MovieSceneCameraAnimSectionData;
	CameraAnim: CameraAnim;
	PlayRate: number;
	PlayScale: number;
	BlendInTime: number;
	BlendOutTime: number;
	bLooping: boolean;
	static Load(ResourceName: string): MovieSceneCameraAnimSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraAnimSection;
	static GetDefaultObject(): MovieSceneCameraAnimSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraAnimSection;
	static C(Other: UObject | any): MovieSceneCameraAnimSection;
}

declare class MovieSceneCameraAnimTrack extends MovieSceneNameableTrack { 
	CameraAnimSections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCameraAnimTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraAnimTrack;
	static GetDefaultObject(): MovieSceneCameraAnimTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraAnimTrack;
	static C(Other: UObject | any): MovieSceneCameraAnimTrack;
}

declare class MovieSceneCameraCutSection extends MovieSceneSection { 
	bLockPreviousCamera: boolean;
	CameraGuid: Guid;
	CameraBindingID: MovieSceneObjectBindingID;
	InitialCameraCutTransform: Transform;
	bHasInitialCameraCutTransform: boolean;
	ThumbnailReferenceOffset: number;
	static Load(ResourceName: string): MovieSceneCameraCutSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraCutSection;
	static GetDefaultObject(): MovieSceneCameraCutSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraCutSection;
	SetCameraBindingID(InCameraBindingID: MovieSceneObjectBindingID): void;
	GetCameraBindingID(): MovieSceneObjectBindingID;
	static C(Other: UObject | any): MovieSceneCameraCutSection;
}

declare class MovieSceneCameraCutTrack extends MovieSceneNameableTrack { 
	bCanBlend: boolean;
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCameraCutTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraCutTrack;
	static GetDefaultObject(): MovieSceneCameraCutTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraCutTrack;
	static C(Other: UObject | any): MovieSceneCameraCutTrack;
}

declare class MovieSceneCameraCutTrackInstance extends MovieSceneTrackInstance { 
	static Load(ResourceName: string): MovieSceneCameraCutTrackInstance;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraCutTrackInstance;
	static GetDefaultObject(): MovieSceneCameraCutTrackInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraCutTrackInstance;
	static C(Other: UObject | any): MovieSceneCameraCutTrackInstance;
}

declare class MovieSceneCameraShakeSectionData { 
	ShakeClass: UnrealEngineClass;
	PlayScale: number;
	PlaySpace: ECameraShakePlaySpace;
	UserDefinedPlaySpace: Rotator;
	clone() : MovieSceneCameraShakeSectionData;
	static C(Other: UObject | any): MovieSceneCameraShakeSectionData;
}

declare class MovieSceneCameraShakeSection extends MovieSceneSection { 
	ShakeData: MovieSceneCameraShakeSectionData;
	ShakeClass: UnrealEngineClass;
	PlayScale: number;
	PlaySpace: ECameraShakePlaySpace;
	UserDefinedPlaySpace: Rotator;
	static Load(ResourceName: string): MovieSceneCameraShakeSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeSection;
	static GetDefaultObject(): MovieSceneCameraShakeSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeSection;
	static C(Other: UObject | any): MovieSceneCameraShakeSection;
}

declare class MovieSceneCameraShakeSourceShakeSection extends MovieSceneSection { 
	ShakeData: MovieSceneCameraShakeSectionData;
	static Load(ResourceName: string): MovieSceneCameraShakeSourceShakeSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeSourceShakeSection;
	static GetDefaultObject(): MovieSceneCameraShakeSourceShakeSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeSourceShakeSection;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceShakeSection;
}

declare class MovieSceneCameraShakeSourceShakeTrack extends MovieSceneNameableTrack { 
	CameraShakeSections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCameraShakeSourceShakeTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeSourceShakeTrack;
	static GetDefaultObject(): MovieSceneCameraShakeSourceShakeTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeSourceShakeTrack;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceShakeTrack;
}

declare class MovieSceneCameraShakeSourceTrigger { 
	ShakeClass: UnrealEngineClass;
	PlayScale: number;
	PlaySpace: ECameraShakePlaySpace;
	UserDefinedPlaySpace: Rotator;
	clone() : MovieSceneCameraShakeSourceTrigger;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceTrigger;
}

declare class MovieSceneCameraShakeSourceTriggerChannel extends MovieSceneChannel { 
	KeyTimes: FrameNumber[];
	KeyValues: MovieSceneCameraShakeSourceTrigger[];
	clone() : MovieSceneCameraShakeSourceTriggerChannel;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceTriggerChannel;
}

declare class MovieSceneCameraShakeSourceTriggerSection extends MovieSceneSection { 
	Channel: MovieSceneCameraShakeSourceTriggerChannel;
	static Load(ResourceName: string): MovieSceneCameraShakeSourceTriggerSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeSourceTriggerSection;
	static GetDefaultObject(): MovieSceneCameraShakeSourceTriggerSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeSourceTriggerSection;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceTriggerSection;
}

declare class MovieSceneCameraShakeSourceTriggerTrack extends MovieSceneTrack { 
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCameraShakeSourceTriggerTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeSourceTriggerTrack;
	static GetDefaultObject(): MovieSceneCameraShakeSourceTriggerTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeSourceTriggerTrack;
	static C(Other: UObject | any): MovieSceneCameraShakeSourceTriggerTrack;
}

declare class MovieSceneCameraShakeEvaluator extends UObject { 
	static Load(ResourceName: string): MovieSceneCameraShakeEvaluator;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeEvaluator;
	static GetDefaultObject(): MovieSceneCameraShakeEvaluator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeEvaluator;
	static C(Other: UObject | any): MovieSceneCameraShakeEvaluator;
}

declare class MovieSceneCameraShakeTrack extends MovieSceneNameableTrack { 
	CameraShakeSections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCameraShakeTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraShakeTrack;
	static GetDefaultObject(): MovieSceneCameraShakeTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraShakeTrack;
	static C(Other: UObject | any): MovieSceneCameraShakeTrack;
}

declare class MovieSceneCinematicShotSection extends MovieSceneSubSection { 
	ShotDisplayName: string;
	DisplayName: string;
	ThumbnailReferenceOffset: number;
	static Load(ResourceName: string): MovieSceneCinematicShotSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCinematicShotSection;
	static GetDefaultObject(): MovieSceneCinematicShotSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCinematicShotSection;
	SetShotDisplayName(InShotDisplayName: string): void;
	GetShotDisplayName(): string;
	static C(Other: UObject | any): MovieSceneCinematicShotSection;
}

declare class MovieSceneCinematicShotTrack extends MovieSceneSubTrack { 
	static Load(ResourceName: string): MovieSceneCinematicShotTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCinematicShotTrack;
	static GetDefaultObject(): MovieSceneCinematicShotTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCinematicShotTrack;
	static C(Other: UObject | any): MovieSceneCinematicShotTrack;
}

declare class MovieSceneColorPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneColorPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneColorPropertySystem;
	static GetDefaultObject(): MovieSceneColorPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneColorPropertySystem;
	static C(Other: UObject | any): MovieSceneColorPropertySystem;
}

declare class MovieSceneColorSection extends MovieSceneSection { 
	RedCurve: MovieSceneFloatChannel;
	GreenCurve: MovieSceneFloatChannel;
	BlueCurve: MovieSceneFloatChannel;
	AlphaCurve: MovieSceneFloatChannel;
	static Load(ResourceName: string): MovieSceneColorSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneColorSection;
	static GetDefaultObject(): MovieSceneColorSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneColorSection;
	static C(Other: UObject | any): MovieSceneColorSection;
}

declare class MovieSceneColorTrack extends MovieScenePropertyTrack { 
	bIsSlateColor: boolean;
	static Load(ResourceName: string): MovieSceneColorTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneColorTrack;
	static GetDefaultObject(): MovieSceneColorTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneColorTrack;
	static C(Other: UObject | any): MovieSceneColorTrack;
}

declare class MovieSceneComponentAttachmentInvalidatorSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneComponentAttachmentInvalidatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneComponentAttachmentInvalidatorSystem;
	static GetDefaultObject(): MovieSceneComponentAttachmentInvalidatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneComponentAttachmentInvalidatorSystem;
	static C(Other: UObject | any): MovieSceneComponentAttachmentInvalidatorSystem;
}

declare class MovieSceneComponentAttachmentSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneComponentAttachmentSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneComponentAttachmentSystem;
	static GetDefaultObject(): MovieSceneComponentAttachmentSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneComponentAttachmentSystem;
	static C(Other: UObject | any): MovieSceneComponentAttachmentSystem;
}

declare class MovieSceneComponentMobilitySystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneComponentMobilitySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneComponentMobilitySystem;
	static GetDefaultObject(): MovieSceneComponentMobilitySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneComponentMobilitySystem;
	static C(Other: UObject | any): MovieSceneComponentMobilitySystem;
}

declare class MovieSceneComponentTransformSystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneComponentTransformSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneComponentTransformSystem;
	static GetDefaultObject(): MovieSceneComponentTransformSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneComponentTransformSystem;
	static C(Other: UObject | any): MovieSceneComponentTransformSystem;
}

declare class MovieSceneCVarOverrides { 
	ValuesByCVar: any;
	clone() : MovieSceneCVarOverrides;
	static C(Other: UObject | any): MovieSceneCVarOverrides;
}

declare class MovieSceneCVarSection extends MovieSceneSection { 
	ConsoleVariables: MovieSceneCVarOverrides;
	static Load(ResourceName: string): MovieSceneCVarSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCVarSection;
	static GetDefaultObject(): MovieSceneCVarSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCVarSection;
	SetFromString(InString: string): void;
	GetString(): string;
	static C(Other: UObject | any): MovieSceneCVarSection;
}

declare class MovieSceneCVarTrack extends MovieSceneNameableTrack { 
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneCVarTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCVarTrack;
	static GetDefaultObject(): MovieSceneCVarTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCVarTrack;
	static C(Other: UObject | any): MovieSceneCVarTrack;
}

declare class MovieSceneCVarTrackInstance extends MovieSceneTrackInstance { 
	static Load(ResourceName: string): MovieSceneCVarTrackInstance;
	static Find(Outer: UObject, ResourceName: string): MovieSceneCVarTrackInstance;
	static GetDefaultObject(): MovieSceneCVarTrackInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCVarTrackInstance;
	static C(Other: UObject | any): MovieSceneCVarTrackInstance;
}

declare class MovieSceneDataLayerSection extends MovieSceneSection { 
	DataLayers: ActorDataLayer[];
	DesiredState: EDataLayerRuntimeState;
	PrerollState: EDataLayerRuntimeState;
	bFlushOnUnload: boolean;
	static Load(ResourceName: string): MovieSceneDataLayerSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneDataLayerSection;
	static GetDefaultObject(): MovieSceneDataLayerSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneDataLayerSection;
	SetPrerollState(InPrerollState: EDataLayerRuntimeState): void;
	SetFlushOnUnload(bFlushOnUnload: boolean): void;
	SetDesiredState(InDesiredState: EDataLayerRuntimeState): void;
	SetDataLayers(InDataLayers: ActorDataLayer[]): void;
	GetPrerollState(): EDataLayerRuntimeState;
	GetFlushOnUnload(): boolean;
	GetDesiredState(): EDataLayerRuntimeState;
	GetDataLayers(): ActorDataLayer[];
	static C(Other: UObject | any): MovieSceneDataLayerSection;
}

declare class MovieSceneDataLayerSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneDataLayerSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneDataLayerSystem;
	static GetDefaultObject(): MovieSceneDataLayerSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneDataLayerSystem;
	static C(Other: UObject | any): MovieSceneDataLayerSystem;
}

declare class MovieSceneDataLayerTrack extends MovieSceneNameableTrack { 
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneDataLayerTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneDataLayerTrack;
	static GetDefaultObject(): MovieSceneDataLayerTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneDataLayerTrack;
	static C(Other: UObject | any): MovieSceneDataLayerTrack;
}

declare class MovieSceneDeferredComponentMovementSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneDeferredComponentMovementSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneDeferredComponentMovementSystem;
	static GetDefaultObject(): MovieSceneDeferredComponentMovementSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneDeferredComponentMovementSystem;
	static C(Other: UObject | any): MovieSceneDeferredComponentMovementSystem;
}

declare class MovieSceneDoublePropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneDoublePropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneDoublePropertySystem;
	static GetDefaultObject(): MovieSceneDoublePropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneDoublePropertySystem;
	static C(Other: UObject | any): MovieSceneDoublePropertySystem;
}

declare class MovieSceneDoubleSection extends MovieSceneSection { 
	DoubleCurve: MovieSceneDoubleChannel;
	static Load(ResourceName: string): MovieSceneDoubleSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneDoubleSection;
	static GetDefaultObject(): MovieSceneDoubleSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneDoubleSection;
	static C(Other: UObject | any): MovieSceneDoubleSection;
}

declare class MovieSceneDoubleTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneDoubleTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneDoubleTrack;
	static GetDefaultObject(): MovieSceneDoubleTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneDoubleTrack;
	static C(Other: UObject | any): MovieSceneDoubleTrack;
}

declare class MovieSceneEnumPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneEnumPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEnumPropertySystem;
	static GetDefaultObject(): MovieSceneEnumPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEnumPropertySystem;
	static C(Other: UObject | any): MovieSceneEnumPropertySystem;
}

declare class MovieSceneEnumSection extends MovieSceneSection { 
	EnumCurve: MovieSceneByteChannel;
	static Load(ResourceName: string): MovieSceneEnumSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEnumSection;
	static GetDefaultObject(): MovieSceneEnumSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEnumSection;
	static C(Other: UObject | any): MovieSceneEnumSection;
}

declare class MovieSceneEnumTrack extends MovieScenePropertyTrack { 
	Enum: Enum;
	static Load(ResourceName: string): MovieSceneEnumTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEnumTrack;
	static GetDefaultObject(): MovieSceneEnumTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEnumTrack;
	static C(Other: UObject | any): MovieSceneEnumTrack;
}

declare class MovieSceneEulerTransformPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneEulerTransformPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEulerTransformPropertySystem;
	static GetDefaultObject(): MovieSceneEulerTransformPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEulerTransformPropertySystem;
	static C(Other: UObject | any): MovieSceneEulerTransformPropertySystem;
}

declare class MovieSceneEulerTransformTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneEulerTransformTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEulerTransformTrack;
	static GetDefaultObject(): MovieSceneEulerTransformTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEulerTransformTrack;
	static C(Other: UObject | any): MovieSceneEulerTransformTrack;
}

declare class MovieSceneEventRepeaterSection extends MovieSceneEventSectionBase { 
	Event: MovieSceneEvent;
	static Load(ResourceName: string): MovieSceneEventRepeaterSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventRepeaterSection;
	static GetDefaultObject(): MovieSceneEventRepeaterSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventRepeaterSection;
	static C(Other: UObject | any): MovieSceneEventRepeaterSection;
}

declare class NameCurveKey { 
	Time: number;
	Value: string;
	clone() : NameCurveKey;
	static C(Other: UObject | any): NameCurveKey;
}

declare class NameCurve extends IndexedCurve { 
	Keys: NameCurveKey[];
	clone() : NameCurve;
	static C(Other: UObject | any): NameCurve;
}

declare class MovieSceneEventParameters { 
	clone() : MovieSceneEventParameters;
	static C(Other: UObject | any): MovieSceneEventParameters;
}

declare class EventPayload { 
	EventName: string;
	Parameters: MovieSceneEventParameters;
	clone() : EventPayload;
	static C(Other: UObject | any): EventPayload;
}

declare class MovieSceneEventSectionData extends MovieSceneChannel { 
	Times: FrameNumber[];
	KeyValues: EventPayload[];
	KeyTimes: number[];
	clone() : MovieSceneEventSectionData;
	static C(Other: UObject | any): MovieSceneEventSectionData;
}

declare class MovieSceneEventSection extends MovieSceneSection { 
	Events: NameCurve;
	EventData: MovieSceneEventSectionData;
	static Load(ResourceName: string): MovieSceneEventSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventSection;
	static GetDefaultObject(): MovieSceneEventSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventSection;
	static C(Other: UObject | any): MovieSceneEventSection;
}

declare class MovieSceneEventSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneEventSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventSystem;
	static GetDefaultObject(): MovieSceneEventSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventSystem;
	static C(Other: UObject | any): MovieSceneEventSystem;
}

declare class MovieScenePreSpawnEventSystem extends MovieSceneEventSystem { 
	static Load(ResourceName: string): MovieScenePreSpawnEventSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePreSpawnEventSystem;
	static GetDefaultObject(): MovieScenePreSpawnEventSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePreSpawnEventSystem;
	static C(Other: UObject | any): MovieScenePreSpawnEventSystem;
}

declare class MovieScenePostSpawnEventSystem extends MovieSceneEventSystem { 
	static Load(ResourceName: string): MovieScenePostSpawnEventSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePostSpawnEventSystem;
	static GetDefaultObject(): MovieScenePostSpawnEventSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePostSpawnEventSystem;
	static C(Other: UObject | any): MovieScenePostSpawnEventSystem;
}

declare class MovieScenePostEvalEventSystem extends MovieSceneEventSystem { 
	static Load(ResourceName: string): MovieScenePostEvalEventSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePostEvalEventSystem;
	static GetDefaultObject(): MovieScenePostEvalEventSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePostEvalEventSystem;
	static C(Other: UObject | any): MovieScenePostEvalEventSystem;
}

declare type EFireEventsAtPosition = 'AtStartOfEvaluation' | 'AtEndOfEvaluation' | 'AfterSpawn' | 'EFireEventsAtPosition_MAX';
declare var EFireEventsAtPosition : { AtStartOfEvaluation:'AtStartOfEvaluation',AtEndOfEvaluation:'AtEndOfEvaluation',AfterSpawn:'AfterSpawn',EFireEventsAtPosition_MAX:'EFireEventsAtPosition_MAX', };
declare class MovieSceneEventChannel extends MovieSceneChannel { 
	KeyTimes: FrameNumber[];
	KeyValues: MovieSceneEvent[];
	clone() : MovieSceneEventChannel;
	static C(Other: UObject | any): MovieSceneEventChannel;
}

declare class MovieSceneEventTriggerSection extends MovieSceneEventSectionBase { 
	EventChannel: MovieSceneEventChannel;
	static Load(ResourceName: string): MovieSceneEventTriggerSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventTriggerSection;
	static GetDefaultObject(): MovieSceneEventTriggerSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventTriggerSection;
	static C(Other: UObject | any): MovieSceneEventTriggerSection;
}

declare class MovieSceneEventTrack extends MovieSceneNameableTrack { 
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	EventPosition: EFireEventsAtPosition;
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneEventTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneEventTrack;
	static GetDefaultObject(): MovieSceneEventTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneEventTrack;
	static C(Other: UObject | any): MovieSceneEventTrack;
	AddEventRepeaterSection(): MovieSceneEventRepeaterSection;
	AddEventTriggerSection(): MovieSceneEventTriggerSection;
	static AddEventRepeaterSection(InTrack: MovieSceneEventTrack): MovieSceneEventRepeaterSection;
	static AddEventTriggerSection(InTrack: MovieSceneEventTrack): MovieSceneEventTriggerSection;
}

declare class MovieSceneFadeSection extends MovieSceneSection { 
	FloatCurve: MovieSceneFloatChannel;
	FadeColor: LinearColor;
	bFadeAudio: boolean;
	static Load(ResourceName: string): MovieSceneFadeSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFadeSection;
	static GetDefaultObject(): MovieSceneFadeSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFadeSection;
	static C(Other: UObject | any): MovieSceneFadeSection;
}

declare class MovieSceneFloatTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneFloatTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFloatTrack;
	static GetDefaultObject(): MovieSceneFloatTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFloatTrack;
	static C(Other: UObject | any): MovieSceneFloatTrack;
}

declare class MovieSceneFadeTrack extends MovieSceneFloatTrack { 
	static Load(ResourceName: string): MovieSceneFadeTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFadeTrack;
	static GetDefaultObject(): MovieSceneFadeTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFadeTrack;
	static C(Other: UObject | any): MovieSceneFadeTrack;
}

declare class MovieSceneFloatPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneFloatPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFloatPropertySystem;
	static GetDefaultObject(): MovieSceneFloatPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFloatPropertySystem;
	static C(Other: UObject | any): MovieSceneFloatPropertySystem;
}

declare class MovieSceneFloatSection extends MovieSceneSection { 
	FloatCurve: MovieSceneFloatChannel;
	static Load(ResourceName: string): MovieSceneFloatSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFloatSection;
	static GetDefaultObject(): MovieSceneFloatSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFloatSection;
	static C(Other: UObject | any): MovieSceneFloatSection;
}

declare class MovieSceneHierarchicalBiasSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneHierarchicalBiasSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneHierarchicalBiasSystem;
	static GetDefaultObject(): MovieSceneHierarchicalBiasSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneHierarchicalBiasSystem;
	static C(Other: UObject | any): MovieSceneHierarchicalBiasSystem;
}

declare class MovieSceneInitialValueSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneInitialValueSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneInitialValueSystem;
	static GetDefaultObject(): MovieSceneInitialValueSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneInitialValueSystem;
	static C(Other: UObject | any): MovieSceneInitialValueSystem;
}

declare class MovieSceneIntegerPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneIntegerPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneIntegerPropertySystem;
	static GetDefaultObject(): MovieSceneIntegerPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneIntegerPropertySystem;
	static C(Other: UObject | any): MovieSceneIntegerPropertySystem;
}

declare class MovieSceneIntegerSection extends MovieSceneSection { 
	IntegerCurve: MovieSceneIntegerChannel;
	static Load(ResourceName: string): MovieSceneIntegerSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneIntegerSection;
	static GetDefaultObject(): MovieSceneIntegerSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneIntegerSection;
	static C(Other: UObject | any): MovieSceneIntegerSection;
}

declare class MovieSceneIntegerTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneIntegerTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneIntegerTrack;
	static GetDefaultObject(): MovieSceneIntegerTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneIntegerTrack;
	static C(Other: UObject | any): MovieSceneIntegerTrack;
}

declare class MovieSceneInterrogatedPropertyInstantiatorSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneInterrogatedPropertyInstantiatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneInterrogatedPropertyInstantiatorSystem;
	static GetDefaultObject(): MovieSceneInterrogatedPropertyInstantiatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneInterrogatedPropertyInstantiatorSystem;
	static C(Other: UObject | any): MovieSceneInterrogatedPropertyInstantiatorSystem;
}

declare type ELevelVisibility = 'Visible' | 'Hidden' | 'ELevelVisibility_MAX';
declare var ELevelVisibility : { Visible:'Visible',Hidden:'Hidden',ELevelVisibility_MAX:'ELevelVisibility_MAX', };
declare class MovieSceneLevelVisibilitySection extends MovieSceneSection { 
	Visibility: ELevelVisibility;
	LevelNames: string[];
	static Load(ResourceName: string): MovieSceneLevelVisibilitySection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneLevelVisibilitySection;
	static GetDefaultObject(): MovieSceneLevelVisibilitySection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneLevelVisibilitySection;
	SetVisibility(InVisibility: ELevelVisibility): void;
	SetLevelNames(InLevelNames: string[]): void;
	GetVisibility(): ELevelVisibility;
	GetLevelNames(): string[];
	static C(Other: UObject | any): MovieSceneLevelVisibilitySection;
}

declare class MovieSceneLevelVisibilitySystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneLevelVisibilitySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneLevelVisibilitySystem;
	static GetDefaultObject(): MovieSceneLevelVisibilitySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneLevelVisibilitySystem;
	static C(Other: UObject | any): MovieSceneLevelVisibilitySystem;
}

declare class MovieSceneLevelVisibilityTrack extends MovieSceneNameableTrack { 
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneLevelVisibilityTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneLevelVisibilityTrack;
	static GetDefaultObject(): MovieSceneLevelVisibilityTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneLevelVisibilityTrack;
	static C(Other: UObject | any): MovieSceneLevelVisibilityTrack;
}

declare class MovieSceneMaterialParameterCollectionTrack extends MovieSceneMaterialTrack { 
	MPC: MaterialParameterCollection;
	static Load(ResourceName: string): MovieSceneMaterialParameterCollectionTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneMaterialParameterCollectionTrack;
	static GetDefaultObject(): MovieSceneMaterialParameterCollectionTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMaterialParameterCollectionTrack;
	static C(Other: UObject | any): MovieSceneMaterialParameterCollectionTrack;
}

declare class MovieSceneComponentMaterialTrack extends MovieSceneMaterialTrack { 
	MaterialIndex: number;
	static Load(ResourceName: string): MovieSceneComponentMaterialTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneComponentMaterialTrack;
	static GetDefaultObject(): MovieSceneComponentMaterialTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneComponentMaterialTrack;
	static C(Other: UObject | any): MovieSceneComponentMaterialTrack;
}

declare class MovieSceneMotionVectorSimulationSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneMotionVectorSimulationSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneMotionVectorSimulationSystem;
	static GetDefaultObject(): MovieSceneMotionVectorSimulationSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMotionVectorSimulationSystem;
	static C(Other: UObject | any): MovieSceneMotionVectorSimulationSystem;
}

declare class MovieSceneObjectPathChannelKeyValue { 
	SoftPtr: UObject;
	HardPtr: UObject;
	clone() : MovieSceneObjectPathChannelKeyValue;
	static C(Other: UObject | any): MovieSceneObjectPathChannelKeyValue;
}

declare class MovieSceneObjectPathChannel extends MovieSceneChannel { 
	PropertyClass: UnrealEngineClass;
	Times: FrameNumber[];
	Values: MovieSceneObjectPathChannelKeyValue[];
	DefaultValue: MovieSceneObjectPathChannelKeyValue;
	clone() : MovieSceneObjectPathChannel;
	static C(Other: UObject | any): MovieSceneObjectPathChannel;
}

declare class MovieSceneObjectPropertySection extends MovieSceneSection { 
	ObjectChannel: MovieSceneObjectPathChannel;
	static Load(ResourceName: string): MovieSceneObjectPropertySection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneObjectPropertySection;
	static GetDefaultObject(): MovieSceneObjectPropertySection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneObjectPropertySection;
	static C(Other: UObject | any): MovieSceneObjectPropertySection;
}

declare class MovieSceneObjectPropertyTrack extends MovieScenePropertyTrack { 
	PropertyClass: UnrealEngineClass;
	static Load(ResourceName: string): MovieSceneObjectPropertyTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneObjectPropertyTrack;
	static GetDefaultObject(): MovieSceneObjectPropertyTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneObjectPropertyTrack;
	static C(Other: UObject | any): MovieSceneObjectPropertyTrack;
	GetObjectPropertyClass(): UnrealEngineClass;
	SetObjectPropertyClass(PropertyClass: UnrealEngineClass): void;
	static GetObjectPropertyClass(Track: MovieSceneObjectPropertyTrack): UnrealEngineClass;
	static SetObjectPropertyClass(Track: MovieSceneObjectPropertyTrack,PropertyClass: UnrealEngineClass): void;
}

declare class MovieSceneParticleParameterTrack extends MovieSceneNameableTrack { 
	Sections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneParticleParameterTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneParticleParameterTrack;
	static GetDefaultObject(): MovieSceneParticleParameterTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneParticleParameterTrack;
	static C(Other: UObject | any): MovieSceneParticleParameterTrack;
}

declare class MovieSceneParticleChannel extends MovieSceneByteChannel { 
	clone() : MovieSceneParticleChannel;
	static C(Other: UObject | any): MovieSceneParticleChannel;
}

declare class MovieSceneParticleSection extends MovieSceneSection { 
	ParticleKeys: MovieSceneParticleChannel;
	static Load(ResourceName: string): MovieSceneParticleSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneParticleSection;
	static GetDefaultObject(): MovieSceneParticleSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneParticleSection;
	static C(Other: UObject | any): MovieSceneParticleSection;
}

declare class MovieSceneParticleTrack extends MovieSceneNameableTrack { 
	ParticleSections: MovieSceneSection[];
	static Load(ResourceName: string): MovieSceneParticleTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneParticleTrack;
	static GetDefaultObject(): MovieSceneParticleTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneParticleTrack;
	static C(Other: UObject | any): MovieSceneParticleTrack;
}

declare class MovieScenePiecewiseBoolBlenderSystem extends MovieSceneBlenderSystem { 
	static Load(ResourceName: string): MovieScenePiecewiseBoolBlenderSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePiecewiseBoolBlenderSystem;
	static GetDefaultObject(): MovieScenePiecewiseBoolBlenderSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePiecewiseBoolBlenderSystem;
	static C(Other: UObject | any): MovieScenePiecewiseBoolBlenderSystem;
}

declare class MovieScenePiecewiseByteBlenderSystem extends MovieSceneBlenderSystem { 
	static Load(ResourceName: string): MovieScenePiecewiseByteBlenderSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePiecewiseByteBlenderSystem;
	static GetDefaultObject(): MovieScenePiecewiseByteBlenderSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePiecewiseByteBlenderSystem;
	static C(Other: UObject | any): MovieScenePiecewiseByteBlenderSystem;
}

declare class MovieScenePiecewiseDoubleBlenderSystem extends MovieSceneBlenderSystem { 
	static Load(ResourceName: string): MovieScenePiecewiseDoubleBlenderSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePiecewiseDoubleBlenderSystem;
	static GetDefaultObject(): MovieScenePiecewiseDoubleBlenderSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePiecewiseDoubleBlenderSystem;
	static C(Other: UObject | any): MovieScenePiecewiseDoubleBlenderSystem;
}

declare class MovieScenePiecewiseEnumBlenderSystem extends MovieSceneBlenderSystem { 
	static Load(ResourceName: string): MovieScenePiecewiseEnumBlenderSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePiecewiseEnumBlenderSystem;
	static GetDefaultObject(): MovieScenePiecewiseEnumBlenderSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePiecewiseEnumBlenderSystem;
	static C(Other: UObject | any): MovieScenePiecewiseEnumBlenderSystem;
}

declare class MovieScenePiecewiseFloatBlenderSystem extends MovieSceneBlenderSystem { 
	static Load(ResourceName: string): MovieScenePiecewiseFloatBlenderSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePiecewiseFloatBlenderSystem;
	static GetDefaultObject(): MovieScenePiecewiseFloatBlenderSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePiecewiseFloatBlenderSystem;
	static C(Other: UObject | any): MovieScenePiecewiseFloatBlenderSystem;
}

declare class MovieScenePiecewiseIntegerBlenderSystem extends MovieSceneBlenderSystem { 
	static Load(ResourceName: string): MovieScenePiecewiseIntegerBlenderSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePiecewiseIntegerBlenderSystem;
	static GetDefaultObject(): MovieScenePiecewiseIntegerBlenderSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePiecewiseIntegerBlenderSystem;
	static C(Other: UObject | any): MovieScenePiecewiseIntegerBlenderSystem;
}

declare class MovieSceneAsyncAction_SequencePrediction extends BlueprintAsyncActionBase { 
	Result: UnrealEngineMulticastDelegate<(PredictedTransform: Transform) => void>;
	Failure: UnrealEngineMulticastDelegate<() => void>;
	SequencePlayer: MovieSceneSequencePlayer;
	SceneComponent: SceneComponent;
	static Load(ResourceName: string): MovieSceneAsyncAction_SequencePrediction;
	static Find(Outer: UObject, ResourceName: string): MovieSceneAsyncAction_SequencePrediction;
	static GetDefaultObject(): MovieSceneAsyncAction_SequencePrediction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneAsyncAction_SequencePrediction;
	static PredictWorldTransformAtTime(Player: MovieSceneSequencePlayer,TargetComponent: SceneComponent,TimeInSeconds: number): MovieSceneAsyncAction_SequencePrediction;
	static PredictWorldTransformAtFrame(Player: MovieSceneSequencePlayer,TargetComponent: SceneComponent,FrameTime: FrameTime): MovieSceneAsyncAction_SequencePrediction;
	static PredictLocalTransformAtTime(Player: MovieSceneSequencePlayer,TargetComponent: SceneComponent,TimeInSeconds: number): MovieSceneAsyncAction_SequencePrediction;
	static PredictLocalTransformAtFrame(Player: MovieSceneSequencePlayer,TargetComponent: SceneComponent,FrameTime: FrameTime): MovieSceneAsyncAction_SequencePrediction;
	static C(Other: UObject | any): MovieSceneAsyncAction_SequencePrediction;
}

declare class MovieScenePredictionSystem extends MovieSceneEntitySystem { 
	PendingPredictions: MovieSceneAsyncAction_SequencePrediction[];
	ProcessingPredictions: MovieSceneAsyncAction_SequencePrediction[];
	static Load(ResourceName: string): MovieScenePredictionSystem;
	static Find(Outer: UObject, ResourceName: string): MovieScenePredictionSystem;
	static GetDefaultObject(): MovieScenePredictionSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePredictionSystem;
	static C(Other: UObject | any): MovieScenePredictionSystem;
}

declare class MovieScenePrimitiveMaterialSection extends MovieSceneSection { 
	MaterialChannel: MovieSceneObjectPathChannel;
	static Load(ResourceName: string): MovieScenePrimitiveMaterialSection;
	static Find(Outer: UObject, ResourceName: string): MovieScenePrimitiveMaterialSection;
	static GetDefaultObject(): MovieScenePrimitiveMaterialSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePrimitiveMaterialSection;
	static C(Other: UObject | any): MovieScenePrimitiveMaterialSection;
}

declare class MovieScenePrimitiveMaterialTrack extends MovieScenePropertyTrack { 
	MaterialIndex: number;
	static Load(ResourceName: string): MovieScenePrimitiveMaterialTrack;
	static Find(Outer: UObject, ResourceName: string): MovieScenePrimitiveMaterialTrack;
	static GetDefaultObject(): MovieScenePrimitiveMaterialTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePrimitiveMaterialTrack;
	static C(Other: UObject | any): MovieScenePrimitiveMaterialTrack;
}

declare class MovieSceneQuaternionInterpolationRotationSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneQuaternionInterpolationRotationSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneQuaternionInterpolationRotationSystem;
	static GetDefaultObject(): MovieSceneQuaternionInterpolationRotationSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneQuaternionInterpolationRotationSystem;
	static C(Other: UObject | any): MovieSceneQuaternionInterpolationRotationSystem;
}

declare class MovieSceneSkeletalAnimationParams { 
	Animation: AnimSequenceBase;
	FirstLoopStartFrameOffset: FrameNumber;
	StartFrameOffset: FrameNumber;
	EndFrameOffset: FrameNumber;
	PlayRate: number;
	bReverse: boolean;
	SlotName: string;
	MirrorDataTable: MirrorDataTable;
	Weight: MovieSceneFloatChannel;
	bSkipAnimNotifiers: boolean;
	bForceCustomMode: boolean;
	StartOffset: number;
	EndOffset: number;
	clone() : MovieSceneSkeletalAnimationParams;
	static C(Other: UObject | any): MovieSceneSkeletalAnimationParams;
}

declare class MovieSceneSkeletalAnimationSection extends MovieSceneSection { 
	Params: MovieSceneSkeletalAnimationParams;
	AnimSequence: AnimSequence;
	Animation: AnimSequenceBase;
	StartOffset: number;
	EndOffset: number;
	PlayRate: number;
	bReverse: boolean;
	SlotName: string;
	StartLocationOffset: Vector;
	StartRotationOffset: Rotator;
	bMatchWithPrevious: boolean;
	MatchedBoneName: string;
	MatchedLocationOffset: Vector;
	MatchedRotationOffset: Rotator;
	bMatchTranslation: boolean;
	bMatchIncludeZHeight: boolean;
	bMatchRotationYaw: boolean;
	bMatchRotationPitch: boolean;
	bMatchRotationRoll: boolean;
	bShowSkeleton: boolean;
	static Load(ResourceName: string): MovieSceneSkeletalAnimationSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSkeletalAnimationSection;
	static GetDefaultObject(): MovieSceneSkeletalAnimationSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSkeletalAnimationSection;
	static C(Other: UObject | any): MovieSceneSkeletalAnimationSection;
}

declare class MovieSceneSkeletalAnimRootMotionTrackParams { 
	clone() : MovieSceneSkeletalAnimRootMotionTrackParams;
	static C(Other: UObject | any): MovieSceneSkeletalAnimRootMotionTrackParams;
}

declare class MovieSceneSkeletalAnimationTrack extends MovieSceneNameableTrack { 
	AnimationSections: MovieSceneSection[];
	bUseLegacySectionIndexBlend: boolean;
	RootMotionParams: MovieSceneSkeletalAnimRootMotionTrackParams;
	bBlendFirstChildOfRoot: boolean;
	bShowRootMotionTrail: boolean;
	static Load(ResourceName: string): MovieSceneSkeletalAnimationTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSkeletalAnimationTrack;
	static GetDefaultObject(): MovieSceneSkeletalAnimationTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSkeletalAnimationTrack;
	static C(Other: UObject | any): MovieSceneSkeletalAnimationTrack;
}

declare class MovieSceneSlomoSection extends MovieSceneSection { 
	FloatCurve: MovieSceneFloatChannel;
	static Load(ResourceName: string): MovieSceneSlomoSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSlomoSection;
	static GetDefaultObject(): MovieSceneSlomoSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSlomoSection;
	static C(Other: UObject | any): MovieSceneSlomoSection;
}

declare class MovieSceneSlomoTrack extends MovieSceneFloatTrack { 
	static Load(ResourceName: string): MovieSceneSlomoTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneSlomoTrack;
	static GetDefaultObject(): MovieSceneSlomoTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSlomoTrack;
	static C(Other: UObject | any): MovieSceneSlomoTrack;
}

declare class MovieSceneStringChannel extends MovieSceneChannel { 
	Times: FrameNumber[];
	Values: string[];
	DefaultValue: string;
	bHasDefaultValue: boolean;
	clone() : MovieSceneStringChannel;
	static C(Other: UObject | any): MovieSceneStringChannel;
}

declare class MovieSceneStringSection extends MovieSceneSection { 
	StringCurve: MovieSceneStringChannel;
	static Load(ResourceName: string): MovieSceneStringSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneStringSection;
	static GetDefaultObject(): MovieSceneStringSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneStringSection;
	static C(Other: UObject | any): MovieSceneStringSection;
}

declare class MovieSceneStringTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneStringTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneStringTrack;
	static GetDefaultObject(): MovieSceneStringTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneStringTrack;
	static C(Other: UObject | any): MovieSceneStringTrack;
}

declare class MovieSceneTransformOriginSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): MovieSceneTransformOriginSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneTransformOriginSystem;
	static GetDefaultObject(): MovieSceneTransformOriginSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTransformOriginSystem;
	static C(Other: UObject | any): MovieSceneTransformOriginSystem;
}

declare class MovieSceneTransformTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneTransformTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneTransformTrack;
	static GetDefaultObject(): MovieSceneTransformTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTransformTrack;
	static C(Other: UObject | any): MovieSceneTransformTrack;
}

declare class MovieSceneFloatVectorPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneFloatVectorPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFloatVectorPropertySystem;
	static GetDefaultObject(): MovieSceneFloatVectorPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFloatVectorPropertySystem;
	static C(Other: UObject | any): MovieSceneFloatVectorPropertySystem;
}

declare class MovieSceneDoubleVectorPropertySystem extends MovieScenePropertySystem { 
	static Load(ResourceName: string): MovieSceneDoubleVectorPropertySystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneDoubleVectorPropertySystem;
	static GetDefaultObject(): MovieSceneDoubleVectorPropertySystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneDoubleVectorPropertySystem;
	static C(Other: UObject | any): MovieSceneDoubleVectorPropertySystem;
}

declare class MovieSceneFloatVectorSection extends MovieSceneSection { 
	Curves: MovieSceneFloatChannel;
	ChannelsUsed: number;
	static Load(ResourceName: string): MovieSceneFloatVectorSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFloatVectorSection;
	static GetDefaultObject(): MovieSceneFloatVectorSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFloatVectorSection;
	static C(Other: UObject | any): MovieSceneFloatVectorSection;
}

declare class MovieSceneDoubleVectorSection extends MovieSceneSection { 
	Curves: MovieSceneDoubleChannel;
	ChannelsUsed: number;
	static Load(ResourceName: string): MovieSceneDoubleVectorSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneDoubleVectorSection;
	static GetDefaultObject(): MovieSceneDoubleVectorSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneDoubleVectorSection;
	static C(Other: UObject | any): MovieSceneDoubleVectorSection;
}

declare class MovieSceneFloatVectorTrack extends MovieScenePropertyTrack { 
	NumChannelsUsed: number;
	static Load(ResourceName: string): MovieSceneFloatVectorTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneFloatVectorTrack;
	static GetDefaultObject(): MovieSceneFloatVectorTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFloatVectorTrack;
	static C(Other: UObject | any): MovieSceneFloatVectorTrack;
	GetNumChannelsUsed(): number;
	SetNumChannelsUsed(InNumChannelsUsed: number): void;
	static GetNumChannelsUsed(Track: MovieSceneFloatVectorTrack): number;
	static SetNumChannelsUsed(Track: MovieSceneFloatVectorTrack,InNumChannelsUsed: number): void;
}

declare class MovieSceneDoubleVectorTrack extends MovieScenePropertyTrack { 
	NumChannelsUsed: number;
	static Load(ResourceName: string): MovieSceneDoubleVectorTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneDoubleVectorTrack;
	static GetDefaultObject(): MovieSceneDoubleVectorTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneDoubleVectorTrack;
	static C(Other: UObject | any): MovieSceneDoubleVectorTrack;
	GetNumChannelsUsed(): number;
	SetNumChannelsUsed(InNumChannelsUsed: number): void;
	static GetNumChannelsUsed(Track: MovieSceneDoubleVectorTrack): number;
	static SetNumChannelsUsed(Track: MovieSceneDoubleVectorTrack,InNumChannelsUsed: number): void;
}

declare class MovieSceneVisibilityTrack extends MovieSceneBoolTrack { 
	static Load(ResourceName: string): MovieSceneVisibilityTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneVisibilityTrack;
	static GetDefaultObject(): MovieSceneVisibilityTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneVisibilityTrack;
	static C(Other: UObject | any): MovieSceneVisibilityTrack;
}

declare class MovieSceneHierarchicalEasingInstantiatorSystem extends MovieSceneEntityInstantiatorSystem { 
	static Load(ResourceName: string): MovieSceneHierarchicalEasingInstantiatorSystem;
	static Find(Outer: UObject, ResourceName: string): MovieSceneHierarchicalEasingInstantiatorSystem;
	static GetDefaultObject(): MovieSceneHierarchicalEasingInstantiatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneHierarchicalEasingInstantiatorSystem;
	static C(Other: UObject | any): MovieSceneHierarchicalEasingInstantiatorSystem;
}

declare class WeightAndEasingEvaluatorSystem extends MovieSceneEntitySystem { 
	static Load(ResourceName: string): WeightAndEasingEvaluatorSystem;
	static Find(Outer: UObject, ResourceName: string): WeightAndEasingEvaluatorSystem;
	static GetDefaultObject(): WeightAndEasingEvaluatorSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WeightAndEasingEvaluatorSystem;
	static C(Other: UObject | any): WeightAndEasingEvaluatorSystem;
}

declare class AnimSequenceLevelSequenceLink extends AssetUserData { 
	SkelTrackGuid: Guid;
	PathToLevelSequence: SoftObjectPath;
	static Load(ResourceName: string): AnimSequenceLevelSequenceLink;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceLevelSequenceLink;
	static GetDefaultObject(): AnimSequenceLevelSequenceLink;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceLevelSequenceLink;
	static C(Other: UObject | any): AnimSequenceLevelSequenceLink;
}

declare class DefaultLevelSequenceInstanceData extends UObject { 
	TransformOriginActor: Actor;
	TransformOrigin: Transform;
	static Load(ResourceName: string): DefaultLevelSequenceInstanceData;
	static Find(Outer: UObject, ResourceName: string): DefaultLevelSequenceInstanceData;
	static GetDefaultObject(): DefaultLevelSequenceInstanceData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultLevelSequenceInstanceData;
	static C(Other: UObject | any): DefaultLevelSequenceInstanceData;
}

declare class LevelSequenceMetaData extends Interface { 
	static Load(ResourceName: string): LevelSequenceMetaData;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceMetaData;
	static GetDefaultObject(): LevelSequenceMetaData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceMetaData;
	static C(Other: UObject | any): LevelSequenceMetaData;
}

declare class LevelSequencePlayer extends MovieSceneSequencePlayer { 
	OnCameraCut: UnrealEngineMulticastDelegate<(CameraComponent: CameraComponent) => void>;
	static Load(ResourceName: string): LevelSequencePlayer;
	static Find(Outer: UObject, ResourceName: string): LevelSequencePlayer;
	static GetDefaultObject(): LevelSequencePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequencePlayer;
	GetActiveCameraComponent(): CameraComponent;
	static CreateLevelSequencePlayer(WorldContextObject: UObject,LevelSequence: LevelSequence,Settings: MovieSceneSequencePlaybackSettings,OutActor?: LevelSequenceActor): {OutActor: LevelSequenceActor, $: LevelSequencePlayer};
	static C(Other: UObject | any): LevelSequencePlayer;
}

declare class LevelSequenceCameraSettings { 
	bOverrideAspectRatioAxisConstraint: boolean;
	AspectRatioAxisConstraint: EAspectRatioAxisConstraint;
	clone() : LevelSequenceCameraSettings;
	static C(Other: UObject | any): LevelSequenceCameraSettings;
}

declare class LevelSequencePlayerSnapshot { 
	MasterName: string;
	MasterTime: QualifiedFrameTime;
	SourceTime: QualifiedFrameTime;
	CurrentShotName: string;
	CurrentShotLocalTime: QualifiedFrameTime;
	CurrentShotSourceTime: QualifiedFrameTime;
	SourceTimecode: string;
	CameraComponent: CameraComponent;
	ActiveShot: LevelSequence;
	ShotID: MovieSceneSequenceID;
	clone() : LevelSequencePlayerSnapshot;
	static C(Other: UObject | any): LevelSequencePlayerSnapshot;
}

declare class LevelSequenceBurnIn extends UserWidget { 
	FrameInformation: LevelSequencePlayerSnapshot;
	LevelSequenceActor: LevelSequenceActor;
	static Load(ResourceName: string): LevelSequenceBurnIn;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceBurnIn;
	static GetDefaultObject(): LevelSequenceBurnIn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceBurnIn;
	SetSettings(InSettings: UObject): void;
	GetSettingsClass(): UnrealEngineClass;
	static C(Other: UObject | any): LevelSequenceBurnIn;
}

declare class LevelSequenceActor extends Actor { 
	PlaybackSettings: MovieSceneSequencePlaybackSettings;
	SequencePlayer: LevelSequencePlayer;
	LevelSequenceAsset: LevelSequence;
	LevelSequence: SoftObjectPath;
	CameraSettings: LevelSequenceCameraSettings;
	BurnInOptions: LevelSequenceBurnInOptions;
	BindingOverrides: MovieSceneBindingOverrides;
	bAutoPlay: boolean;
	bOverrideInstanceData: boolean;
	bReplicatePlayback: boolean;
	DefaultInstanceData: UObject;
	BurnInInstance: LevelSequenceBurnIn;
	bShowBurnin: boolean;
	static GetDefaultObject(): LevelSequenceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceActor;
	ShowBurnin(): void;
	SetSequence(InSequence: LevelSequence): void;
	SetReplicatePlayback(ReplicatePlayback: boolean): void;
	SetBindingByTag(BindingTag: string,Actors: Actor[],bAllowBindingsFromAsset: boolean): void;
	SetBinding(Binding: MovieSceneObjectBindingID,Actors: Actor[],bAllowBindingsFromAsset: boolean): void;
	ResetBindings(): void;
	ResetBinding(Binding: MovieSceneObjectBindingID): void;
	RemoveBindingByTag(Tag: string,Actor: Actor): void;
	RemoveBinding(Binding: MovieSceneObjectBindingID,Actor: Actor): void;
	LoadSequence(): LevelSequence;
	HideBurnin(): void;
	GetSequencePlayer(): LevelSequencePlayer;
	GetSequence(): LevelSequence;
	FindNamedBindings(Tag: string): MovieSceneObjectBindingID[];
	FindNamedBinding(Tag: string): MovieSceneObjectBindingID;
	AddBindingByTag(BindingTag: string,Actor: Actor,bAllowBindingsFromAsset: boolean): void;
	AddBinding(Binding: MovieSceneObjectBindingID,Actor: Actor,bAllowBindingsFromAsset: boolean): void;
	static C(Other: UObject | any): LevelSequenceActor;
}

declare class LevelSequenceAnimSequenceLinkItem { 
	SkelTrackGuid: Guid;
	PathToAnimSequence: SoftObjectPath;
	bExportTransforms: boolean;
	bExportMorphTargets: boolean;
	bExportAttributeCurves: boolean;
	bExportMaterialCurves: boolean;
	bRecordInWorldSpace: boolean;
	clone() : LevelSequenceAnimSequenceLinkItem;
	static C(Other: UObject | any): LevelSequenceAnimSequenceLinkItem;
}

declare class LevelSequenceAnimSequenceLink extends AssetUserData { 
	AnimSequenceLinks: LevelSequenceAnimSequenceLinkItem[];
	static Load(ResourceName: string): LevelSequenceAnimSequenceLink;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceAnimSequenceLink;
	static GetDefaultObject(): LevelSequenceAnimSequenceLink;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceAnimSequenceLink;
	static C(Other: UObject | any): LevelSequenceAnimSequenceLink;
}

declare class LevelSequenceDirector extends UObject { 
	Player: LevelSequencePlayer;
	SubSequenceID: number;
	MovieScenePlayerIndex: number;
	static Load(ResourceName: string): LevelSequenceDirector;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceDirector;
	static GetDefaultObject(): LevelSequenceDirector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceDirector;
	OnCreated(): void;
	GetSequence(): MovieSceneSequence;
	GetBoundObjects(ObjectBinding: MovieSceneObjectBindingID): UObject[];
	GetBoundObject(ObjectBinding: MovieSceneObjectBindingID): UObject;
	GetBoundActors(ObjectBinding: MovieSceneObjectBindingID): Actor[];
	GetBoundActor(ObjectBinding: MovieSceneObjectBindingID): Actor;
	static C(Other: UObject | any): LevelSequenceDirector;
}

declare class LegacyLevelSequenceDirectorBlueprint extends Blueprint { 
	static Load(ResourceName: string): LegacyLevelSequenceDirectorBlueprint;
	static Find(Outer: UObject, ResourceName: string): LegacyLevelSequenceDirectorBlueprint;
	static GetDefaultObject(): LegacyLevelSequenceDirectorBlueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LegacyLevelSequenceDirectorBlueprint;
	static C(Other: UObject | any): LegacyLevelSequenceDirectorBlueprint;
}

declare class LevelSequenceProjectSettings extends DeveloperSettings { 
	bDefaultLockEngineToDisplayRate: boolean;
	DefaultDisplayRate: string;
	DefaultTickResolution: string;
	DefaultClockSource: EUpdateClockSource;
	static Load(ResourceName: string): LevelSequenceProjectSettings;
	static Find(Outer: UObject, ResourceName: string): LevelSequenceProjectSettings;
	static GetDefaultObject(): LevelSequenceProjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceProjectSettings;
	static C(Other: UObject | any): LevelSequenceProjectSettings;
}

declare class LevelSequenceMediaController extends Actor { 
	Sequence: LevelSequenceActor;
	MediaComponent: MediaComponent;
	ServerStartTimeSeconds: number;
	static GetDefaultObject(): LevelSequenceMediaController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceMediaController;
	SynchronizeToServer(DesyncThresholdSeconds: number): void;
	Play(): void;
	OnRep_ServerStartTimeSeconds(): void;
	GetSequence(): LevelSequenceActor;
	GetMediaComponent(): MediaComponent;
	static C(Other: UObject | any): LevelSequenceMediaController;
}

declare class EditorKeyboardShortcutSettings extends DeveloperSettings { 
	static Load(ResourceName: string): EditorKeyboardShortcutSettings;
	static Find(Outer: UObject, ResourceName: string): EditorKeyboardShortcutSettings;
	static GetDefaultObject(): EditorKeyboardShortcutSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorKeyboardShortcutSettings;
	static C(Other: UObject | any): EditorKeyboardShortcutSettings;
}

declare class TextureImportSettings extends DeveloperSettings { 
	AutoVTSize: number;
	static Load(ResourceName: string): TextureImportSettings;
	static Find(Outer: UObject, ResourceName: string): TextureImportSettings;
	static GetDefaultObject(): TextureImportSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureImportSettings;
	static C(Other: UObject | any): TextureImportSettings;
}

declare type EMeshPaintColorViewMode = 'Normal' | 'RGB' | 'Alpha' | 'Red' | 'Green' | 'Blue' | 'EMeshPaintColorViewMode_MAX';
declare var EMeshPaintColorViewMode : { Normal:'Normal',RGB:'RGB',Alpha:'Alpha',Red:'Red',Green:'Green',Blue:'Blue',EMeshPaintColorViewMode_MAX:'EMeshPaintColorViewMode_MAX', };
declare class PaintBrushSettings extends UObject { 
	BrushRadius: number;
	BrushStrength: number;
	BrushFalloffAmount: number;
	bEnableFlow: boolean;
	bOnlyFrontFacingTriangles: boolean;
	ColorViewMode: EMeshPaintColorViewMode;
	static Load(ResourceName: string): PaintBrushSettings;
	static Find(Outer: UObject, ResourceName: string): PaintBrushSettings;
	static GetDefaultObject(): PaintBrushSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaintBrushSettings;
	static C(Other: UObject | any): PaintBrushSettings;
}

declare class MeshPaintSettings extends UObject { 
	VertexPreviewSize: number;
	static Load(ResourceName: string): MeshPaintSettings;
	static Find(Outer: UObject, ResourceName: string): MeshPaintSettings;
	static GetDefaultObject(): MeshPaintSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshPaintSettings;
	static C(Other: UObject | any): MeshPaintSettings;
}

declare class VertexColorImportOptions extends UObject { 
	UVIndex: number;
	LODIndex: number;
	bRed: boolean;
	bBlue: boolean;
	bGreen: boolean;
	bAlpha: boolean;
	bImportToInstance: boolean;
	bCanImportToInstance: boolean;
	static Load(ResourceName: string): VertexColorImportOptions;
	static Find(Outer: UObject, ResourceName: string): VertexColorImportOptions;
	static GetDefaultObject(): VertexColorImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VertexColorImportOptions;
	static C(Other: UObject | any): VertexColorImportOptions;
}

declare class ActorFactory extends UObject { 
	DisplayName: string;
	MenuPriority: number;
	NewActorClassName: string;
	NewActorClass: UnrealEngineClass;
	bShowInEditorQuickMenu: boolean;
	bUseSurfaceOrientation: boolean;
	bUsePlacementExtent: boolean;
	SpawnPositionOffset: Vector;
	static Load(ResourceName: string): ActorFactory;
	static Find(Outer: UObject, ResourceName: string): ActorFactory;
	static GetDefaultObject(): ActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactory;
	static C(Other: UObject | any): ActorFactory;
}

declare class ActorFactoryVolume extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryVolume;
	static GetDefaultObject(): ActorFactoryVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryVolume;
	static C(Other: UObject | any): ActorFactoryVolume;
}

declare class ActorFactoryBoxVolume extends ActorFactoryVolume { 
	static Load(ResourceName: string): ActorFactoryBoxVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBoxVolume;
	static GetDefaultObject(): ActorFactoryBoxVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBoxVolume;
	static C(Other: UObject | any): ActorFactoryBoxVolume;
}

declare class ActorFactoryProceduralFoliage extends ActorFactoryBoxVolume { 
	static Load(ResourceName: string): ActorFactoryProceduralFoliage;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryProceduralFoliage;
	static GetDefaultObject(): ActorFactoryProceduralFoliage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryProceduralFoliage;
	static C(Other: UObject | any): ActorFactoryProceduralFoliage;
}

declare class FoliageType_InstancedStaticMeshFactory extends Factory { 
	static Load(ResourceName: string): FoliageType_InstancedStaticMeshFactory;
	static Find(Outer: UObject, ResourceName: string): FoliageType_InstancedStaticMeshFactory;
	static GetDefaultObject(): FoliageType_InstancedStaticMeshFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType_InstancedStaticMeshFactory;
	static C(Other: UObject | any): FoliageType_InstancedStaticMeshFactory;
}

declare class FoliageType_ActorFactory extends Factory { 
	static Load(ResourceName: string): FoliageType_ActorFactory;
	static Find(Outer: UObject, ResourceName: string): FoliageType_ActorFactory;
	static GetDefaultObject(): FoliageType_ActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType_ActorFactory;
	static C(Other: UObject | any): FoliageType_ActorFactory;
}

declare class BlueprintThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): BlueprintThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): BlueprintThumbnailRenderer;
	static GetDefaultObject(): BlueprintThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintThumbnailRenderer;
	static C(Other: UObject | any): BlueprintThumbnailRenderer;
}

declare class FoliageType_ActorThumbnailRenderer extends BlueprintThumbnailRenderer { 
	static Load(ResourceName: string): FoliageType_ActorThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): FoliageType_ActorThumbnailRenderer;
	static GetDefaultObject(): FoliageType_ActorThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType_ActorThumbnailRenderer;
	static C(Other: UObject | any): FoliageType_ActorThumbnailRenderer;
}

declare class FoliageType_ISMThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): FoliageType_ISMThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): FoliageType_ISMThumbnailRenderer;
	static GetDefaultObject(): FoliageType_ISMThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType_ISMThumbnailRenderer;
	static C(Other: UObject | any): FoliageType_ISMThumbnailRenderer;
}

declare class LandscapeGrassTypeFactory extends Factory { 
	static Load(ResourceName: string): LandscapeGrassTypeFactory;
	static Find(Outer: UObject, ResourceName: string): LandscapeGrassTypeFactory;
	static GetDefaultObject(): LandscapeGrassTypeFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGrassTypeFactory;
	static C(Other: UObject | any): LandscapeGrassTypeFactory;
}

declare class ProceduralFoliageEditorLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): ProceduralFoliageEditorLibrary;
	static Find(Outer: UObject, ResourceName: string): ProceduralFoliageEditorLibrary;
	static GetDefaultObject(): ProceduralFoliageEditorLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageEditorLibrary;
	static ResimulateProceduralFoliageVolumes(ProceduralFoliageVolumes: ProceduralFoliageVolume[]): void;
	static ResimulateProceduralFoliageComponents(ProceduralFoliageComponents: ProceduralFoliageComponent[]): void;
	static ClearProceduralFoliageVolumes(ProceduralFoliageVolumes: ProceduralFoliageVolume[]): void;
	static ClearProceduralFoliageComponents(ProceduralFoliageComponents: ProceduralFoliageComponent[]): void;
	static C(Other: UObject | any): ProceduralFoliageEditorLibrary;
}

declare class ProceduralFoliageSpawnerFactory extends Factory { 
	static Load(ResourceName: string): ProceduralFoliageSpawnerFactory;
	static Find(Outer: UObject, ResourceName: string): ProceduralFoliageSpawnerFactory;
	static GetDefaultObject(): ProceduralFoliageSpawnerFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralFoliageSpawnerFactory;
	static C(Other: UObject | any): ProceduralFoliageSpawnerFactory;
}

declare class VREditorAssetContainer extends DataAsset { 
	DockableWindowCloseSound: SoundBase;
	DockableWindowOpenSound: SoundBase;
	DockableWindowDropSound: SoundBase;
	DockableWindowDragSound: SoundBase;
	DropFromContentBrowserSound: SoundBase;
	RadialMenuOpenSound: SoundBase;
	RadialMenuCloseSound: SoundBase;
	TeleportSound: SoundBase;
	ButtonPressSound: SoundCue;
	AutoScaleSound: SoundBase;
	GenericHMDMesh: StaticMesh;
	PlaneMesh: StaticMesh;
	CylinderMesh: StaticMesh;
	LaserPointerStartMesh: StaticMesh;
	LaserPointerMesh: StaticMesh;
	LaserPointerEndMesh: StaticMesh;
	LaserPointerHoverMesh: StaticMesh;
	VivePreControllerMesh: StaticMesh;
	OculusControllerMesh: StaticMesh;
	GenericControllerMesh: StaticMesh;
	TeleportRootMesh: StaticMesh;
	WindowMesh: StaticMesh;
	WindowSelectionBarMesh: StaticMesh;
	WindowCloseButtonMesh: StaticMesh;
	RadialMenuMainMesh: StaticMesh;
	RadialMenuPointerMesh: StaticMesh;
	PointerCursorMesh: StaticMesh;
	LineSegmentCylinderMesh: StaticMesh;
	JointSphereMesh: StaticMesh;
	DockingButtonMesh: StaticMesh;
	GridMaterial: MaterialInterface;
	LaserPointerMaterial: MaterialInterface;
	LaserPointerTranslucentMaterial: MaterialInterface;
	WorldMovementPostProcessMaterial: Material;
	TextMaterial: MaterialInterface;
	VivePreControllerMaterial: MaterialInterface;
	OculusControllerMaterial: MaterialInterface;
	TeleportMaterial: MaterialInterface;
	WindowMaterial: MaterialInterface;
	WindowTranslucentMaterial: MaterialInterface;
	LineMaterial: Material;
	TranslucentTextMaterial: MaterialInterface;
	TextFont: Font;
	static Load(ResourceName: string): VREditorAssetContainer;
	static Find(Outer: UObject, ResourceName: string): VREditorAssetContainer;
	static GetDefaultObject(): VREditorAssetContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAssetContainer;
	static C(Other: UObject | any): VREditorAssetContainer;
}

declare class PostProcessComponent extends SceneComponent { 
	Settings: PostProcessSettings;
	Priority: number;
	BlendRadius: number;
	BlendWeight: number;
	bEnabled: boolean;
	bUnbound: boolean;
	static Load(ResourceName: string): PostProcessComponent;
	static Find(Outer: UObject, ResourceName: string): PostProcessComponent;
	static GetDefaultObject(): PostProcessComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PostProcessComponent;
	static C(Other: UObject | any): PostProcessComponent;
}

declare class VREditorAvatarActor extends Actor { 
	HeadMeshComponent: StaticMeshComponent;
	WorldMovementGridMeshComponent: StaticMeshComponent;
	WorldMovementGridMID: MaterialInstanceDynamic;
	WorldMovementGridOpacity: number;
	bIsDrawingWorldMovementPostProcess: boolean;
	WorldMovementPostProcessMaterial: MaterialInstanceDynamic;
	ScaleProgressMeshComponent: StaticMeshComponent;
	CurrentScaleProgressMeshComponent: StaticMeshComponent;
	UserScaleIndicatorText: TextRenderComponent;
	FixedUserScaleMID: MaterialInstanceDynamic;
	TranslucentFixedUserScaleMID: MaterialInstanceDynamic;
	CurrentUserScaleMID: MaterialInstanceDynamic;
	TranslucentCurrentUserScaleMID: MaterialInstanceDynamic;
	PostProcessComponent: PostProcessComponent;
	VRMode: VREditorMode;
	static GetDefaultObject(): VREditorAvatarActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAvatarActor;
	static C(Other: UObject | any): VREditorAvatarActor;
}

declare class VREditorBaseActor extends Actor { 
	VRMode: VREditorMode;
	static GetDefaultObject(): VREditorBaseActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseActor;
	static C(Other: UObject | any): VREditorBaseActor;
}

declare class VREditorFloatingUICreationContext { 
	WidgetClass: UnrealEngineClass;
	PanelID: string;
	ParentActor: Actor;
	PanelSpawnOffset: Transform;
	PanelSize: Vector2D;
	PanelMesh: StaticMesh;
	EditorUISize: number;
	bHideWindowHandles: boolean;
	bMaskOutWidgetBackground: boolean;
	bNoCloseButton: boolean;
	clone() : VREditorFloatingUICreationContext;
	static C(Other: UObject | any): VREditorFloatingUICreationContext;
}

declare type EVREditorWidgetDrawingPolicy = 'Always' | 'Hovering' | 'EVREditorWidgetDrawingPolicy_MAX';
declare var EVREditorWidgetDrawingPolicy : { Always:'Always',Hovering:'Hovering',EVREditorWidgetDrawingPolicy_MAX:'EVREditorWidgetDrawingPolicy_MAX', };
declare class VREditorWidgetComponent extends WidgetComponent { 
	DrawingPolicy: EVREditorWidgetDrawingPolicy;
	bIsHovering: boolean;
	bHasEverDrawn: boolean;
	static Load(ResourceName: string): VREditorWidgetComponent;
	static Find(Outer: UObject, ResourceName: string): VREditorWidgetComponent;
	static GetDefaultObject(): VREditorWidgetComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorWidgetComponent;
	static C(Other: UObject | any): VREditorWidgetComponent;
}

declare class VREditorFloatingUI extends VREditorBaseActor { 
	CreationContext: VREditorFloatingUICreationContext;
	UserWidget: UserWidget;
	WidgetComponent: VREditorWidgetComponent;
	WindowMeshComponent: StaticMeshComponent;
	UserWidgetClass: UnrealEngineClass;
	static GetDefaultObject(): VREditorFloatingUI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorFloatingUI;
	static C(Other: UObject | any): VREditorFloatingUI;
}

declare class VREditorRadialFloatingUI extends VREditorBaseActor { 
	WidgetComponents: VREditorWidgetComponent[];
	WindowMeshComponent: StaticMeshComponent;
	ArrowMeshComponent: StaticMeshComponent;
	CentralWidgetComponent: VREditorWidgetComponent;
	static GetDefaultObject(): VREditorRadialFloatingUI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorRadialFloatingUI;
	static C(Other: UObject | any): VREditorRadialFloatingUI;
}

declare class VREditorDockableWindow extends VREditorFloatingUI { 
	DockButtonMeshComponent: StaticMeshComponent;
	SelectionBarMeshComponent: StaticMeshComponent;
	CloseButtonMeshComponent: StaticMeshComponent;
	DockButtonMID: MaterialInstanceDynamic;
	SelectionBarMID: MaterialInstanceDynamic;
	SelectionBarTranslucentMID: MaterialInstanceDynamic;
	CloseButtonMID: MaterialInstanceDynamic;
	CloseButtonTranslucentMID: MaterialInstanceDynamic;
	DragOperationComponent: ViewportDragOperationComponent;
	static GetDefaultObject(): VREditorDockableWindow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorDockableWindow;
	static C(Other: UObject | any): VREditorDockableWindow;
}

declare class TextureLightProfile extends Texture2D { 
	Brightness: number;
	TextureMultiplier: number;
	static Load(ResourceName: string): TextureLightProfile;
	static Find(Outer: UObject, ResourceName: string): TextureLightProfile;
	static GetDefaultObject(): TextureLightProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureLightProfile;
	static C(Other: UObject | any): TextureLightProfile;
}

declare class LightComponent extends LightComponentBase { 
	Temperature: number;
	MaxDrawDistance: number;
	MaxDistanceFadeRange: number;
	bUseTemperature: boolean;
	ShadowMapChannel: number;
	MinRoughness: number;
	SpecularScale: number;
	ShadowResolutionScale: number;
	ShadowBias: number;
	ShadowSlopeBias: number;
	ShadowSharpen: number;
	ContactShadowLength: number;
	ContactShadowLengthInWS: boolean;
	InverseSquaredFalloff: boolean;
	CastTranslucentShadows: boolean;
	bCastShadowsFromCinematicObjectsOnly: boolean;
	bAffectDynamicIndirectLighting: boolean;
	bForceCachedShadowsForMovablePrimitives: boolean;
	LightingChannels: LightingChannels;
	LightFunctionMaterial: MaterialInterface;
	LightFunctionScale: Vector;
	IESTexture: TextureLightProfile;
	bUseIESBrightness: boolean;
	IESBrightnessScale: number;
	LightFunctionFadeDistance: number;
	DisabledBrightness: number;
	bEnableLightShaftBloom: boolean;
	BloomScale: number;
	BloomThreshold: number;
	BloomMaxBrightness: number;
	BloomTint: Color;
	bUseRayTracedDistanceFieldShadows: boolean;
	RayStartOffsetDepthScale: number;
	static Load(ResourceName: string): LightComponent;
	static Find(Outer: UObject, ResourceName: string): LightComponent;
	static GetDefaultObject(): LightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponent;
	SetVolumetricScatteringIntensity(NewIntensity: number): void;
	SetUseTemperature(bNewValue: boolean): void;
	SetUseIESBrightness(bNewValue: boolean): void;
	SetTransmission(bNewValue: boolean): void;
	SetTemperature(NewTemperature: number): void;
	SetSpecularScale(NewValue: number): void;
	SetShadowSlopeBias(NewValue: number): void;
	SetShadowBias(NewValue: number): void;
	SetLightingChannels(bChannel0: boolean,bChannel1: boolean,bChannel2: boolean): void;
	SetLightFunctionScale(NewLightFunctionScale: Vector): void;
	SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface): void;
	SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: number): void;
	SetLightFunctionDisabledBrightness(NewValue: number): void;
	SetLightColor(NewLightColor: LinearColor,bSRGB: boolean): void;
	SetIntensity(NewIntensity: number): void;
	SetIndirectLightingIntensity(NewIntensity: number): void;
	SetIESTexture(NewValue: TextureLightProfile): void;
	SetIESBrightnessScale(NewValue: number): void;
	SetForceCachedShadowsForMovablePrimitives(bNewValue: boolean): void;
	SetEnableLightShaftBloom(bNewValue: boolean): void;
	SetBloomTint(NewValue: Color): void;
	SetBloomThreshold(NewValue: number): void;
	SetBloomScale(NewValue: number): void;
	SetBloomMaxBrightness(NewValue: number): void;
	SetAffectTranslucentLighting(bNewValue: boolean): void;
	SetAffectDynamicIndirectLighting(bNewValue: boolean): void;
	static C(Other: UObject | any): LightComponent;
}

declare type ELightUnits = 'Unitless' | 'Candelas' | 'Lumens' | 'ELightUnits_MAX';
declare var ELightUnits : { Unitless:'Unitless',Candelas:'Candelas',Lumens:'Lumens',ELightUnits_MAX:'ELightUnits_MAX', };
declare class LightmassLightSettings { 
	IndirectLightingSaturation: number;
	ShadowExponent: number;
	bUseAreaShadowsForStationaryLight: boolean;
	clone() : LightmassLightSettings;
	static C(Other: UObject | any): LightmassLightSettings;
}

declare class LightmassPointLightSettings extends LightmassLightSettings { 
	clone() : LightmassPointLightSettings;
	static C(Other: UObject | any): LightmassPointLightSettings;
}

declare class LocalLightComponent extends LightComponent { 
	IntensityUnits: ELightUnits;
	Radius: number;
	AttenuationRadius: number;
	LightmassSettings: LightmassPointLightSettings;
	static Load(ResourceName: string): LocalLightComponent;
	static Find(Outer: UObject, ResourceName: string): LocalLightComponent;
	static GetDefaultObject(): LocalLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalLightComponent;
	SetIntensityUnits(NewIntensityUnits: ELightUnits): void;
	SetAttenuationRadius(NewRadius: number): void;
	static GetUnitsConversionFactor(SrcUnits: ELightUnits,TargetUnits: ELightUnits,CosHalfConeAngle: number): number;
	static C(Other: UObject | any): LocalLightComponent;
}

declare class PointLightComponent extends LocalLightComponent { 
	bUseInverseSquaredFalloff: boolean;
	LightFalloffExponent: number;
	SourceRadius: number;
	SoftSourceRadius: number;
	SourceLength: number;
	static Load(ResourceName: string): PointLightComponent;
	static Find(Outer: UObject, ResourceName: string): PointLightComponent;
	static GetDefaultObject(): PointLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PointLightComponent;
	SetSourceRadius(bNewValue: number): void;
	SetSourceLength(NewValue: number): void;
	SetSoftSourceRadius(bNewValue: number): void;
	SetLightFalloffExponent(NewLightFalloffExponent: number): void;
	static C(Other: UObject | any): PointLightComponent;
}

declare type EControllerType = 'Laser' | 'AssistingLaser' | 'UI' | 'Navigation' | 'Unknown' | 'EControllerType_MAX';
declare var EControllerType : { Laser:'Laser',AssistingLaser:'AssistingLaser',UI:'UI',Navigation:'Navigation',Unknown:'Unknown',EControllerType_MAX:'EControllerType_MAX', };
declare class VREditorTeleporter extends Actor { 
	VRMode: VREditorMode;
	TeleportDirectionMeshComponent: StaticMeshComponent;
	HMDMeshComponent: StaticMeshComponent;
	LeftMotionControllerMeshComponent: StaticMeshComponent;
	RightMotionControllerMeshComponent: StaticMeshComponent;
	TeleportMID: MaterialInstanceDynamic;
	InteractorTryingTeleport: ViewportInteractor;
	static GetDefaultObject(): VREditorTeleporter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorTeleporter;
	TeleportDone(): void;
	StopAiming(): void;
	StartTeleport(): void;
	StartAiming(Interactor: ViewportInteractor): void;
	Shutdown(): void;
	SetVisibility(bVisible: boolean): void;
	SetColor(Color: LinearColor): void;
	IsTeleporting(): boolean;
	IsAiming(): boolean;
	Init(InMode: VREditorMode): void;
	GetVRMode(): VREditorMode;
	GetSlideDelta(Interactor: VREditorInteractor,Axis: boolean): number;
	GetInteractorTryingTeleport(): ViewportInteractor;
	DoTeleport(): void;
	static C(Other: UObject | any): VREditorTeleporter;
}

declare class VREditorInteractor extends ViewportInteractor { 
	bIsUndoRedoSwipeEnabled: boolean;
	MotionControllerComponent: MotionControllerComponent;
	HandMeshComponent: StaticMeshComponent;
	LaserSplineComponent: SplineComponent;
	LaserSplineMeshComponents: SplineMeshComponent[];
	LaserPointerMID: MaterialInstanceDynamic;
	TranslucentLaserPointerMID: MaterialInstanceDynamic;
	HoverMeshComponent: StaticMeshComponent;
	HoverPointLightComponent: PointLightComponent;
	HandMeshMID: MaterialInstanceDynamic;
	OwningAvatar: Actor;
	ControllerType: EControllerType;
	OverrideControllerType: EControllerType;
	ControllerMotionSource: string;
	VRMode: VREditorMode;
	static Load(ResourceName: string): VREditorInteractor;
	static Find(Outer: UObject, ResourceName: string): VREditorInteractor;
	static GetDefaultObject(): VREditorInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorInteractor;
	TryOverrideControllerType(InControllerType: EControllerType): boolean;
	SetupComponent(OwningActor: Actor): void;
	SetForceShowLaser(bInForceShow: boolean): void;
	SetForceLaserColor(InColor: LinearColor): void;
	SetControllerType(InControllerType: EControllerType): void;
	SetControllerHandSide(InControllerHandSide: string): void;
	ReplaceHandMeshComponent(NewMesh: StaticMesh): void;
	IsTouchingTrackpad(): boolean;
	IsHoveringOverUI(): boolean;
	IsClickingOnUI(): boolean;
	Init(InVRMode: VREditorMode): void;
	GetTrackpadPosition(): Vector2D;
	GetTeleportActor(): VREditorTeleporter;
	GetSlideDelta(): number;
	GetSelectAndMoveTriggerValue(): number;
	GetMotionControllerComponent(): MotionControllerComponent;
	GetLastTrackpadPosition(): Vector2D;
	GetLaserStart(): Vector;
	GetLaserEnd(): Vector;
	GetHMDDeviceType(): string;
	GetControllerType(): EControllerType;
	GetControllerSide(): EControllerHand;
	GetControllerHandSide(): string;
	static C(Other: UObject | any): VREditorInteractor;
}

declare class VRButton { 
	ButtonWidget: VREditorWidgetComponent;
	clone() : VRButton;
	static C(Other: UObject | any): VRButton;
}

declare class VRRadialMenuHandler extends UObject { 
	static Load(ResourceName: string): VRRadialMenuHandler;
	static Find(Outer: UObject, ResourceName: string): VRRadialMenuHandler;
	static GetDefaultObject(): VRRadialMenuHandler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRRadialMenuHandler;
	static C(Other: UObject | any): VRRadialMenuHandler;
}

declare class VREditorUISystem extends UObject { 
	VRMode: VREditorMode;
	FloatingUIs: any;
	PreviewWindowInfo: any;
	InfoDisplayPanel: VREditorFloatingUI;
	QuickRadialMenu: VREditorRadialFloatingUI;
	DraggingUI: VREditorDockableWindow;
	ColorPickerUI: VREditorDockableWindow;
	LaserInteractor: VREditorInteractor;
	UIInteractor: VREditorInteractor;
	VRButtons: VRButton[];
	RadialMenuHandler: VRRadialMenuHandler;
	static Load(ResourceName: string): VREditorUISystem;
	static Find(Outer: UObject, ResourceName: string): VREditorUISystem;
	static GetDefaultObject(): VREditorUISystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorUISystem;
	static C(Other: UObject | any): VREditorUISystem;
}

declare class VREditorPlacement extends UObject { 
	VRMode: VREditorMode;
	ViewportWorldInteraction: ViewportWorldInteraction;
	FloatingUIAssetDraggedFrom: WidgetComponent;
	PlacingMaterialOrTextureAsset: UObject;
	static Load(ResourceName: string): VREditorPlacement;
	static Find(Outer: UObject, ResourceName: string): VREditorPlacement;
	static GetDefaultObject(): VREditorPlacement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorPlacement;
	static C(Other: UObject | any): VREditorPlacement;
}

declare class VREditorMode extends EditorWorldExtension { 
	AvatarActor: VREditorAvatarActor;
	UISystem: VREditorUISystem;
	TeleportActor: VREditorTeleporter;
	AutoScalerSystem: VREditorAutoScaler;
	WorldInteraction: ViewportWorldInteraction;
	PlacementSystem: VREditorPlacement;
	Interactors: VREditorInteractor[];
	AssetContainer: VREditorAssetContainer;
	static Load(ResourceName: string): VREditorMode;
	static Find(Outer: UObject, ResourceName: string): VREditorMode;
	static GetDefaultObject(): VREditorMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorMode;
	GetWorldScaleFactor(): number;
	static C(Other: UObject | any): VREditorMode;
}

declare class VREditorAutoScaler extends UObject { 
	VRMode: VREditorMode;
	static Load(ResourceName: string): VREditorAutoScaler;
	static Find(Outer: UObject, ResourceName: string): VREditorAutoScaler;
	static GetDefaultObject(): VREditorAutoScaler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAutoScaler;
	static C(Other: UObject | any): VREditorAutoScaler;
}

declare class VREditorBaseUserWidget extends UserWidget { 
	Owner: any;
	static Load(ResourceName: string): VREditorBaseUserWidget;
	static Find(Outer: UObject, ResourceName: string): VREditorBaseUserWidget;
	static GetDefaultObject(): VREditorBaseUserWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseUserWidget;
	static C(Other: UObject | any): VREditorBaseUserWidget;
}

declare class VREditorCameraWidgetComponent extends VREditorWidgetComponent { 
	static Load(ResourceName: string): VREditorCameraWidgetComponent;
	static Find(Outer: UObject, ResourceName: string): VREditorCameraWidgetComponent;
	static GetDefaultObject(): VREditorCameraWidgetComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorCameraWidgetComponent;
	static C(Other: UObject | any): VREditorCameraWidgetComponent;
}

declare class VREditorDockableCameraWindow extends VREditorDockableWindow { 
	static GetDefaultObject(): VREditorDockableCameraWindow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorDockableCameraWindow;
	static C(Other: UObject | any): VREditorDockableCameraWindow;
}

declare class DockableWindowDragOperation extends ViewportDragOperation { 
	static Load(ResourceName: string): DockableWindowDragOperation;
	static Find(Outer: UObject, ResourceName: string): DockableWindowDragOperation;
	static GetDefaultObject(): DockableWindowDragOperation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DockableWindowDragOperation;
	static C(Other: UObject | any): DockableWindowDragOperation;
}

declare class VREditorFloatingCameraUI extends VREditorFloatingUI { 
	OffsetFromCamera: Vector;
	LinkedActor: any;
	static GetDefaultObject(): VREditorFloatingCameraUI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorFloatingCameraUI;
	static C(Other: UObject | any): VREditorFloatingCameraUI;
}

declare class FloatingText extends Actor { 
	SceneComponent: SceneComponent;
	FirstLineComponent: StaticMeshComponent;
	JointSphereComponent: StaticMeshComponent;
	SecondLineComponent: StaticMeshComponent;
	TextComponent: TextRenderComponent;
	MaskedTextMaterial: MaterialInterface;
	TranslucentTextMaterial: MaterialInterface;
	LineMaterial: MaterialInterface;
	LineMaterialMID: MaterialInstanceDynamic;
	static GetDefaultObject(): FloatingText;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatingText;
	static C(Other: UObject | any): FloatingText;
}

declare type EInteractorHand = 'Right' | 'Left' | 'EInteractorHand_MAX';
declare var EInteractorHand : { Right:'Right',Left:'Left',EInteractorHand_MAX:'EInteractorHand_MAX', };
declare class VRModeSettings extends VISettings { 
	bEnableAutoVREditMode: boolean;
	bAutokeySequences: boolean;
	InteractorHand: EInteractorHand;
	bShowWorldMovementGrid: boolean;
	bShowWorldMovementPostProcess: boolean;
	bShowWorldScaleProgressBar: boolean;
	UIBrightness: number;
	GizmoScale: number;
	DoubleClickTime: number;
	TriggerPressedThreshold_Vive: number;
	TriggerPressedThreshold_Rift: number;
	InteractorClass: Class;
	TeleporterClass: Class;
	static Load(ResourceName: string): VRModeSettings;
	static Find(Outer: UObject, ResourceName: string): VRModeSettings;
	static GetDefaultObject(): VRModeSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRModeSettings;
	static C(Other: UObject | any): VRModeSettings;
}

declare type EGizmoHandleTypes = 'All' | 'Translate' | 'Rotate' | 'Scale' | 'EGizmoHandleTypes_MAX';
declare var EGizmoHandleTypes : { All:'All',Translate:'Translate',Rotate:'Rotate',Scale:'Scale',EGizmoHandleTypes_MAX:'EGizmoHandleTypes_MAX', };
declare class VRScoutingInteractor extends VREditorInteractor { 
	FlyingIndicatorComponent: StaticMeshComponent;
	static Load(ResourceName: string): VRScoutingInteractor;
	static Find(Outer: UObject, ResourceName: string): VRScoutingInteractor;
	static GetDefaultObject(): VRScoutingInteractor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRScoutingInteractor;
	SetGizmoMode(InGizmoMode: EGizmoHandleTypes): void;
	static GetSelectedActors(): Actor[];
	GetGizmoMode(): EGizmoHandleTypes;
	static C(Other: UObject | any): VRScoutingInteractor;
}

declare type EClothingWindMethodNv = 'Legacy' | 'Accurate' | 'EClothingWindMethodNv_MAX';
declare var EClothingWindMethodNv : { Legacy:'Legacy',Accurate:'Accurate',EClothingWindMethodNv_MAX:'EClothingWindMethodNv_MAX', };
declare class ClothConstraintSetupNv { 
	Stiffness: number;
	StiffnessMultiplier: number;
	StretchLimit: number;
	CompressionLimit: number;
	clone() : ClothConstraintSetupNv;
	static C(Other: UObject | any): ClothConstraintSetupNv;
}

declare class ClothConfigNv extends ClothConfigCommon { 
	ClothingWindMethod: EClothingWindMethodNv;
	VerticalConstraint: ClothConstraintSetupNv;
	HorizontalConstraint: ClothConstraintSetupNv;
	BendConstraint: ClothConstraintSetupNv;
	ShearConstraint: ClothConstraintSetupNv;
	SelfCollisionRadius: number;
	SelfCollisionStiffness: number;
	SelfCollisionCullScale: number;
	Damping: Vector;
	Friction: number;
	WindDragCoefficient: number;
	WindLiftCoefficient: number;
	LinearDrag: Vector;
	AngularDrag: Vector;
	LinearInertiaScale: Vector;
	AngularInertiaScale: Vector;
	CentrifugalInertiaScale: Vector;
	SolverFrequency: number;
	StiffnessFrequency: number;
	GravityScale: number;
	GravityOverride: Vector;
	bUseGravityOverride: boolean;
	TetherStiffness: number;
	TetherLimit: number;
	CollisionThickness: number;
	AnimDriveSpringStiffness: number;
	AnimDriveDamperStiffness: number;
	WindMethod: EClothingWindMethod_Legacy;
	VerticalConstraintConfig: ClothConstraintSetup_Legacy;
	HorizontalConstraintConfig: ClothConstraintSetup_Legacy;
	BendConstraintConfig: ClothConstraintSetup_Legacy;
	ShearConstraintConfig: ClothConstraintSetup_Legacy;
	static Load(ResourceName: string): ClothConfigNv;
	static Find(Outer: UObject, ResourceName: string): ClothConfigNv;
	static GetDefaultObject(): ClothConfigNv;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothConfigNv;
	static C(Other: UObject | any): ClothConfigNv;
}

declare class ClothingSimulationFactoryNv extends ClothingSimulationFactory { 
	static Load(ResourceName: string): ClothingSimulationFactoryNv;
	static Find(Outer: UObject, ResourceName: string): ClothingSimulationFactoryNv;
	static GetDefaultObject(): ClothingSimulationFactoryNv;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationFactoryNv;
	static C(Other: UObject | any): ClothingSimulationFactoryNv;
}

declare class ClothingSimulationInteractorNv extends ClothingSimulationInteractor { 
	static Load(ResourceName: string): ClothingSimulationInteractorNv;
	static Find(Outer: UObject, ResourceName: string): ClothingSimulationInteractorNv;
	static GetDefaultObject(): ClothingSimulationInteractorNv;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationInteractorNv;
	SetAnimDriveDamperStiffness(InStiffness: number): void;
	static C(Other: UObject | any): ClothingSimulationInteractorNv;
}

declare class ClothPhysicalMeshDataNv_Legacy extends ClothPhysicalMeshDataBase_Legacy { 
	MaxDistances: number[];
	BackstopDistances: number[];
	BackstopRadiuses: number[];
	AnimDriveMultipliers: number[];
	static Load(ResourceName: string): ClothPhysicalMeshDataNv_Legacy;
	static Find(Outer: UObject, ResourceName: string): ClothPhysicalMeshDataNv_Legacy;
	static GetDefaultObject(): ClothPhysicalMeshDataNv_Legacy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothPhysicalMeshDataNv_Legacy;
	static C(Other: UObject | any): ClothPhysicalMeshDataNv_Legacy;
}

declare class ClothingAssetFactory extends ClothingAssetFactoryBase { 
	static Load(ResourceName: string): ClothingAssetFactory;
	static Find(Outer: UObject, ResourceName: string): ClothingAssetFactory;
	static GetDefaultObject(): ClothingAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetFactory;
	static C(Other: UObject | any): ClothingAssetFactory;
}

declare type EPIEPreviewDeviceType = 'Unset' | 'Android' | 'IOS' | 'TVOS' | 'Switch' | 'MAX';
declare var EPIEPreviewDeviceType : { Unset:'Unset',Android:'Android',IOS:'IOS',TVOS:'TVOS',Switch:'Switch',MAX:'MAX', };
declare class PIEPreviewDeviceSpecification extends UObject { 
	PreviewDeviceType: EPIEPreviewDeviceType;
	GPUFamily: string;
	GLVersion: string;
	VulkanVersion: string;
	AndroidVersion: string;
	DeviceMake: string;
	DeviceModel: string;
	DeviceBuildNumber: string;
	UsingHoudini: boolean;
	Hardware: string;
	Chipset: string;
	static Load(ResourceName: string): PIEPreviewDeviceSpecification;
	static Find(Outer: UObject, ResourceName: string): PIEPreviewDeviceSpecification;
	static GetDefaultObject(): PIEPreviewDeviceSpecification;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PIEPreviewDeviceSpecification;
	static C(Other: UObject | any): PIEPreviewDeviceSpecification;
}

declare class PIEPreviewSettings extends UObject { 
	WindowPosX: number;
	WindowPosY: number;
	WindowScalingFactor: number;
	static Load(ResourceName: string): PIEPreviewSettings;
	static Find(Outer: UObject, ResourceName: string): PIEPreviewSettings;
	static GetDefaultObject(): PIEPreviewSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PIEPreviewSettings;
	static C(Other: UObject | any): PIEPreviewSettings;
}

declare class LandscapeSplineSegmentConnection { 
	ControlPoint: LandscapeSplineControlPoint;
	TangentLen: number;
	SocketName: string;
	clone() : LandscapeSplineSegmentConnection;
	static C(Other: UObject | any): LandscapeSplineSegmentConnection;
}

declare type LandscapeSplineMeshOrientation = 'LSMO_XUp' | 'LSMO_YUp' | 'LSMO_MAX';
declare var LandscapeSplineMeshOrientation : { LSMO_XUp:'LSMO_XUp',LSMO_YUp:'LSMO_YUp',LSMO_MAX:'LSMO_MAX', };
declare class LandscapeSplineMeshEntry { 
	Mesh: StaticMesh;
	MaterialOverrides: MaterialInterface[];
	bCenterH: boolean;
	CenterAdjust: Vector2D;
	bScaleToWidth: boolean;
	Scale: Vector;
	Orientation: LandscapeSplineMeshOrientation;
	ForwardAxis: ESplineMeshAxis;
	UpAxis: ESplineMeshAxis;
	clone() : LandscapeSplineMeshEntry;
	static C(Other: UObject | any): LandscapeSplineMeshEntry;
}

declare class LandscapeSplineInterpPoint { 
	Center: Vector;
	Left: Vector;
	Right: Vector;
	FalloffLeft: Vector;
	FalloffRight: Vector;
	LayerLeft: Vector;
	LayerRight: Vector;
	LayerFalloffLeft: Vector;
	LayerFalloffRight: Vector;
	StartEndFalloff: number;
	clone() : LandscapeSplineInterpPoint;
	static C(Other: UObject | any): LandscapeSplineInterpPoint;
}

declare class LandscapeSplineSegment extends UObject { 
	Connections: LandscapeSplineSegmentConnection;
	LayerName: string;
	bRaiseTerrain: boolean;
	bLowerTerrain: boolean;
	SplineMeshes: LandscapeSplineMeshEntry[];
	bEnableCollision: boolean;
	CollisionProfileName: string;
	bCastShadow: boolean;
	bHiddenInGame: boolean;
	bPlaceSplineMeshesInStreamingLevels: boolean;
	RandomSeed: number;
	LDMaxDrawDistance: number;
	TranslucencySortPriority: number;
	bRenderCustomDepth: boolean;
	CustomDepthStencilWriteMask: ERendererStencilMask;
	CustomDepthStencilValue: number;
	RuntimeVirtualTextures: RuntimeVirtualTexture[];
	VirtualTextureLodBias: number;
	VirtualTextureCullMips: number;
	VirtualTextureMainPassMaxDrawDistance: number;
	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	BodyInstance: BodyInstance;
	bSelected: boolean;
	bNavDirty: boolean;
	SplineInfo: InterpCurveVector;
	Points: LandscapeSplineInterpPoint[];
	Bounds: Box;
	LocalMeshComponents: SplineMeshComponent[];
	ForeignWorlds: World[];
	ModificationKey: Guid;
	static Load(ResourceName: string): LandscapeSplineSegment;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplineSegment;
	static GetDefaultObject(): LandscapeSplineSegment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineSegment;
	static C(Other: UObject | any): LandscapeSplineSegment;
}

declare class LandscapeSplineConnection { 
	Segment: LandscapeSplineSegment;
	End: boolean;
	clone() : LandscapeSplineConnection;
	static C(Other: UObject | any): LandscapeSplineConnection;
}

declare class ControlPointMeshComponent extends StaticMeshComponent { 
	bSelected: boolean;
	VirtualTextureMainPassMaxDrawDistance: number;
	static Load(ResourceName: string): ControlPointMeshComponent;
	static Find(Outer: UObject, ResourceName: string): ControlPointMeshComponent;
	static GetDefaultObject(): ControlPointMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlPointMeshComponent;
	static C(Other: UObject | any): ControlPointMeshComponent;
}

declare class LandscapeSplineControlPoint extends UObject { 
	Location: Vector;
	Rotation: Rotator;
	Width: number;
	LayerWidthRatio: number;
	SideFalloff: number;
	LeftSideFalloffFactor: number;
	RightSideFalloffFactor: number;
	LeftSideLayerFalloffFactor: number;
	RightSideLayerFalloffFactor: number;
	EndFalloff: number;
	SegmentMeshOffset: number;
	LayerName: string;
	bRaiseTerrain: boolean;
	bLowerTerrain: boolean;
	Mesh: StaticMesh;
	MaterialOverrides: MaterialInterface[];
	MeshScale: Vector;
	bEnableCollision: boolean;
	CollisionProfileName: string;
	bCastShadow: boolean;
	bHiddenInGame: boolean;
	bPlaceSplineMeshesInStreamingLevels: boolean;
	LDMaxDrawDistance: number;
	TranslucencySortPriority: number;
	bRenderCustomDepth: boolean;
	CustomDepthStencilWriteMask: ERendererStencilMask;
	CustomDepthStencilValue: number;
	RuntimeVirtualTextures: RuntimeVirtualTexture[];
	VirtualTextureLodBias: number;
	VirtualTextureCullMips: number;
	VirtualTextureMainPassMaxDrawDistance: number;
	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	BodyInstance: BodyInstance;
	bSelected: boolean;
	bNavDirty: boolean;
	ConnectedSegments: LandscapeSplineConnection[];
	Points: LandscapeSplineInterpPoint[];
	Bounds: Box;
	LocalMeshComponent: ControlPointMeshComponent;
	ForeignWorld: World;
	ModificationKey: Guid;
	static Load(ResourceName: string): LandscapeSplineControlPoint;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplineControlPoint;
	static GetDefaultObject(): LandscapeSplineControlPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineControlPoint;
	static C(Other: UObject | any): LandscapeSplineControlPoint;
}

declare class LandscapeSplinesComponent extends PrimitiveComponent { 
	SplineResolution: number;
	SplineColor: Color;
	ControlPointSprite: Texture2D;
	SplineEditorMesh: StaticMesh;
	bShowSplineEditorMesh: boolean;
	ControlPoints: LandscapeSplineControlPoint[];
	Segments: LandscapeSplineSegment[];
	ForeignWorldSplineDataMap: any;
	CookedForeignMeshComponents: MeshComponent[];
	static Load(ResourceName: string): LandscapeSplinesComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplinesComponent;
	static GetDefaultObject(): LandscapeSplinesComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplinesComponent;
	GetSplineMeshComponents(): SplineMeshComponent[];
	static C(Other: UObject | any): LandscapeSplinesComponent;
}

declare type ELandscapeLODFalloff = 'Linear' | 'SquareRoot' | 'ELandscapeLODFalloff_MAX';
declare var ELandscapeLODFalloff : { Linear:'Linear',SquareRoot:'SquareRoot',ELandscapeLODFalloff_MAX:'ELandscapeLODFalloff_MAX', };
declare type ELandscapeLayerDisplayMode = 'Default' | 'Alphabetical' | 'UserSpecific' | 'ELandscapeLayerDisplayMode_MAX';
declare var ELandscapeLayerDisplayMode : { Default:'Default',Alphabetical:'Alphabetical',UserSpecific:'UserSpecific',ELandscapeLayerDisplayMode_MAX:'ELandscapeLayerDisplayMode_MAX', };
declare class LandscapeProxyMaterialOverride { 
	LODIndex: PerPlatformInt;
	Material: MaterialInterface;
	clone() : LandscapeProxyMaterialOverride;
	static C(Other: UObject | any): LandscapeProxyMaterialOverride;
}

declare class LandscapeComponentMaterialOverride { 
	LODIndex: PerPlatformInt;
	Material: MaterialInterface;
	clone() : LandscapeComponentMaterialOverride;
	static C(Other: UObject | any): LandscapeComponentMaterialOverride;
}

declare class LandscapeWeightmapUsage extends UObject { 
	ChannelUsage: LandscapeComponent;
	LayerGuid: Guid;
	static Load(ResourceName: string): LandscapeWeightmapUsage;
	static Find(Outer: UObject, ResourceName: string): LandscapeWeightmapUsage;
	static GetDefaultObject(): LandscapeWeightmapUsage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeWeightmapUsage;
	static C(Other: UObject | any): LandscapeWeightmapUsage;
}

declare type ESplineModulationColorMask = 'Red' | 'Green' | 'Blue' | 'Alpha' | 'ESplineModulationColorMask_MAX';
declare var ESplineModulationColorMask : { Red:'Red',Green:'Green',Blue:'Blue',Alpha:'Alpha',ESplineModulationColorMask_MAX:'ESplineModulationColorMask_MAX', };
declare class LandscapeLayerInfoObject extends UObject { 
	LayerName: string;
	PhysMaterial: PhysicalMaterial;
	Hardness: number;
	MinimumCollisionRelevanceWeight: number;
	bNoWeightBlend: boolean;
	SplineFalloffModulationTexture: Texture2D;
	SplineFalloffModulationColorMask: ESplineModulationColorMask;
	SplineFalloffModulationTiling: number;
	SplineFalloffModulationBias: number;
	SplineFalloffModulationScale: number;
	IsReferencedFromLoadedData: boolean;
	LayerUsageDebugColor: LinearColor;
	static Load(ResourceName: string): LandscapeLayerInfoObject;
	static Find(Outer: UObject, ResourceName: string): LandscapeLayerInfoObject;
	static GetDefaultObject(): LandscapeLayerInfoObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeLayerInfoObject;
	static C(Other: UObject | any): LandscapeLayerInfoObject;
}

declare class WeightmapLayerAllocationInfo { 
	LayerInfo: LandscapeLayerInfoObject;
	WeightmapTextureIndex: number;
	WeightmapTextureChannel: number;
	clone() : WeightmapLayerAllocationInfo;
	static C(Other: UObject | any): WeightmapLayerAllocationInfo;
}

declare class LandscapeLODStreamingProxy extends StreamableRenderAsset { 
	static Load(ResourceName: string): LandscapeLODStreamingProxy;
	static Find(Outer: UObject, ResourceName: string): LandscapeLODStreamingProxy;
	static GetDefaultObject(): LandscapeLODStreamingProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeLODStreamingProxy;
	static C(Other: UObject | any): LandscapeLODStreamingProxy;
}

declare class LandscapeEditToolRenderData { 
	ToolMaterial: MaterialInterface;
	GizmoMaterial: MaterialInterface;
	SelectedType: number;
	DebugChannelR: number;
	DebugChannelG: number;
	DebugChannelB: number;
	DataTexture: Texture2D;
	LayerContributionTexture: Texture2D;
	DirtyTexture: Texture2D;
	clone() : LandscapeEditToolRenderData;
	static C(Other: UObject | any): LandscapeEditToolRenderData;
}

declare class LandscapeComponent extends PrimitiveComponent { 
	SectionBaseX: number;
	SectionBaseY: number;
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	NumSubsections: number;
	OverrideMaterial: MaterialInterface;
	OverrideHoleMaterial: MaterialInterface;
	OverrideMaterials: LandscapeComponentMaterialOverride[];
	MaterialInstance: MaterialInstanceConstant;
	MaterialInstances: MaterialInstanceConstant[];
	MaterialInstancesDynamic: MaterialInstanceDynamic[];
	LODIndexToMaterialIndex: any[];
	XYOffsetmapTexture: Texture2D;
	WeightmapScaleBias: Vector4;
	WeightmapSubsectionOffset: number;
	HeightmapScaleBias: Vector4;
	CachedLocalBox: Box;
	CollisionComponent: any;
	LightingGuid: Guid;
	LayersData: any;
	WeightmapTexturesUsage: LandscapeWeightmapUsage[];
	LayerUpdateFlagPerMode: any;
	bPendingCollisionDataUpdate: boolean;
	bPendingLayerCollisionDataUpdate: boolean;
	HeightmapTexture: Texture2D;
	WeightmapLayerAllocations: WeightmapLayerAllocationInfo[];
	WeightmapTextures: Texture2D[];
	LODStreamingProxy: LandscapeLODStreamingProxy;
	MapBuildDataId: Guid;
	IrrelevantLights: Guid[];
	CollisionMipLevel: number;
	SimpleCollisionMipLevel: number;
	NegativeZBoundsExtension: number;
	PositiveZBoundsExtension: number;
	StaticLightingResolution: number;
	ForcedLOD: number;
	LODBias: number;
	StateId: Guid;
	BakedTextureMaterialGuid: Guid;
	LastBakedTextureMaterialGuid: Guid;
	GIBakedBaseColorTexture: Texture2D;
	LightingLODBias: number;
	LayerAllowList: LandscapeLayerInfoObject[];
	EditToolRenderData: LandscapeEditToolRenderData;
	MobileDataSourceHash: Guid;
	MaterialPerLOD: any;
	SplineHash: any;
	PhysicalMaterialHash: any;
	LastSavedPhysicalMaterialHash: any;
	MobileBlendableLayerMask: number;
	MobileMaterialInterface: MaterialInterface;
	MobileMaterialInterfaces: MaterialInterface[];
	MobileWeightmapTextures: Texture2D[];
	MobileCombinationMaterialInstances: MaterialInstanceConstant[];
	MobileCombinationMaterialInstance: MaterialInstanceConstant;
	static Load(ResourceName: string): LandscapeComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeComponent;
	static GetDefaultObject(): LandscapeComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeComponent;
	GetMaterialInstanceDynamic(InIndex: number): MaterialInstanceDynamic;
	EditorGetPaintLayerWeightByNameAtLocation(InLocation: Vector,InPaintLayerName: string): number;
	EditorGetPaintLayerWeightAtLocation(InLocation: Vector,PaintLayer: LandscapeLayerInfoObject): number;
	static C(Other: UObject | any): LandscapeComponent;
}

declare class LandscapeHeightfieldCollisionComponent extends PrimitiveComponent { 
	ComponentLayerInfos: LandscapeLayerInfoObject[];
	SectionBaseX: number;
	SectionBaseY: number;
	CollisionSizeQuads: number;
	CollisionScale: number;
	SimpleCollisionSizeQuads: number;
	CollisionQuadFlags: number[];
	HeightfieldGuid: Guid;
	CachedLocalBox: Box;
	RenderComponent: any;
	PhysicalMaterialRenderObjects: PhysicalMaterial[];
	CookedPhysicalMaterials: PhysicalMaterial[];
	static Load(ResourceName: string): LandscapeHeightfieldCollisionComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeHeightfieldCollisionComponent;
	static GetDefaultObject(): LandscapeHeightfieldCollisionComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeHeightfieldCollisionComponent;
	GetRenderComponent(): LandscapeComponent;
	static C(Other: UObject | any): LandscapeHeightfieldCollisionComponent;
}

declare class LandscapeEditorLayerSettings { 
	LayerInfoObj: LandscapeLayerInfoObject;
	ReimportLayerFilePath: string;
	clone() : LandscapeEditorLayerSettings;
	static C(Other: UObject | any): LandscapeEditorLayerSettings;
}

declare class LandscapeProxy extends PartitionActor { 
	SplineComponent: LandscapeSplinesComponent;
	LandscapeGuid: Guid;
	LandscapeSectionOffset: IntPoint;
	MaxLODLevel: number;
	LODDistanceFactor: number;
	LODFalloff: ELandscapeLODFalloff;
	ComponentScreenSizeToUseSubSections: number;
	LOD0ScreenSize: number;
	LOD0DistributionSetting: number;
	LODDistributionSetting: number;
	ExportLOD: number;
	TargetDisplayOrderList: string[];
	TargetDisplayOrder: ELandscapeLayerDisplayMode;
	StaticLightingLOD: number;
	DefaultPhysMaterial: PhysicalMaterial;
	StreamingDistanceMultiplier: number;
	LandscapeMaterial: MaterialInterface;
	LandscapeHoleMaterial: MaterialInterface;
	LandscapeMaterialsOverride: LandscapeProxyMaterialOverride[];
	PreEditLandscapeMaterial: MaterialInterface;
	PreEditLandscapeHoleMaterial: MaterialInterface;
	PreEditLandscapeMaterialsOverride: LandscapeProxyMaterialOverride[];
	bIsPerformingInteractiveActionOnLandscapeMaterialOverride: boolean;
	bMeshHoles: boolean;
	MeshHolesMaxLod: number;
	RuntimeVirtualTextures: RuntimeVirtualTexture[];
	bSetCreateRuntimeVirtualTextureVolumes: boolean;
	VirtualTextureNumLods: number;
	VirtualTextureLodBias: number;
	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	NegativeZBoundsExtension: number;
	PositiveZBoundsExtension: number;
	LandscapeComponents: LandscapeComponent[];
	CollisionComponents: LandscapeHeightfieldCollisionComponent[];
	FoliageComponents: HierarchicalInstancedStaticMeshComponent[];
	bHasLandscapeGrass: boolean;
	StaticLightingResolution: number;
	CastShadow: boolean;
	bCastDynamicShadow: boolean;
	bCastStaticShadow: boolean;
	bCastContactShadow: boolean;
	bCastFarShadow: boolean;
	bCastHiddenShadow: boolean;
	bCastShadowAsTwoSided: boolean;
	bAffectDistanceFieldLighting: boolean;
	LightingChannels: LightingChannels;
	bUseMaterialPositionOffsetInStaticLighting: boolean;
	bRenderCustomDepth: boolean;
	CustomDepthStencilWriteMask: ERendererStencilMask;
	CustomDepthStencilValue: number;
	LDMaxDrawDistance: number;
	bIsMovingToLevel: boolean;
	LightmassSettings: LightmassPrimitiveSettings;
	CollisionMipLevel: number;
	SimpleCollisionMipLevel: number;
	CollisionThickness: number;
	BodyInstance: BodyInstance;
	bGenerateOverlapEvents: boolean;
	bBakeMaterialPositionOffsetIntoCollision: boolean;
	EditorCachedLayerInfos: LandscapeLayerInfoObject[];
	ReimportHeightmapFilePath: string;
	ReimportDestinationLayerGuid: Guid;
	EditorLayerSettings: LandscapeEditorLayerSettings[];
	WeightmapUsageMap: any;
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	NumSubsections: number;
	bUsedForNavigation: boolean;
	bFillCollisionUnderLandscapeForNavmesh: boolean;
	bUseDynamicMaterialInstance: boolean;
	NavigationGeometryGatheringMode: ENavDataGatheringMode;
	MaxPaintedLayersPerComponent: number;
	bUseLandscapeForCullingInvisibleHLODVertices: boolean;
	bHasLayersContent: boolean;
	static GetDefaultObject(): LandscapeProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeProxy;
	SetLandscapeMaterialVectorParameterValue(ParameterName: string,Value: LinearColor): void;
	SetLandscapeMaterialTextureParameterValue(ParameterName: string,Value: Texture): void;
	SetLandscapeMaterialScalarParameterValue(ParameterName: string,Value: number): void;
	LandscapeImportWeightmapFromRenderTarget(InRenderTarget: TextureRenderTarget2D,InLayerName: string): boolean;
	LandscapeImportHeightmapFromRenderTarget(InRenderTarget: TextureRenderTarget2D,InImportHeightFromRGChannel: boolean): boolean;
	LandscapeExportWeightmapToRenderTarget(InRenderTarget: TextureRenderTarget2D,InLayerName: string): boolean;
	LandscapeExportHeightmapToRenderTarget(InRenderTarget: TextureRenderTarget2D,InExportHeightIntoRGChannel: boolean,InExportLandscapeProxies: boolean): boolean;
	EditorSetLandscapeMaterial(NewLandscapeMaterial: MaterialInterface): void;
	EditorApplySpline(InSplineComponent: SplineComponent,StartWidth: number,EndWidth: number,StartSideFalloff: number,EndSideFalloff: number,StartRoll: number,EndRoll: number,NumSubdivisions: number,bRaiseHeights: boolean,bLowerHeights: boolean,PaintLayer: LandscapeLayerInfoObject,EditLayerName: string): void;
	ChangeLODDistanceFactor(InLODDistanceFactor: number): void;
	ChangeComponentScreenSizeToUseSubSections(InComponentScreenSizeToUseSubSections: number): void;
	static C(Other: UObject | any): LandscapeProxy;
}

declare type ELandscapeBlendMode = 'LSBM_AdditiveBlend' | 'LSBM_AlphaBlend' | 'LSBM_MAX';
declare var ELandscapeBlendMode : { LSBM_AdditiveBlend:'LSBM_AdditiveBlend',LSBM_AlphaBlend:'LSBM_AlphaBlend',LSBM_MAX:'LSBM_MAX', };
declare class LandscapeLayerBrush { 
	BlueprintBrush: LandscapeBlueprintBrushBase;
	clone() : LandscapeLayerBrush;
	static C(Other: UObject | any): LandscapeLayerBrush;
}

declare class LandscapeLayer { 
	Guid: Guid;
	Name: string;
	bVisible: boolean;
	bLocked: boolean;
	HeightmapAlpha: number;
	WeightmapAlpha: number;
	BlendMode: ELandscapeBlendMode;
	Brushes: LandscapeLayerBrush[];
	WeightmapLayerAllocationBlend: any;
	clone() : LandscapeLayer;
	static C(Other: UObject | any): LandscapeLayer;
}

declare class LandscapeInfoLayerSettings { 
	LayerInfoObj: LandscapeLayerInfoObject;
	LayerName: string;
	ThumbnailMIC: MaterialInstanceConstant;
	Owner: LandscapeProxy;
	DebugColorChannel: number;
	bValid: boolean;
	clone() : LandscapeInfoLayerSettings;
	static C(Other: UObject | any): LandscapeInfoLayerSettings;
}

declare class LandscapeStreamingProxy extends LandscapeProxy { 
	LandscapeActor: any;
	static GetDefaultObject(): LandscapeStreamingProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeStreamingProxy;
	static C(Other: UObject | any): LandscapeStreamingProxy;
}

declare type ELandscapeLayerPaintingRestriction = 'None' | 'UseMaxLayers' | 'ExistingOnly' | 'UseComponentAllowList' | 'ELandscapeLayerPaintingRestriction_MAX';
declare var ELandscapeLayerPaintingRestriction : { None:'None',UseMaxLayers:'UseMaxLayers',ExistingOnly:'ExistingOnly',UseComponentAllowList:'UseComponentAllowList',ELandscapeLayerPaintingRestriction_MAX:'ELandscapeLayerPaintingRestriction_MAX', };
declare class LandscapeInfo extends UObject { 
	LandscapeActor: any;
	LandscapeGuid: Guid;
	ComponentSizeQuads: number;
	SubsectionSizeQuads: number;
	ComponentNumSubsections: number;
	DrawScale: Vector;
	Layers: LandscapeInfoLayerSettings[];
	Proxies: LandscapeStreamingProxy[];
	SplineActors: any[];
	static Load(ResourceName: string): LandscapeInfo;
	static Find(Outer: UObject, ResourceName: string): LandscapeInfo;
	static GetDefaultObject(): LandscapeInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeInfo;
	static C(Other: UObject | any): LandscapeInfo;
	GetAlphamapDataToMemory(LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	GetHeightmapDataToMemory(MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	GetLandscapeExtent(MinX?: number,MinY?: number,MaxX?: number,MaxY?: number): {MinX: number, MinY: number, MaxX: number, MaxY: number, $: boolean};
	GetLayerInfoByName(LayerName: string,Owner: LandscapeProxy): LandscapeLayerInfoObject;
	SetAlphamapDataFromMemory(LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number,PaintingRestriction: ELandscapeLayerPaintingRestriction): void;
	SetHeightmapDataFromMemory(MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetAlphamapDataToMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetHeightmapDataToMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
	static GetLandscapeExtent(LandscapeInfo: LandscapeInfo,MinX?: number,MinY?: number,MaxX?: number,MaxY?: number): {MinX: number, MinY: number, MaxX: number, MaxY: number, $: boolean};
	static GetLayerInfoByName(LandscapeInfo: LandscapeInfo,LayerName: string,Owner: LandscapeProxy): LandscapeLayerInfoObject;
	static SetAlphamapDataFromMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number,PaintingRestriction: ELandscapeLayerPaintingRestriction): void;
	static SetHeightmapDataFromMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
}

declare class Landscape extends LandscapeProxy { 
	bCanHaveLayersContent: boolean;
	LandscapeSplinesTargetLayerGuid: Guid;
	LandscapeLayers: LandscapeLayer[];
	HeightmapRTList: TextureRenderTarget2D[];
	WeightmapRTList: TextureRenderTarget2D[];
	TrackedStreamingInTextures: any;
	LandscapeSplinesAffectedComponents: any;
	bLandscapeLayersAreInitialized: boolean;
	bLandscapeLayersAreUsingLocalMerge: boolean;
	WasCompilingShaders: boolean;
	LayerContentUpdateModes: any;
	bSplineLayerUpdateRequested: boolean;
	static GetDefaultObject(): Landscape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Landscape;
	static C(Other: UObject | any): Landscape;
	GetLandscapeInfo(bSpawnNewActor: boolean): LandscapeInfo;
	static GetLandscapeInfo(Landscape: Landscape,bSpawnNewActor: boolean): LandscapeInfo;
}

declare class LandscapeBlueprintBrushBase extends Actor { 
	OwningLandscape: Landscape;
	AffectHeightmap: boolean;
	AffectWeightmap: boolean;
	AffectedWeightmapLayers: string[];
	bIsVisible: boolean;
	static GetDefaultObject(): LandscapeBlueprintBrushBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeBlueprintBrushBase;
	RequestLandscapeUpdate(): void;
	Render(InIsHeightmap: boolean,InCombinedResult: TextureRenderTarget2D,InWeightmapLayerName: string): TextureRenderTarget2D;
	Initialize(InLandscapeTransform: Transform,InLandscapeSize: IntPoint,InLandscapeRenderTargetSize: IntPoint): void;
	GetBlueprintRenderDependencies(OutStreamableAssets?: UObject[]): {OutStreamableAssets: UObject[]};
	static C(Other: UObject | any): LandscapeBlueprintBrushBase;
}

declare class LandscapeBlueprintBrush extends LandscapeBlueprintBrushBase { 
	static GetDefaultObject(): LandscapeBlueprintBrush;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeBlueprintBrush;
	static C(Other: UObject | any): LandscapeBlueprintBrush;
}

declare class GizmoEditorAxisSource extends UObject { 
	AxisIndex: number;
	bLocalAxes: boolean;
	static Load(ResourceName: string): GizmoEditorAxisSource;
	static Find(Outer: UObject, ResourceName: string): GizmoEditorAxisSource;
	static GetDefaultObject(): GizmoEditorAxisSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoEditorAxisSource;
	static C(Other: UObject | any): GizmoEditorAxisSource;
}

declare class EditorInteractiveGizmoConditionalBuilder extends Interface { 
	static Load(ResourceName: string): EditorInteractiveGizmoConditionalBuilder;
	static Find(Outer: UObject, ResourceName: string): EditorInteractiveGizmoConditionalBuilder;
	static GetDefaultObject(): EditorInteractiveGizmoConditionalBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorInteractiveGizmoConditionalBuilder;
	static C(Other: UObject | any): EditorInteractiveGizmoConditionalBuilder;
}

declare class EditorInteractiveGizmoRegistry extends UObject { 
	GizmoCategoryMap: any;
	static Load(ResourceName: string): EditorInteractiveGizmoRegistry;
	static Find(Outer: UObject, ResourceName: string): EditorInteractiveGizmoRegistry;
	static GetDefaultObject(): EditorInteractiveGizmoRegistry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorInteractiveGizmoRegistry;
	static C(Other: UObject | any): EditorInteractiveGizmoRegistry;
}

declare class ActiveEditorGizmo { 
	Gizmo: InteractiveGizmo;
	clone() : ActiveEditorGizmo;
	static C(Other: UObject | any): ActiveEditorGizmo;
}

declare class EditorInteractiveGizmoManager extends InteractiveGizmoManager { 
	Registry: EditorInteractiveGizmoRegistry;
	ActiveEditorGizmos: ActiveEditorGizmo[];
	CachedGizmoMap: any;
	static Load(ResourceName: string): EditorInteractiveGizmoManager;
	static Find(Outer: UObject, ResourceName: string): EditorInteractiveGizmoManager;
	static GetDefaultObject(): EditorInteractiveGizmoManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorInteractiveGizmoManager;
	static C(Other: UObject | any): EditorInteractiveGizmoManager;
}

declare class EditorGizmoRegistryCategoryEntry extends UObject { 
	GizmoTypes: InteractiveGizmoBuilder[];
	CategoryName: string;
	static Load(ResourceName: string): EditorGizmoRegistryCategoryEntry;
	static Find(Outer: UObject, ResourceName: string): EditorGizmoRegistryCategoryEntry;
	static GetDefaultObject(): EditorGizmoRegistryCategoryEntry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorGizmoRegistryCategoryEntry;
	static C(Other: UObject | any): EditorGizmoRegistryCategoryEntry;
}

declare class EditorGizmoRegistryCategoryEntry_ConditionalSelection extends EditorGizmoRegistryCategoryEntry { 
	static Load(ResourceName: string): EditorGizmoRegistryCategoryEntry_ConditionalSelection;
	static Find(Outer: UObject, ResourceName: string): EditorGizmoRegistryCategoryEntry_ConditionalSelection;
	static GetDefaultObject(): EditorGizmoRegistryCategoryEntry_ConditionalSelection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorGizmoRegistryCategoryEntry_ConditionalSelection;
	static C(Other: UObject | any): EditorGizmoRegistryCategoryEntry_ConditionalSelection;
}

declare class EditorGizmoRegistryCategoryEntry_Primary extends EditorGizmoRegistryCategoryEntry_ConditionalSelection { 
	static Load(ResourceName: string): EditorGizmoRegistryCategoryEntry_Primary;
	static Find(Outer: UObject, ResourceName: string): EditorGizmoRegistryCategoryEntry_Primary;
	static GetDefaultObject(): EditorGizmoRegistryCategoryEntry_Primary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorGizmoRegistryCategoryEntry_Primary;
	static C(Other: UObject | any): EditorGizmoRegistryCategoryEntry_Primary;
}

declare class EditorGizmoRegistryCategoryEntry_Accessory extends EditorGizmoRegistryCategoryEntry_ConditionalSelection { 
	static Load(ResourceName: string): EditorGizmoRegistryCategoryEntry_Accessory;
	static Find(Outer: UObject, ResourceName: string): EditorGizmoRegistryCategoryEntry_Accessory;
	static GetDefaultObject(): EditorGizmoRegistryCategoryEntry_Accessory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorGizmoRegistryCategoryEntry_Accessory;
	static C(Other: UObject | any): EditorGizmoRegistryCategoryEntry_Accessory;
}

declare class EditorInteractiveGizmoSelectionBuilder extends Interface { 
	static Load(ResourceName: string): EditorInteractiveGizmoSelectionBuilder;
	static Find(Outer: UObject, ResourceName: string): EditorInteractiveGizmoSelectionBuilder;
	static GetDefaultObject(): EditorInteractiveGizmoSelectionBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorInteractiveGizmoSelectionBuilder;
	static C(Other: UObject | any): EditorInteractiveGizmoSelectionBuilder;
}

declare class EditorInteractiveGizmoSubsystem extends EditorSubsystem { 
	TransformGizmoBuilder: InteractiveGizmoBuilder;
	Registry: EditorInteractiveGizmoRegistry;
	static Load(ResourceName: string): EditorInteractiveGizmoSubsystem;
	static Find(Outer: UObject, ResourceName: string): EditorInteractiveGizmoSubsystem;
	static GetDefaultObject(): EditorInteractiveGizmoSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorInteractiveGizmoSubsystem;
	static C(Other: UObject | any): EditorInteractiveGizmoSubsystem;
}

declare class GizmoEditorAxisTranslationParameterSource extends GizmoBaseFloatParameterSource { 
	AxisSource: any;
	Parameter: number;
	LastChange: GizmoFloatParameterChange;
	CurTranslationAxis: Vector;
	CurTranslationOrigin: Vector;
	LastPivotLocation: Vector;
	LastSnappedLocation: Vector;
	static Load(ResourceName: string): GizmoEditorAxisTranslationParameterSource;
	static Find(Outer: UObject, ResourceName: string): GizmoEditorAxisTranslationParameterSource;
	static GetDefaultObject(): GizmoEditorAxisTranslationParameterSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoEditorAxisTranslationParameterSource;
	static C(Other: UObject | any): GizmoEditorAxisTranslationParameterSource;
}

declare class EditorTransformGizmoBuilder extends InteractiveGizmoBuilder { 
	static Load(ResourceName: string): EditorTransformGizmoBuilder;
	static Find(Outer: UObject, ResourceName: string): EditorTransformGizmoBuilder;
	static GetDefaultObject(): EditorTransformGizmoBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorTransformGizmoBuilder;
	static C(Other: UObject | any): EditorTransformGizmoBuilder;
}

declare class GizmoBaseObject extends UObject { 
	LocalToWorldTransform: Transform;
	Material: MaterialInterface;
	CurrentMaterial: MaterialInterface;
	GizmoScale: number;
	PixelHitDistanceThreshold: number;
	static Load(ResourceName: string): GizmoBaseObject;
	static Find(Outer: UObject, ResourceName: string): GizmoBaseObject;
	static GetDefaultObject(): GizmoBaseObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoBaseObject;
	SetWorldLocalState(bWorldIn: boolean): void;
	SetVisibility(bVisibleIn: boolean): void;
	SetMaterial(InMaterial: MaterialInterface): void;
	SetLocalToWorldTransform(LocalToWorldTransformIn: Transform): void;
	SetInteractingState(bInteractingIn: boolean): void;
	SetHoverState(bHoveringIn: boolean): void;
	SetGizmoScale(InGizmoScale: number): void;
	SetCurrentMaterial(InCurrentMaterial: MaterialInterface): void;
	GetWorldLocalState(): boolean;
	GetVisibility(): boolean;
	GetMaterial(): MaterialInterface;
	GetLocalToWorldTransform(): Transform;
	GetInteractingState(): boolean;
	GetHoverState(): boolean;
	GetGizmoScale(): number;
	GetCurrentMaterial(): MaterialInterface;
	static C(Other: UObject | any): GizmoBaseObject;
}

declare class GizmoGroupObject extends GizmoBaseObject { 
	Objects: GizmoBaseObject[];
	static Load(ResourceName: string): GizmoGroupObject;
	static Find(Outer: UObject, ResourceName: string): GizmoGroupObject;
	static GetDefaultObject(): GizmoGroupObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoGroupObject;
	static C(Other: UObject | any): GizmoGroupObject;
}

declare class GizmoCylinderObject extends GizmoBaseObject { 
	Direction: Vector;
	Length: any;
	Offset: any;
	Radius: any;
	NumSides: number;
	static Load(ResourceName: string): GizmoCylinderObject;
	static Find(Outer: UObject, ResourceName: string): GizmoCylinderObject;
	static GetDefaultObject(): GizmoCylinderObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoCylinderObject;
	static C(Other: UObject | any): GizmoCylinderObject;
}

declare class GizmoConeObject extends GizmoBaseObject { 
	Direction: Vector;
	Height: any;
	Offset: any;
	Angle: any;
	NumSides: number;
	static Load(ResourceName: string): GizmoConeObject;
	static Find(Outer: UObject, ResourceName: string): GizmoConeObject;
	static GetDefaultObject(): GizmoConeObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoConeObject;
	static C(Other: UObject | any): GizmoConeObject;
}

declare class GizmoBoxObject extends GizmoBaseObject { 
	Dimensions: Vector;
	UpDirection: Vector;
	SideDirection: Vector;
	Offset: number;
	static Load(ResourceName: string): GizmoBoxObject;
	static Find(Outer: UObject, ResourceName: string): GizmoBoxObject;
	static GetDefaultObject(): GizmoBoxObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoBoxObject;
	static C(Other: UObject | any): GizmoBoxObject;
}

declare class GizmoArrowObject extends GizmoBaseObject { 
	bHasConeHead: number;
	Direction: Vector;
	Offset: number;
	CylinderObject: GizmoCylinderObject;
	ConeObject: GizmoConeObject;
	BoxObject: GizmoBoxObject;
	static Load(ResourceName: string): GizmoArrowObject;
	static Find(Outer: UObject, ResourceName: string): GizmoArrowObject;
	static GetDefaultObject(): GizmoArrowObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoArrowObject;
	static C(Other: UObject | any): GizmoArrowObject;
}

declare class GizmoObjectTransformChangeStateTarget extends UObject { 
	TransactionManager: any;
	static Load(ResourceName: string): GizmoObjectTransformChangeStateTarget;
	static Find(Outer: UObject, ResourceName: string): GizmoObjectTransformChangeStateTarget;
	static GetDefaultObject(): GizmoObjectTransformChangeStateTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoObjectTransformChangeStateTarget;
	static C(Other: UObject | any): GizmoObjectTransformChangeStateTarget;
}

declare class EditorTransformGizmo extends InteractiveGizmo { 
	ActiveTarget: TransformProxy;
	bSnapToWorldGrid: boolean;
	bGridSizeIsExplicit: boolean;
	ExplicitGridSize: Vector;
	bRotationGridSizeIsExplicit: boolean;
	ExplicitRotationGridSize: Rotator;
	bSnapToWorldRotGrid: boolean;
	bUseContextCoordinateSystem: boolean;
	CurrentCoordinateSystem: EToolContextCoordinateSystem;
	ActiveObjects: GizmoBaseObject[];
	NonuniformScaleObjects: GizmoBaseObject[];
	ActiveGizmos: InteractiveGizmo[];
	CameraAxisSource: GizmoConstantFrameAxisSource;
	GizmoGroupObject: GizmoGroupObject;
	AxisXSource: GizmoEditorAxisSource;
	AxisYSource: GizmoEditorAxisSource;
	AxisZSource: GizmoEditorAxisSource;
	AxisXObject: GizmoArrowObject;
	AxisYObject: GizmoArrowObject;
	AxisZObject: GizmoArrowObject;
	UnitAxisXSource: GizmoEditorAxisSource;
	UnitAxisYSource: GizmoEditorAxisSource;
	UnitAxisZSource: GizmoEditorAxisSource;
	StateTarget: GizmoObjectTransformChangeStateTarget;
	static Load(ResourceName: string): EditorTransformGizmo;
	static Find(Outer: UObject, ResourceName: string): EditorTransformGizmo;
	static GetDefaultObject(): EditorTransformGizmo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorTransformGizmo;
	static C(Other: UObject | any): EditorTransformGizmo;
}

declare class EditorInteractiveToolsContext extends InteractiveToolsContext { 
	StandardVertexColorMaterial: MaterialInterface;
	static Load(ResourceName: string): EditorInteractiveToolsContext;
	static Find(Outer: UObject, ResourceName: string): EditorInteractiveToolsContext;
	static GetDefaultObject(): EditorInteractiveToolsContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorInteractiveToolsContext;
	static C(Other: UObject | any): EditorInteractiveToolsContext;
}

declare class EdModeInteractiveToolsContext extends EditorInteractiveToolsContext { 
	ParentModeManagerToolsContext: ModeManagerInteractiveToolsContext;
	static Load(ResourceName: string): EdModeInteractiveToolsContext;
	static Find(Outer: UObject, ResourceName: string): EdModeInteractiveToolsContext;
	static GetDefaultObject(): EdModeInteractiveToolsContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdModeInteractiveToolsContext;
	static C(Other: UObject | any): EdModeInteractiveToolsContext;
}

declare class ModeManagerInteractiveToolsContext extends EditorInteractiveToolsContext { 
	EdModeToolsContexts: EdModeInteractiveToolsContext[];
	static Load(ResourceName: string): ModeManagerInteractiveToolsContext;
	static Find(Outer: UObject, ResourceName: string): ModeManagerInteractiveToolsContext;
	static GetDefaultObject(): ModeManagerInteractiveToolsContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModeManagerInteractiveToolsContext;
	static C(Other: UObject | any): ModeManagerInteractiveToolsContext;
}

declare class GizmoObjectHitTarget extends UObject { 
	GizmoObject: GizmoBaseObject;
	static Load(ResourceName: string): GizmoObjectHitTarget;
	static Find(Outer: UObject, ResourceName: string): GizmoObjectHitTarget;
	static GetDefaultObject(): GizmoObjectHitTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoObjectHitTarget;
	static C(Other: UObject | any): GizmoObjectHitTarget;
}

declare class GizmoObjectWorldTransformSource extends GizmoBaseTransformSource { 
	UObject: GizmoBaseObject;
	bModifyObjectOnTransform: boolean;
	static Load(ResourceName: string): GizmoObjectWorldTransformSource;
	static Find(Outer: UObject, ResourceName: string): GizmoObjectWorldTransformSource;
	static GetDefaultObject(): GizmoObjectWorldTransformSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoObjectWorldTransformSource;
	static C(Other: UObject | any): GizmoObjectWorldTransformSource;
}

declare class AutomationTestExcludelistEntry { 
	Map: string;
	Test: string;
	Reason: string;
	RHIs: any;
	Warn: boolean;
	clone() : AutomationTestExcludelistEntry;
	static C(Other: UObject | any): AutomationTestExcludelistEntry;
}

declare class AutomationTestExcludelist extends UObject { 
	ExcludeTest: AutomationTestExcludelistEntry[];
	static Load(ResourceName: string): AutomationTestExcludelist;
	static Find(Outer: UObject, ResourceName: string): AutomationTestExcludelist;
	static GetDefaultObject(): AutomationTestExcludelist;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationTestExcludelist;
	static C(Other: UObject | any): AutomationTestExcludelist;
}

declare class ScreenshotFallbackEntry { 
	Parent: string;
	Child: string;
	clone() : ScreenshotFallbackEntry;
	static C(Other: UObject | any): ScreenshotFallbackEntry;
}

declare class ScreenShotComparisonSettings extends UObject { 
	bUseConfidentialPlatformPathsForSavedResults: boolean;
	ScreenshotFallbackPlatforms: ScreenshotFallbackEntry[];
	static Load(ResourceName: string): ScreenShotComparisonSettings;
	static Find(Outer: UObject, ResourceName: string): ScreenShotComparisonSettings;
	static GetDefaultObject(): ScreenShotComparisonSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScreenShotComparisonSettings;
	static C(Other: UObject | any): ScreenShotComparisonSettings;
}

declare class AutomatedTestFilter { 
	Contains: string;
	MatchFromStart: boolean;
	MatchFromEnd: boolean;
	clone() : AutomatedTestFilter;
	static C(Other: UObject | any): AutomatedTestFilter;
}

declare class AutomatedTestGroup { 
	Name: string;
	Filters: AutomatedTestFilter[];
	clone() : AutomatedTestGroup;
	static C(Other: UObject | any): AutomatedTestGroup;
}

declare class AutomationControllerSettings extends UObject { 
	Groups: AutomatedTestGroup[];
	bSuppressLogErrors: boolean;
	bSuppressLogWarnings: boolean;
	bElevateLogWarningsToErrors: boolean;
	bTreatLogWarningsAsTestErrors: boolean;
	CheckTestIntervalSeconds: number;
	GameInstanceLostTimerSeconds: number;
	TelemetryDirectory: string;
	bResetTelemetryStorageOnNewSession: boolean;
	static Load(ResourceName: string): AutomationControllerSettings;
	static Find(Outer: UObject, ResourceName: string): AutomationControllerSettings;
	static GetDefaultObject(): AutomationControllerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationControllerSettings;
	static C(Other: UObject | any): AutomationControllerSettings;
}

declare class AutomationEditorTask extends UObject { 
	static Load(ResourceName: string): AutomationEditorTask;
	static Find(Outer: UObject, ResourceName: string): AutomationEditorTask;
	static GetDefaultObject(): AutomationEditorTask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationEditorTask;
	IsValidTask(): boolean;
	IsTaskDone(): boolean;
	static C(Other: UObject | any): AutomationEditorTask;
}

declare class AutomationBlueprintFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AutomationBlueprintFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): AutomationBlueprintFunctionLibrary;
	static GetDefaultObject(): AutomationBlueprintFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationBlueprintFunctionLibrary;
	static TakeHighResScreenshot(ResX: number,ResY: number,Filename: string,Camera: CameraActor,bMaskEnabled: boolean,bCaptureHDR: boolean,ComparisonTolerance: EComparisonTolerance,ComparisonNotes: string,Delay: number): AutomationEditorTask;
	static TakeAutomationScreenshotOfUI(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Options: AutomationScreenshotOptions): void;
	static TakeAutomationScreenshotAtCamera(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Camera: CameraActor,NameOverride: string,Notes: string,Options: AutomationScreenshotOptions): void;
	static TakeAutomationScreenshot(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Notes: string,Options: AutomationScreenshotOptions): void;
	static SetTestTelemetryStorage(StorageName: string): void;
	static SetScalabilityQualityToLow(WorldContextObject: UObject): void;
	static SetScalabilityQualityToEpic(WorldContextObject: UObject): void;
	static SetScalabilityQualityLevelRelativeToMax(WorldContextObject: UObject,Value: number): void;
	static GetStatIncMax(StatName: string): number;
	static GetStatIncAverage(StatName: string): number;
	static GetStatExcMax(StatName: string): number;
	static GetStatExcAverage(StatName: string): number;
	static GetStatCallCount(StatName: string): number;
	static GetDefaultScreenshotOptionsForRendering(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
	static GetDefaultScreenshotOptionsForGameplay(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
	static FinishLoadingBeforeScreenshot(): void;
	static EnableStatGroup(WorldContextObject: UObject,GroupName: string): void;
	static DisableStatGroup(WorldContextObject: UObject,GroupName: string): void;
	static CompareImageAgainstReference(ImageFilePath: string,ComparisonName: string,ComparisonTolerance: EComparisonTolerance,ComparisonNotes: string,WorldContextObject: UObject): boolean;
	static AutomationWaitForLoading(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Options: AutomationWaitForLoadingOptions): void;
	static AreAutomatedTestsRunning(): boolean;
	static AddTestTelemetryData(DataPoint: string,Measurement: number,Context: string): void;
	static AddExpectedLogError(ExpectedPatternString: string,Occurrences: number,ExactMatch: boolean): void;
	static C(Other: UObject | any): AutomationBlueprintFunctionLibrary;
}

declare class FuncTestRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): FuncTestRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): FuncTestRenderingComponent;
	static GetDefaultObject(): FuncTestRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FuncTestRenderingComponent;
	static C(Other: UObject | any): FuncTestRenderingComponent;
}

declare type EFunctionalTestLogHandling = 'ProjectDefault' | 'OutputIsError' | 'OutputIgnored' | 'EFunctionalTestLogHandling_MAX';
declare var EFunctionalTestLogHandling : { ProjectDefault:'ProjectDefault',OutputIsError:'OutputIsError',OutputIgnored:'OutputIgnored',EFunctionalTestLogHandling_MAX:'EFunctionalTestLogHandling_MAX', };
declare type EFunctionalTestResult = 'Default' | 'Invalid' | 'Error' | 'Running' | 'Failed' | 'Succeeded' | 'EFunctionalTestResult_MAX';
declare var EFunctionalTestResult : { Default:'Default',Invalid:'Invalid',Error:'Error',Running:'Running',Failed:'Failed',Succeeded:'Succeeded',EFunctionalTestResult_MAX:'EFunctionalTestResult_MAX', };
declare type EComparisonMethod = 'Equal_To' | 'Not_Equal_To' | 'Greater_Than_Or_Equal_To' | 'Less_Than_Or_Equal_To' | 'Greater_Than' | 'Less_Than' | 'EComparisonMethod_MAX';
declare var EComparisonMethod : { Equal_To:'Equal_To',Not_Equal_To:'Not_Equal_To',Greater_Than_Or_Equal_To:'Greater_Than_Or_Equal_To',Less_Than_Or_Equal_To:'Less_Than_Or_Equal_To',Greater_Than:'Greater_Than',Less_Than:'Less_Than',EComparisonMethod_MAX:'EComparisonMethod_MAX', };
declare class FunctionalTest extends Actor { 
	TestLabel: string;
	SpriteComponent: BillboardComponent;
	bIsEnabled: boolean;
	LogErrorHandling: EFunctionalTestLogHandling;
	LogWarningHandling: EFunctionalTestLogHandling;
	Author: string;
	Description: string;
	ObservationPoint: Actor;
	RandomNumbersStream: RandomStream;
	Result: EFunctionalTestResult;
	PreparationTimeLimit: number;
	TimeLimit: number;
	TimesUpMessage: string;
	TimesUpResult: EFunctionalTestResult;
	OnTestPrepare: UnrealEngineMulticastDelegate<() => void>;
	OnTestStart: UnrealEngineMulticastDelegate<() => void>;
	OnTestFinished: UnrealEngineMulticastDelegate<() => void>;
	AutoDestroyActors: Actor[];
	RenderComp: FuncTestRenderingComponent;
	TestName: TextRenderComponent;
	bIsRunning: boolean;
	TotalTime: number;
	static GetDefaultObject(): FunctionalTest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTest;
	SetTimeLimit(NewTimeLimit: number,ResultWhenTimeRunsOut: EFunctionalTestResult): void;
	RegisterAutoDestroyActor(ActorToAutoDestroy: Actor): void;
	ReceiveStartTest(): void;
	ReceivePrepareTest(): void;
	OnWantsReRunCheck(): boolean;
	OnAdditionalTestFinishedMessageRequest(TestResult: EFunctionalTestResult): string;
	LogMessage(Message: string): void;
	IsRunning(): boolean;
	IsReady(): boolean;
	IsEnabled(): boolean;
	GetCurrentRerunReason(): string;
	FinishTest(TestResult: EFunctionalTestResult,Message: string): void;
	DebugGatherRelevantActors(): Actor[];
	AssertValue_Int(Actual: number,ShouldBe: EComparisonMethod,Expected: number,What: string,ContextObject: UObject): boolean;
	AssertValue_Float(Actual: number,ShouldBe: EComparisonMethod,Expected: number,What: string,ContextObject: UObject): boolean;
	AssertValue_Double(Actual: any,ShouldBe: EComparisonMethod,Expected: any,What: string,ContextObject: UObject): boolean;
	AssertValue_DateTime(Actual: DateTime,ShouldBe: EComparisonMethod,Expected: DateTime,What: string,ContextObject: UObject): boolean;
	AssertTrue(Condition: boolean,Message: string,ContextObject: UObject): boolean;
	AssertNotEqual_Vector(Actual: Vector,NotExpected: Vector,What: string,ContextObject: UObject): boolean;
	AssertNotEqual_Transform(Actual: Transform,NotExpected: Transform,What: string,ContextObject: UObject): boolean;
	AssertNotEqual_String(Actual: string,NotExpected: string,What: string,ContextObject: UObject): boolean;
	AssertNotEqual_Rotator(Actual: Rotator,NotExpected: Rotator,What: string,ContextObject: UObject): boolean;
	AssertIsValid(UObject: UObject,Message: string,ContextObject: UObject): boolean;
	AssertFalse(Condition: boolean,Message: string,ContextObject: UObject): boolean;
	AssertEqual_Vector(Actual: Vector,Expected: Vector,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_Transform(Actual: Transform,Expected: Transform,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_TraceQueryResults(Actual: TraceQueryTestResults,Expected: TraceQueryTestResults,What: string,ContextObject: UObject): boolean;
	AssertEqual_String(Actual: string,Expected: string,What: string,ContextObject: UObject): boolean;
	AssertEqual_Rotator(Actual: Rotator,Expected: Rotator,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_Object(Actual: UObject,Expected: UObject,What: string,ContextObject: UObject): boolean;
	AssertEqual_Name(Actual: string,Expected: string,What: string,ContextObject: UObject): boolean;
	AssertEqual_Int(Actual: number,Expected: number,What: string,ContextObject: UObject): boolean;
	AssertEqual_Float(Actual: number,Expected: number,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_Double(Actual: any,Expected: any,What: string,Tolerance: any,ContextObject: UObject): boolean;
	AssertEqual_Bool(Actual: boolean,Expected: boolean,What: string,ContextObject: UObject): boolean;
	AddWarning(Message: string): void;
	AddRerun(Reason: string): void;
	AddError(Message: string): void;
	static C(Other: UObject | any): FunctionalTest;
}

declare class PendingDelayedSpawn { 
	clone() : PendingDelayedSpawn;
	static C(Other: UObject | any): PendingDelayedSpawn;
}

declare class FunctionalAITestBase extends FunctionalTest { 
	SpawnLocationRandomizationRange: number;
	SpawnedPawns: Pawn[];
	PendingDelayedSpawns: PendingDelayedSpawn[];
	CurrentSpawnSetIndex: number;
	CurrentSpawnSetName: string;
	OnAISpawned: UnrealEngineMulticastDelegate<(Controller: AIController, Pawn: Pawn) => void>;
	OnAllAISPawned: UnrealEngineMulticastDelegate<() => void>;
	NavMeshDebugOrigin: Vector;
	NavMeshDebugExtent: Vector;
	bWaitForNavMesh: boolean;
	bDebugNavMeshOnTimeout: boolean;
	static GetDefaultObject(): FunctionalAITestBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalAITestBase;
	IsOneOfSpawnedPawns(Actor: Actor): boolean;
	static C(Other: UObject | any): FunctionalAITestBase;
}

declare class AITestSpawnSetBase { 
	Name: string;
	bEnabled: boolean;
	FallbackSpawnLocation: Actor;
	clone() : AITestSpawnSetBase;
	static C(Other: UObject | any): AITestSpawnSetBase;
}

declare class AITestSpawnInfoBase { 
	SpawnLocation: Actor;
	NumberToSpawn: number;
	SpawnDelay: number;
	PreSpawnDelay: number;
	clone() : AITestSpawnInfoBase;
	static C(Other: UObject | any): AITestSpawnInfoBase;
}

declare class GenericTeamId { 
	TeamID: number;
	clone() : GenericTeamId;
	static C(Other: UObject | any): GenericTeamId;
}

declare class AITestSpawnInfo extends AITestSpawnInfoBase { 
	PawnClass: UnrealEngineClass;
	ControllerClass: UnrealEngineClass;
	TeamID: GenericTeamId;
	BehaviorTree: BehaviorTree;
	clone() : AITestSpawnInfo;
	static C(Other: UObject | any): AITestSpawnInfo;
}

declare class AITestSpawnSet extends AITestSpawnSetBase { 
	SpawnInfoContainer: AITestSpawnInfo[];
	clone() : AITestSpawnSet;
	static C(Other: UObject | any): AITestSpawnSet;
}

declare class FunctionalAITest extends FunctionalAITestBase { 
	SpawnSets: AITestSpawnSet[];
	static GetDefaultObject(): FunctionalAITest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalAITest;
	static C(Other: UObject | any): FunctionalAITest;
}

declare class AutomationPerformaceHelper extends UObject { 
	static Load(ResourceName: string): AutomationPerformaceHelper;
	static Find(Outer: UObject, ResourceName: string): AutomationPerformaceHelper;
	static GetDefaultObject(): AutomationPerformaceHelper;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationPerformaceHelper;
	WriteLogFile(CaptureDir: string,CaptureExtension: string): void;
	TriggerGPUTraceIfRecordFallsBelowBudget(): void;
	Tick(DeltaSeconds: number): void;
	StopCPUProfiling(): void;
	StartCPUProfiling(): void;
	Sample(DeltaSeconds: number): void;
	OnBeginTests(): void;
	OnAllTestsComplete(): void;
	IsRecording(): boolean;
	IsCurrentRecordWithinRenderThreadBudget(): boolean;
	IsCurrentRecordWithinGPUBudget(): boolean;
	IsCurrentRecordWithinGameThreadBudget(): boolean;
	EndStatsFile(): void;
	EndRecordingBaseline(): void;
	EndRecording(): void;
	BeginStatsFile(RecordName: string): void;
	BeginRecordingBaseline(RecordName: string): void;
	BeginRecording(RecordName: string,InGPUBudget: number,InRenderThreadBudget: number,InGameThreadBudget: number): void;
	static C(Other: UObject | any): AutomationPerformaceHelper;
}

declare class FunctionalTestGameMode extends GameModeBase { 
	static GetDefaultObject(): FunctionalTestGameMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestGameMode;
	static C(Other: UObject | any): FunctionalTestGameMode;
}

declare class FunctionalTestingManager extends BlueprintFunctionLibrary { 
	TestsLeft: FunctionalTest[];
	AllTests: FunctionalTest[];
	OnSetupTests: UnrealEngineMulticastDelegate<() => void>;
	OnTestsComplete: UnrealEngineMulticastDelegate<() => void>;
	OnTestsBegin: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): FunctionalTestingManager;
	static Find(Outer: UObject, ResourceName: string): FunctionalTestingManager;
	static GetDefaultObject(): FunctionalTestingManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestingManager;
	static RunAllFunctionalTests(WorldContextObject: UObject,bNewLog: boolean,bRunLooped: boolean,FailedTestsReproString: string): boolean;
	static C(Other: UObject | any): FunctionalTestingManager;
}

declare class PhasedAutomationActorBase extends Actor { 
	static GetDefaultObject(): PhasedAutomationActorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhasedAutomationActorBase;
	OnFunctionalTestingComplete(): void;
	OnFunctionalTestingBegin(): void;
	static C(Other: UObject | any): PhasedAutomationActorBase;
}

declare class FunctionalTestLevelScript extends LevelScriptActor { 
	static GetDefaultObject(): FunctionalTestLevelScript;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestLevelScript;
	static C(Other: UObject | any): FunctionalTestLevelScript;
}

declare class FunctionalTestUtilityLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): FunctionalTestUtilityLibrary;
	static Find(Outer: UObject, ResourceName: string): FunctionalTestUtilityLibrary;
	static GetDefaultObject(): FunctionalTestUtilityLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestUtilityLibrary;
	static TraceChannelTestUtil(WorldContextObject: UObject,BatchOptions: TraceChannelTestBatchOptions,Start: Vector,End: Vector,SphereCapsuleRadius: number,CapsuleHalfHeight: number,BoxHalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,ObjectTypes: EObjectTypeQuery[],ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],bIgnoreSelf: boolean,DrawDebugType: EDrawDebugTrace,TraceColor: LinearColor,TraceHitColor: LinearColor,DrawTime: number): TraceQueryTestResults;
	static C(Other: UObject | any): FunctionalTestUtilityLibrary;
}

declare class ScreenshotFunctionalTestBase extends FunctionalTest { 
	Notes: string;
	ScreenshotCamera: CameraComponent;
	ScreenshotOptions: AutomationScreenshotOptions;
	static GetDefaultObject(): ScreenshotFunctionalTestBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScreenshotFunctionalTestBase;
	static C(Other: UObject | any): ScreenshotFunctionalTestBase;
}

declare type EWidgetTestAppearLocation = 'Viewport' | 'PlayerScreen' | 'EWidgetTestAppearLocation_MAX';
declare var EWidgetTestAppearLocation : { Viewport:'Viewport',PlayerScreen:'PlayerScreen',EWidgetTestAppearLocation_MAX:'EWidgetTestAppearLocation_MAX', };
declare class FunctionalUIScreenshotTest extends ScreenshotFunctionalTestBase { 
	WidgetClass: UnrealEngineClass;
	SpawnedWidget: UserWidget;
	WidgetLocation: EWidgetTestAppearLocation;
	ScreenshotRT: TextureRenderTarget2D;
	bHideDebugCanvas: boolean;
	static GetDefaultObject(): FunctionalUIScreenshotTest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalUIScreenshotTest;
	static C(Other: UObject | any): FunctionalUIScreenshotTest;
}

declare class GroundTruthData extends UObject { 
	bResetGroundTruth: boolean;
	ObjectData: UObject;
	static Load(ResourceName: string): GroundTruthData;
	static Find(Outer: UObject, ResourceName: string): GroundTruthData;
	static GetDefaultObject(): GroundTruthData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GroundTruthData;
	SaveObject(GroundTruth: UObject): void;
	LoadObject(): UObject;
	CanModify(): boolean;
	static C(Other: UObject | any): GroundTruthData;
}

declare class ScreenshotFunctionalTest extends ScreenshotFunctionalTestBase { 
	bCameraCutOnScreenshotPrep: boolean;
	static GetDefaultObject(): ScreenshotFunctionalTest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScreenshotFunctionalTest;
	static C(Other: UObject | any): ScreenshotFunctionalTest;
}

declare class TestPhaseComponent extends SceneComponent { 
	static Load(ResourceName: string): TestPhaseComponent;
	static Find(Outer: UObject, ResourceName: string): TestPhaseComponent;
	static GetDefaultObject(): TestPhaseComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestPhaseComponent;
	static C(Other: UObject | any): TestPhaseComponent;
}

declare class AudioBusFactory extends Factory { 
	static Load(ResourceName: string): AudioBusFactory;
	static Find(Outer: UObject, ResourceName: string): AudioBusFactory;
	static GetDefaultObject(): AudioBusFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioBusFactory;
	static C(Other: UObject | any): AudioBusFactory;
}

declare class AudioEditorSettings extends DeveloperSettings { 
	bPinSoundCueInAssetMenu: boolean;
	bPinSoundCueTemplateInAssetMenu: boolean;
	bPinSoundAttenuationInAssetMenu: boolean;
	bPinSoundConcurrencyInAssetMenu: boolean;
	static Load(ResourceName: string): AudioEditorSettings;
	static Find(Outer: UObject, ResourceName: string): AudioEditorSettings;
	static GetDefaultObject(): AudioEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioEditorSettings;
	static C(Other: UObject | any): AudioEditorSettings;
}

declare class DialogueVoiceFactory extends Factory { 
	static Load(ResourceName: string): DialogueVoiceFactory;
	static Find(Outer: UObject, ResourceName: string): DialogueVoiceFactory;
	static GetDefaultObject(): DialogueVoiceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueVoiceFactory;
	static C(Other: UObject | any): DialogueVoiceFactory;
}

declare class DialogueWaveFactory extends Factory { 
	InitialSoundWave: SoundWave;
	InitialSpeakerVoice: DialogueVoice;
	HasSetInitialTargetVoice: boolean;
	InitialTargetVoices: DialogueVoice[];
	static Load(ResourceName: string): DialogueWaveFactory;
	static Find(Outer: UObject, ResourceName: string): DialogueWaveFactory;
	static GetDefaultObject(): DialogueWaveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueWaveFactory;
	static C(Other: UObject | any): DialogueWaveFactory;
}

declare class SoundFactory extends Factory { 
	bAutoCreateCue: boolean;
	bIncludeAttenuationNode: boolean;
	bIncludeLoopingNode: boolean;
	bIncludeModulatorNode: boolean;
	CueVolume: number;
	CuePackageSuffix: string;
	static Load(ResourceName: string): SoundFactory;
	static Find(Outer: UObject, ResourceName: string): SoundFactory;
	static GetDefaultObject(): SoundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundFactory;
	static C(Other: UObject | any): SoundFactory;
}

declare class ReimportSoundFactory extends SoundFactory { 
	static Load(ResourceName: string): ReimportSoundFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportSoundFactory;
	static GetDefaultObject(): ReimportSoundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSoundFactory;
	static C(Other: UObject | any): ReimportSoundFactory;
}

declare class ReverbEffectFactory extends Factory { 
	static Load(ResourceName: string): ReverbEffectFactory;
	static Find(Outer: UObject, ResourceName: string): ReverbEffectFactory;
	static GetDefaultObject(): ReverbEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReverbEffectFactory;
	static C(Other: UObject | any): ReverbEffectFactory;
}

declare class SoundAttenuationFactory extends Factory { 
	static Load(ResourceName: string): SoundAttenuationFactory;
	static Find(Outer: UObject, ResourceName: string): SoundAttenuationFactory;
	static GetDefaultObject(): SoundAttenuationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundAttenuationFactory;
	static C(Other: UObject | any): SoundAttenuationFactory;
}

declare class SoundClassFactory extends Factory { 
	static Load(ResourceName: string): SoundClassFactory;
	static Find(Outer: UObject, ResourceName: string): SoundClassFactory;
	static GetDefaultObject(): SoundClassFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassFactory;
	static C(Other: UObject | any): SoundClassFactory;
}

declare class SoundClassGraph extends EdGraph { 
	static Load(ResourceName: string): SoundClassGraph;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraph;
	static GetDefaultObject(): SoundClassGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraph;
	static C(Other: UObject | any): SoundClassGraph;
}

declare class SoundClassGraphNode extends EdGraphNode { 
	SoundClass: SoundClass;
	static Load(ResourceName: string): SoundClassGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraphNode;
	static GetDefaultObject(): SoundClassGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraphNode;
	static C(Other: UObject | any): SoundClassGraphNode;
}

declare class SoundClassGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundClassGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraphSchema;
	static GetDefaultObject(): SoundClassGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraphSchema;
	static C(Other: UObject | any): SoundClassGraphSchema;
}

declare class SoundEffectSourcePresetClassTemplate extends ClassTemplate { 
	static Load(ResourceName: string): SoundEffectSourcePresetClassTemplate;
	static Find(Outer: UObject, ResourceName: string): SoundEffectSourcePresetClassTemplate;
	static GetDefaultObject(): SoundEffectSourcePresetClassTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSourcePresetClassTemplate;
	static C(Other: UObject | any): SoundEffectSourcePresetClassTemplate;
}

declare class SoundEffectSubmixPresetClassTemplate extends ClassTemplate { 
	static Load(ResourceName: string): SoundEffectSubmixPresetClassTemplate;
	static Find(Outer: UObject, ResourceName: string): SoundEffectSubmixPresetClassTemplate;
	static GetDefaultObject(): SoundEffectSubmixPresetClassTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSubmixPresetClassTemplate;
	static C(Other: UObject | any): SoundEffectSubmixPresetClassTemplate;
}

declare class SynthComponentClassTemplate extends ClassTemplate { 
	static Load(ResourceName: string): SynthComponentClassTemplate;
	static Find(Outer: UObject, ResourceName: string): SynthComponentClassTemplate;
	static GetDefaultObject(): SynthComponentClassTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SynthComponentClassTemplate;
	static C(Other: UObject | any): SynthComponentClassTemplate;
}

declare class SoundConcurrencyFactory extends Factory { 
	static Load(ResourceName: string): SoundConcurrencyFactory;
	static Find(Outer: UObject, ResourceName: string): SoundConcurrencyFactory;
	static GetDefaultObject(): SoundConcurrencyFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundConcurrencyFactory;
	static C(Other: UObject | any): SoundConcurrencyFactory;
}

declare class SoundCueFactoryNew extends Factory { 
	InitialSoundWave: SoundWave;
	InitialSoundWaves: any[];
	InitialDialogueWave: DialogueWave;
	InitialDialogueWaves: any[];
	static Load(ResourceName: string): SoundCueFactoryNew;
	static Find(Outer: UObject, ResourceName: string): SoundCueFactoryNew;
	static GetDefaultObject(): SoundCueFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueFactoryNew;
	static C(Other: UObject | any): SoundCueFactoryNew;
}

declare class SoundCueGraph extends EdGraph { 
	static Load(ResourceName: string): SoundCueGraph;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraph;
	static GetDefaultObject(): SoundCueGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraph;
	static C(Other: UObject | any): SoundCueGraph;
}

declare class SoundCueGraphNode_Base extends EdGraphNode { 
	static Load(ResourceName: string): SoundCueGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode_Base;
	static GetDefaultObject(): SoundCueGraphNode_Base;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode_Base;
	static C(Other: UObject | any): SoundCueGraphNode_Base;
}

declare class SoundCueGraphNode extends SoundCueGraphNode_Base { 
	SoundNode: SoundNode;
	static Load(ResourceName: string): SoundCueGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode;
	static GetDefaultObject(): SoundCueGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode;
	static C(Other: UObject | any): SoundCueGraphNode;
}

declare class SoundCueGraphNode_Root extends SoundCueGraphNode_Base { 
	static Load(ResourceName: string): SoundCueGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode_Root;
	static GetDefaultObject(): SoundCueGraphNode_Root;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode_Root;
	static C(Other: UObject | any): SoundCueGraphNode_Root;
}

declare class SoundCueGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundCueGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphSchema;
	static GetDefaultObject(): SoundCueGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphSchema;
	static C(Other: UObject | any): SoundCueGraphSchema;
}

declare class SoundMixFactory extends Factory { 
	static Load(ResourceName: string): SoundMixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundMixFactory;
	static GetDefaultObject(): SoundMixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundMixFactory;
	static C(Other: UObject | any): SoundMixFactory;
}

declare class SoundSourceBusFactory extends Factory { 
	static Load(ResourceName: string): SoundSourceBusFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSourceBusFactory;
	static GetDefaultObject(): SoundSourceBusFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceBusFactory;
	static C(Other: UObject | any): SoundSourceBusFactory;
}

declare class SoundSourceEffectFactory extends Factory { 
	SoundEffectSourcepresetClass: UnrealEngineClass;
	static Load(ResourceName: string): SoundSourceEffectFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSourceEffectFactory;
	static GetDefaultObject(): SoundSourceEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceEffectFactory;
	static C(Other: UObject | any): SoundSourceEffectFactory;
}

declare class SoundSourceEffectChainFactory extends Factory { 
	static Load(ResourceName: string): SoundSourceEffectChainFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSourceEffectChainFactory;
	static GetDefaultObject(): SoundSourceEffectChainFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceEffectChainFactory;
	static C(Other: UObject | any): SoundSourceEffectChainFactory;
}

declare class SoundSubmixEffectFactory extends Factory { 
	SoundEffectSubmixPresetClass: UnrealEngineClass;
	static Load(ResourceName: string): SoundSubmixEffectFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixEffectFactory;
	static GetDefaultObject(): SoundSubmixEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixEffectFactory;
	static C(Other: UObject | any): SoundSubmixEffectFactory;
}

declare class SoundSubmixFactory extends Factory { 
	static Load(ResourceName: string): SoundSubmixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixFactory;
	static GetDefaultObject(): SoundSubmixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixFactory;
	static C(Other: UObject | any): SoundSubmixFactory;
}

declare class SoundfieldSubmixFactory extends Factory { 
	static Load(ResourceName: string): SoundfieldSubmixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundfieldSubmixFactory;
	static GetDefaultObject(): SoundfieldSubmixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundfieldSubmixFactory;
	static C(Other: UObject | any): SoundfieldSubmixFactory;
}

declare class EndpointSubmixFactory extends Factory { 
	static Load(ResourceName: string): EndpointSubmixFactory;
	static Find(Outer: UObject, ResourceName: string): EndpointSubmixFactory;
	static GetDefaultObject(): EndpointSubmixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndpointSubmixFactory;
	static C(Other: UObject | any): EndpointSubmixFactory;
}

declare class SoundfieldEndpointSubmixFactory extends Factory { 
	static Load(ResourceName: string): SoundfieldEndpointSubmixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundfieldEndpointSubmixFactory;
	static GetDefaultObject(): SoundfieldEndpointSubmixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundfieldEndpointSubmixFactory;
	static C(Other: UObject | any): SoundfieldEndpointSubmixFactory;
}

declare class SoundSubmixGraph extends EdGraph { 
	RootSoundSubmix: SoundSubmixBase;
	StaleRoots: SoundSubmixBase[];
	static Load(ResourceName: string): SoundSubmixGraph;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraph;
	static GetDefaultObject(): SoundSubmixGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraph;
	static C(Other: UObject | any): SoundSubmixGraph;
}

declare class SoundSubmixGraphNode extends EdGraphNode { 
	SoundSubmix: SoundSubmixBase;
	SubmixNodeUserWidget: UserWidget;
	static Load(ResourceName: string): SoundSubmixGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraphNode;
	static GetDefaultObject(): SoundSubmixGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraphNode;
	static C(Other: UObject | any): SoundSubmixGraphNode;
}

declare class SoundSubmixGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundSubmixGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraphSchema;
	static GetDefaultObject(): SoundSubmixGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraphSchema;
	static C(Other: UObject | any): SoundSubmixGraphSchema;
}

declare class ToolMenuEditorDialogObject extends UObject { 
	static Load(ResourceName: string): ToolMenuEditorDialogObject;
	static Find(Outer: UObject, ResourceName: string): ToolMenuEditorDialogObject;
	static GetDefaultObject(): ToolMenuEditorDialogObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ToolMenuEditorDialogObject;
	static C(Other: UObject | any): ToolMenuEditorDialogObject;
}

declare class ToolMenuEditorDialogMenu extends ToolMenuEditorDialogObject { 
	Name: string;
	Menu: ToolMenu;
	static Load(ResourceName: string): ToolMenuEditorDialogMenu;
	static Find(Outer: UObject, ResourceName: string): ToolMenuEditorDialogMenu;
	static GetDefaultObject(): ToolMenuEditorDialogMenu;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ToolMenuEditorDialogMenu;
	static C(Other: UObject | any): ToolMenuEditorDialogMenu;
}

declare type ESelectedEditMenuEntryType = 'None' | 'Entry' | 'Section' | 'Menu' | 'ESelectedEditMenuEntryType_MAX';
declare var ESelectedEditMenuEntryType : { None:'None',Entry:'Entry',Section:'Section',Menu:'Menu',ESelectedEditMenuEntryType_MAX:'ESelectedEditMenuEntryType_MAX', };
declare type ECustomizedToolMenuVisibility = 'None' | 'Visible' | 'Hidden' | 'ECustomizedToolMenuVisibility_MAX';
declare var ECustomizedToolMenuVisibility : { None:'None',Visible:'Visible',Hidden:'Hidden',ECustomizedToolMenuVisibility_MAX:'ECustomizedToolMenuVisibility_MAX', };
declare class ToolMenuEditorDialogBlock extends ToolMenuEditorDialogObject { 
	Name: string;
	Type: ESelectedEditMenuEntryType;
	Visibility: ECustomizedToolMenuVisibility;
	Menu: ToolMenu;
	static Load(ResourceName: string): ToolMenuEditorDialogBlock;
	static Find(Outer: UObject, ResourceName: string): ToolMenuEditorDialogBlock;
	static GetDefaultObject(): ToolMenuEditorDialogBlock;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ToolMenuEditorDialogBlock;
	static C(Other: UObject | any): ToolMenuEditorDialogBlock;
}

declare class ToolMenuEditorDialogSection extends ToolMenuEditorDialogBlock { 
	static Load(ResourceName: string): ToolMenuEditorDialogSection;
	static Find(Outer: UObject, ResourceName: string): ToolMenuEditorDialogSection;
	static GetDefaultObject(): ToolMenuEditorDialogSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ToolMenuEditorDialogSection;
	static C(Other: UObject | any): ToolMenuEditorDialogSection;
}

declare class ToolMenuEditorDialogEntry extends ToolMenuEditorDialogBlock { 
	static Load(ResourceName: string): ToolMenuEditorDialogEntry;
	static Find(Outer: UObject, ResourceName: string): ToolMenuEditorDialogEntry;
	static GetDefaultObject(): ToolMenuEditorDialogEntry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ToolMenuEditorDialogEntry;
	static C(Other: UObject | any): ToolMenuEditorDialogEntry;
}

declare class ActorElementDetailsInterface extends UObject { 
	static Load(ResourceName: string): ActorElementDetailsInterface;
	static Find(Outer: UObject, ResourceName: string): ActorElementDetailsInterface;
	static GetDefaultObject(): ActorElementDetailsInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorElementDetailsInterface;
	static C(Other: UObject | any): ActorElementDetailsInterface;
}

declare class ActorElementAssetDataInterface extends UObject { 
	static Load(ResourceName: string): ActorElementAssetDataInterface;
	static Find(Outer: UObject, ResourceName: string): ActorElementAssetDataInterface;
	static GetDefaultObject(): ActorElementAssetDataInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorElementAssetDataInterface;
	static C(Other: UObject | any): ActorElementAssetDataInterface;
}

declare class ActorElementEditorAssetDataInterface extends ActorElementAssetDataInterface { 
	static Load(ResourceName: string): ActorElementEditorAssetDataInterface;
	static Find(Outer: UObject, ResourceName: string): ActorElementEditorAssetDataInterface;
	static GetDefaultObject(): ActorElementEditorAssetDataInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorElementEditorAssetDataInterface;
	static C(Other: UObject | any): ActorElementEditorAssetDataInterface;
}

declare class ActorElementSelectionInterface extends UObject { 
	static Load(ResourceName: string): ActorElementSelectionInterface;
	static Find(Outer: UObject, ResourceName: string): ActorElementSelectionInterface;
	static GetDefaultObject(): ActorElementSelectionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorElementSelectionInterface;
	static C(Other: UObject | any): ActorElementSelectionInterface;
}

declare class ActorElementEditorSelectionInterface extends ActorElementSelectionInterface { 
	static Load(ResourceName: string): ActorElementEditorSelectionInterface;
	static Find(Outer: UObject, ResourceName: string): ActorElementEditorSelectionInterface;
	static GetDefaultObject(): ActorElementEditorSelectionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorElementEditorSelectionInterface;
	static C(Other: UObject | any): ActorElementEditorSelectionInterface;
}

declare class ActorElementWorldInterface extends UObject { 
	static Load(ResourceName: string): ActorElementWorldInterface;
	static Find(Outer: UObject, ResourceName: string): ActorElementWorldInterface;
	static GetDefaultObject(): ActorElementWorldInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorElementWorldInterface;
	static C(Other: UObject | any): ActorElementWorldInterface;
}

declare class ActorElementEditorWorldInterface extends ActorElementWorldInterface { 
	static Load(ResourceName: string): ActorElementEditorWorldInterface;
	static Find(Outer: UObject, ResourceName: string): ActorElementEditorWorldInterface;
	static GetDefaultObject(): ActorElementEditorWorldInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorElementEditorWorldInterface;
	static C(Other: UObject | any): ActorElementEditorWorldInterface;
}

declare class ActorFactoryAmbientSound extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryAmbientSound;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAmbientSound;
	static GetDefaultObject(): ActorFactoryAmbientSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAmbientSound;
	static C(Other: UObject | any): ActorFactoryAmbientSound;
}

declare class ActorFactorySkeletalMesh extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySkeletalMesh;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySkeletalMesh;
	static GetDefaultObject(): ActorFactorySkeletalMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySkeletalMesh;
	static C(Other: UObject | any): ActorFactorySkeletalMesh;
}

declare class ActorFactoryAnimationAsset extends ActorFactorySkeletalMesh { 
	static Load(ResourceName: string): ActorFactoryAnimationAsset;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryAnimationAsset;
	static GetDefaultObject(): ActorFactoryAnimationAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryAnimationAsset;
	static C(Other: UObject | any): ActorFactoryAnimationAsset;
}

declare class ActorFactoryStaticMesh extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryStaticMesh;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryStaticMesh;
	static GetDefaultObject(): ActorFactoryStaticMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryStaticMesh;
	static C(Other: UObject | any): ActorFactoryStaticMesh;
}

declare class ActorFactoryBasicShape extends ActorFactoryStaticMesh { 
	static Load(ResourceName: string): ActorFactoryBasicShape;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBasicShape;
	static GetDefaultObject(): ActorFactoryBasicShape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBasicShape;
	static C(Other: UObject | any): ActorFactoryBasicShape;
}

declare class ActorFactoryBlueprint extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryBlueprint;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBlueprint;
	static GetDefaultObject(): ActorFactoryBlueprint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBlueprint;
	static C(Other: UObject | any): ActorFactoryBlueprint;
}

declare class ActorFactoryBoxReflectionCapture extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryBoxReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryBoxReflectionCapture;
	static GetDefaultObject(): ActorFactoryBoxReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryBoxReflectionCapture;
	static C(Other: UObject | any): ActorFactoryBoxReflectionCapture;
}

declare class ActorFactoryCameraActor extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryCameraActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCameraActor;
	static GetDefaultObject(): ActorFactoryCameraActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCameraActor;
	static C(Other: UObject | any): ActorFactoryCameraActor;
}

declare class ActorFactoryCharacter extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryCharacter;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCharacter;
	static GetDefaultObject(): ActorFactoryCharacter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCharacter;
	static C(Other: UObject | any): ActorFactoryCharacter;
}

declare class ActorFactoryClass extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryClass;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryClass;
	static GetDefaultObject(): ActorFactoryClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryClass;
	static C(Other: UObject | any): ActorFactoryClass;
}

declare class ActorFactoryCylinderVolume extends ActorFactoryVolume { 
	static Load(ResourceName: string): ActorFactoryCylinderVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryCylinderVolume;
	static GetDefaultObject(): ActorFactoryCylinderVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryCylinderVolume;
	static C(Other: UObject | any): ActorFactoryCylinderVolume;
}

declare class ActorFactoryDeferredDecal extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryDeferredDecal;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryDeferredDecal;
	static GetDefaultObject(): ActorFactoryDeferredDecal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryDeferredDecal;
	static C(Other: UObject | any): ActorFactoryDeferredDecal;
}

declare class ActorFactoryDirectionalLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryDirectionalLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryDirectionalLight;
	static GetDefaultObject(): ActorFactoryDirectionalLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryDirectionalLight;
	static C(Other: UObject | any): ActorFactoryDirectionalLight;
}

declare class ActorFactoryEmitter extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryEmitter;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryEmitter;
	static GetDefaultObject(): ActorFactoryEmitter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryEmitter;
	static C(Other: UObject | any): ActorFactoryEmitter;
}

declare class ActorFactoryEmptyActor extends ActorFactory { 
	bVisualizeActor: boolean;
	static Load(ResourceName: string): ActorFactoryEmptyActor;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryEmptyActor;
	static GetDefaultObject(): ActorFactoryEmptyActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryEmptyActor;
	static C(Other: UObject | any): ActorFactoryEmptyActor;
}

declare class ActorFactoryExponentialHeightFog extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryExponentialHeightFog;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryExponentialHeightFog;
	static GetDefaultObject(): ActorFactoryExponentialHeightFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryExponentialHeightFog;
	static C(Other: UObject | any): ActorFactoryExponentialHeightFog;
}

declare class ActorFactoryInteractiveFoliage extends ActorFactoryStaticMesh { 
	static Load(ResourceName: string): ActorFactoryInteractiveFoliage;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryInteractiveFoliage;
	static GetDefaultObject(): ActorFactoryInteractiveFoliage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryInteractiveFoliage;
	static C(Other: UObject | any): ActorFactoryInteractiveFoliage;
}

declare class ActorFactoryLevelSequence extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryLevelSequence;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryLevelSequence;
	static GetDefaultObject(): ActorFactoryLevelSequence;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryLevelSequence;
	static C(Other: UObject | any): ActorFactoryLevelSequence;
}

declare class ActorFactoryNote extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryNote;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryNote;
	static GetDefaultObject(): ActorFactoryNote;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryNote;
	static C(Other: UObject | any): ActorFactoryNote;
}

declare class ActorFactoryPawn extends ActorFactoryEmptyActor { 
	static Load(ResourceName: string): ActorFactoryPawn;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPawn;
	static GetDefaultObject(): ActorFactoryPawn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPawn;
	static C(Other: UObject | any): ActorFactoryPawn;
}

declare class ActorFactoryPhysicsAsset extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPhysicsAsset;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPhysicsAsset;
	static GetDefaultObject(): ActorFactoryPhysicsAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPhysicsAsset;
	static C(Other: UObject | any): ActorFactoryPhysicsAsset;
}

declare class ActorFactoryPlanarReflection extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPlanarReflection;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlanarReflection;
	static GetDefaultObject(): ActorFactoryPlanarReflection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlanarReflection;
	static C(Other: UObject | any): ActorFactoryPlanarReflection;
}

declare class ActorFactoryPlaneReflectionCapture extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPlaneReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlaneReflectionCapture;
	static GetDefaultObject(): ActorFactoryPlaneReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlaneReflectionCapture;
	static C(Other: UObject | any): ActorFactoryPlaneReflectionCapture;
}

declare class ActorFactoryPlayerStart extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPlayerStart;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPlayerStart;
	static GetDefaultObject(): ActorFactoryPlayerStart;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPlayerStart;
	static C(Other: UObject | any): ActorFactoryPlayerStart;
}

declare class ActorFactoryPointLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryPointLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryPointLight;
	static GetDefaultObject(): ActorFactoryPointLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryPointLight;
	static C(Other: UObject | any): ActorFactoryPointLight;
}

declare class ActorFactoryRectLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryRectLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryRectLight;
	static GetDefaultObject(): ActorFactoryRectLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryRectLight;
	static C(Other: UObject | any): ActorFactoryRectLight;
}

declare class ActorFactoryRuntimeVirtualTextureVolume extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryRuntimeVirtualTextureVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryRuntimeVirtualTextureVolume;
	static GetDefaultObject(): ActorFactoryRuntimeVirtualTextureVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryRuntimeVirtualTextureVolume;
	static C(Other: UObject | any): ActorFactoryRuntimeVirtualTextureVolume;
}

declare class ActorFactorySkyAtmosphere extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySkyAtmosphere;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySkyAtmosphere;
	static GetDefaultObject(): ActorFactorySkyAtmosphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySkyAtmosphere;
	static C(Other: UObject | any): ActorFactorySkyAtmosphere;
}

declare class ActorFactorySkyLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySkyLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySkyLight;
	static GetDefaultObject(): ActorFactorySkyLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySkyLight;
	static C(Other: UObject | any): ActorFactorySkyLight;
}

declare class ActorFactorySphereReflectionCapture extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySphereReflectionCapture;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySphereReflectionCapture;
	static GetDefaultObject(): ActorFactorySphereReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySphereReflectionCapture;
	static C(Other: UObject | any): ActorFactorySphereReflectionCapture;
}

declare class ActorFactorySphereVolume extends ActorFactoryVolume { 
	static Load(ResourceName: string): ActorFactorySphereVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySphereVolume;
	static GetDefaultObject(): ActorFactorySphereVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySphereVolume;
	static C(Other: UObject | any): ActorFactorySphereVolume;
}

declare class ActorFactorySpotLight extends ActorFactory { 
	static Load(ResourceName: string): ActorFactorySpotLight;
	static Find(Outer: UObject, ResourceName: string): ActorFactorySpotLight;
	static GetDefaultObject(): ActorFactorySpotLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactorySpotLight;
	static C(Other: UObject | any): ActorFactorySpotLight;
}

declare class ActorFactoryTargetPoint extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTargetPoint;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTargetPoint;
	static GetDefaultObject(): ActorFactoryTargetPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTargetPoint;
	static C(Other: UObject | any): ActorFactoryTargetPoint;
}

declare class ActorFactoryTextRender extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTextRender;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTextRender;
	static GetDefaultObject(): ActorFactoryTextRender;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTextRender;
	static C(Other: UObject | any): ActorFactoryTextRender;
}

declare class ActorFactoryTriggerBox extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTriggerBox;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerBox;
	static GetDefaultObject(): ActorFactoryTriggerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerBox;
	static C(Other: UObject | any): ActorFactoryTriggerBox;
}

declare class ActorFactoryTriggerCapsule extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTriggerCapsule;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerCapsule;
	static GetDefaultObject(): ActorFactoryTriggerCapsule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerCapsule;
	static C(Other: UObject | any): ActorFactoryTriggerCapsule;
}

declare class ActorFactoryTriggerSphere extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryTriggerSphere;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryTriggerSphere;
	static GetDefaultObject(): ActorFactoryTriggerSphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryTriggerSphere;
	static C(Other: UObject | any): ActorFactoryTriggerSphere;
}

declare class ActorFactoryVectorFieldVolume extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryVectorFieldVolume;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryVectorFieldVolume;
	static GetDefaultObject(): ActorFactoryVectorFieldVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryVectorFieldVolume;
	static C(Other: UObject | any): ActorFactoryVectorFieldVolume;
}

declare class ActorFactoryVolumetricCloud extends ActorFactory { 
	static Load(ResourceName: string): ActorFactoryVolumetricCloud;
	static Find(Outer: UObject, ResourceName: string): ActorFactoryVolumetricCloud;
	static GetDefaultObject(): ActorFactoryVolumetricCloud;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryVolumetricCloud;
	static C(Other: UObject | any): ActorFactoryVolumetricCloud;
}

declare class GroupActor extends Actor { 
	bLocked: boolean;
	GroupActors: Actor[];
	SubGroups: GroupActor[];
	static GetDefaultObject(): GroupActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GroupActor;
	static C(Other: UObject | any): GroupActor;
}

declare class ActorGroupingUtils extends UObject { 
	static Load(ResourceName: string): ActorGroupingUtils;
	static Find(Outer: UObject, ResourceName: string): ActorGroupingUtils;
	static GetDefaultObject(): ActorGroupingUtils;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorGroupingUtils;
	UnlockSelectedGroups(): void;
	UngroupSelected(): void;
	UngroupActors(ActorsToUngroup: Actor[]): void;
	static SetGroupingActive(bInGroupingActive: boolean): void;
	RemoveSelectedFromGroup(): void;
	LockSelectedGroups(): void;
	static IsGroupingActive(): boolean;
	GroupSelected(): GroupActor;
	GroupActors(ActorsToGroup: Actor[]): GroupActor;
	static Get(): ActorGroupingUtils;
	AddSelectedToGroup(): void;
	static C(Other: UObject | any): ActorGroupingUtils;
}

declare class BlendSpaceFactory1D extends Factory { 
	TargetSkeleton: Skeleton;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): BlendSpaceFactory1D;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceFactory1D;
	static GetDefaultObject(): BlendSpaceFactory1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceFactory1D;
	static C(Other: UObject | any): BlendSpaceFactory1D;
}

declare class AimOffsetBlendSpaceFactory1D extends BlendSpaceFactory1D { 
	static Load(ResourceName: string): AimOffsetBlendSpaceFactory1D;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpaceFactory1D;
	static GetDefaultObject(): AimOffsetBlendSpaceFactory1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpaceFactory1D;
	static C(Other: UObject | any): AimOffsetBlendSpaceFactory1D;
}

declare class BlendSpaceFactoryNew extends Factory { 
	TargetSkeleton: Skeleton;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): BlendSpaceFactoryNew;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceFactoryNew;
	static GetDefaultObject(): BlendSpaceFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceFactoryNew;
	static C(Other: UObject | any): BlendSpaceFactoryNew;
}

declare class AimOffsetBlendSpaceFactoryNew extends BlendSpaceFactoryNew { 
	static Load(ResourceName: string): AimOffsetBlendSpaceFactoryNew;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpaceFactoryNew;
	static GetDefaultObject(): AimOffsetBlendSpaceFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpaceFactoryNew;
	static C(Other: UObject | any): AimOffsetBlendSpaceFactoryNew;
}

declare class AnalyticsPrivacySettings extends UObject { 
	bSendUsageData: boolean;
	static Load(ResourceName: string): AnalyticsPrivacySettings;
	static Find(Outer: UObject, ResourceName: string): AnalyticsPrivacySettings;
	static GetDefaultObject(): AnalyticsPrivacySettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnalyticsPrivacySettings;
	static C(Other: UObject | any): AnalyticsPrivacySettings;
}

declare class AnimationBlueprintEditorOptions extends UObject { 
	bHideUnrelatedNodes: boolean;
	static Load(ResourceName: string): AnimationBlueprintEditorOptions;
	static Find(Outer: UObject, ResourceName: string): AnimationBlueprintEditorOptions;
	static GetDefaultObject(): AnimationBlueprintEditorOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationBlueprintEditorOptions;
	static C(Other: UObject | any): AnimationBlueprintEditorOptions;
}

declare class AnimBlueprintFactory extends Factory { 
	BlueprintType: EBlueprintType;
	ParentClass: UnrealEngineClass;
	TargetSkeleton: Skeleton;
	PreviewSkeletalMesh: SkeletalMesh;
	bTemplate: boolean;
	static Load(ResourceName: string): AnimBlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintFactory;
	static GetDefaultObject(): AnimBlueprintFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintFactory;
	static C(Other: UObject | any): AnimBlueprintFactory;
}

declare class AnimLayerInterfaceFactory extends AnimBlueprintFactory { 
	static Load(ResourceName: string): AnimLayerInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): AnimLayerInterfaceFactory;
	static GetDefaultObject(): AnimLayerInterfaceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimLayerInterfaceFactory;
	static C(Other: UObject | any): AnimLayerInterfaceFactory;
}

declare class AnimBlueprintThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): AnimBlueprintThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintThumbnailRenderer;
	static GetDefaultObject(): AnimBlueprintThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintThumbnailRenderer;
	static C(Other: UObject | any): AnimBlueprintThumbnailRenderer;
}

declare class AnimBoneCompressionSettingsFactory extends Factory { 
	static Load(ResourceName: string): AnimBoneCompressionSettingsFactory;
	static Find(Outer: UObject, ResourceName: string): AnimBoneCompressionSettingsFactory;
	static GetDefaultObject(): AnimBoneCompressionSettingsFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBoneCompressionSettingsFactory;
	static C(Other: UObject | any): AnimBoneCompressionSettingsFactory;
}

declare class AnimCompositeFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): AnimCompositeFactory;
	static Find(Outer: UObject, ResourceName: string): AnimCompositeFactory;
	static GetDefaultObject(): AnimCompositeFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompositeFactory;
	static C(Other: UObject | any): AnimCompositeFactory;
}

declare class AnimCurveCompressionSettingsFactory extends Factory { 
	static Load(ResourceName: string): AnimCurveCompressionSettingsFactory;
	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionSettingsFactory;
	static GetDefaultObject(): AnimCurveCompressionSettingsFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionSettingsFactory;
	static C(Other: UObject | any): AnimCurveCompressionSettingsFactory;
}

declare class AnimMontageFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): AnimMontageFactory;
	static Find(Outer: UObject, ResourceName: string): AnimMontageFactory;
	static GetDefaultObject(): AnimMontageFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimMontageFactory;
	static C(Other: UObject | any): AnimMontageFactory;
}

declare class ExporterFBX extends Exporter { 
	static Load(ResourceName: string): ExporterFBX;
	static Find(Outer: UObject, ResourceName: string): ExporterFBX;
	static GetDefaultObject(): ExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExporterFBX;
	static C(Other: UObject | any): ExporterFBX;
}

declare class AnimSequenceExporterFBX extends ExporterFBX { 
	static Load(ResourceName: string): AnimSequenceExporterFBX;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceExporterFBX;
	static GetDefaultObject(): AnimSequenceExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceExporterFBX;
	static C(Other: UObject | any): AnimSequenceExporterFBX;
}

declare class AnimSequenceFactory extends Factory { 
	TargetSkeleton: Skeleton;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): AnimSequenceFactory;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceFactory;
	static GetDefaultObject(): AnimSequenceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceFactory;
	static C(Other: UObject | any): AnimSequenceFactory;
}

declare class AnimSequenceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): AnimSequenceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): AnimSequenceThumbnailRenderer;
	static GetDefaultObject(): AnimSequenceThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequenceThumbnailRenderer;
	static C(Other: UObject | any): AnimSequenceThumbnailRenderer;
}

declare class AnimStreamableFactory extends Factory { 
	TargetSkeleton: Skeleton;
	SourceAnimation: AnimSequence;
	static Load(ResourceName: string): AnimStreamableFactory;
	static Find(Outer: UObject, ResourceName: string): AnimStreamableFactory;
	static GetDefaultObject(): AnimStreamableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStreamableFactory;
	static C(Other: UObject | any): AnimStreamableFactory;
}

declare class AssetEditorContextObject extends UObject { 
	static Load(ResourceName: string): AssetEditorContextObject;
	static Find(Outer: UObject, ResourceName: string): AssetEditorContextObject;
	static GetDefaultObject(): AssetEditorContextObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetEditorContextObject;
	static C(Other: UObject | any): AssetEditorContextObject;
}

declare class AssetEditor extends UObject { 
	static Load(ResourceName: string): AssetEditor;
	static Find(Outer: UObject, ResourceName: string): AssetEditor;
	static GetDefaultObject(): AssetEditor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetEditor;
	static C(Other: UObject | any): AssetEditor;
}

declare class AssetEditorSubsystem extends EditorSubsystem { 
	OwnedAssetEditors: AssetEditor[];
	static Load(ResourceName: string): AssetEditorSubsystem;
	static Find(Outer: UObject, ResourceName: string): AssetEditorSubsystem;
	static GetDefaultObject(): AssetEditorSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetEditorSubsystem;
	OpenEditorForAssets(Assets: UObject[]): boolean;
	CloseAllEditorsForAsset(Asset: UObject): number;
	static C(Other: UObject | any): AssetEditorSubsystem;
}

declare class AssetEditorToolkitMenuContext extends UObject { 
	static Load(ResourceName: string): AssetEditorToolkitMenuContext;
	static Find(Outer: UObject, ResourceName: string): AssetEditorToolkitMenuContext;
	static GetDefaultObject(): AssetEditorToolkitMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetEditorToolkitMenuContext;
	static C(Other: UObject | any): AssetEditorToolkitMenuContext;
}

declare class IniStringValue { 
	Section: string;
	Key: string;
	Value: string;
	Filename: string;
	clone() : IniStringValue;
	static C(Other: UObject | any): IniStringValue;
}

declare class AssetGuideline extends AssetUserData { 
	Plugins: string[];
	ProjectSettings: IniStringValue[];
	GuidelineName: string;
	static Load(ResourceName: string): AssetGuideline;
	static Find(Outer: UObject, ResourceName: string): AssetGuideline;
	static GetDefaultObject(): AssetGuideline;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetGuideline;
	static C(Other: UObject | any): AssetGuideline;
}

declare class AssetRegUtilCommandlet extends Commandlet { 
	static Load(ResourceName: string): AssetRegUtilCommandlet;
	static Find(Outer: UObject, ResourceName: string): AssetRegUtilCommandlet;
	static GetDefaultObject(): AssetRegUtilCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetRegUtilCommandlet;
	static C(Other: UObject | any): AssetRegUtilCommandlet;
}

declare class AssetRegistryDumpCommandlet extends Commandlet { 
	static Load(ResourceName: string): AssetRegistryDumpCommandlet;
	static Find(Outer: UObject, ResourceName: string): AssetRegistryDumpCommandlet;
	static GetDefaultObject(): AssetRegistryDumpCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetRegistryDumpCommandlet;
	static C(Other: UObject | any): AssetRegistryDumpCommandlet;
}

declare class AudioMixerCommandlet extends Commandlet { 
	static Load(ResourceName: string): AudioMixerCommandlet;
	static Find(Outer: UObject, ResourceName: string): AudioMixerCommandlet;
	static GetDefaultObject(): AudioMixerCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioMixerCommandlet;
	static C(Other: UObject | any): AudioMixerCommandlet;
}

declare class AutoReimportManager extends UObject { 
	static Load(ResourceName: string): AutoReimportManager;
	static Find(Outer: UObject, ResourceName: string): AutoReimportManager;
	static GetDefaultObject(): AutoReimportManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutoReimportManager;
	static C(Other: UObject | any): AutoReimportManager;
}

declare class BlendSpaceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): BlendSpaceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): BlendSpaceThumbnailRenderer;
	static GetDefaultObject(): BlendSpaceThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpaceThumbnailRenderer;
	static C(Other: UObject | any): BlendSpaceThumbnailRenderer;
}

declare class BlueprintEditorProjectSettings extends DeveloperSettings { 
	bForceAllDependenciesToRecompile: boolean;
	bValidateUnloadedSoftActorReferences: boolean;
	bEnableChildActorExpansionInTreeView: boolean;
	DefaultChildActorTreeViewMode: EChildActorComponentTreeViewVisualizationMode;
	NamespacesToAlwaysInclude: string[];
	DisabledCompilerMessagesExceptEditor: string[];
	DisabledCompilerMessages: string[];
	BaseClassesToAllowRecompilingDuringPlayInEditor: Class[];
	static Load(ResourceName: string): BlueprintEditorProjectSettings;
	static Find(Outer: UObject, ResourceName: string): BlueprintEditorProjectSettings;
	static GetDefaultObject(): BlueprintEditorProjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintEditorProjectSettings;
	static C(Other: UObject | any): BlueprintEditorProjectSettings;
}

declare class BlueprintFactory extends Factory { 
	ParentClass: UnrealEngineClass;
	bSkipClassPicker: boolean;
	static Load(ResourceName: string): BlueprintFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintFactory;
	static GetDefaultObject(): BlueprintFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFactory;
	static C(Other: UObject | any): BlueprintFactory;
}

declare class BlueprintFunctionLibraryFactory extends BlueprintFactory { 
	static Load(ResourceName: string): BlueprintFunctionLibraryFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintFunctionLibraryFactory;
	static GetDefaultObject(): BlueprintFunctionLibraryFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFunctionLibraryFactory;
	static C(Other: UObject | any): BlueprintFunctionLibraryFactory;
}

declare class BlueprintInterfaceFactory extends Factory { 
	static Load(ResourceName: string): BlueprintInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintInterfaceFactory;
	static GetDefaultObject(): BlueprintInterfaceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintInterfaceFactory;
	static C(Other: UObject | any): BlueprintInterfaceFactory;
}

declare class BlueprintMacroFactory extends BlueprintFactory { 
	static Load(ResourceName: string): BlueprintMacroFactory;
	static Find(Outer: UObject, ResourceName: string): BlueprintMacroFactory;
	static GetDefaultObject(): BlueprintMacroFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintMacroFactory;
	static C(Other: UObject | any): BlueprintMacroFactory;
}

declare class BrushEditingSubsystem extends EditorSubsystem { 
	static Load(ResourceName: string): BrushEditingSubsystem;
	static Find(Outer: UObject, ResourceName: string): BrushEditingSubsystem;
	static GetDefaultObject(): BrushEditingSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushEditingSubsystem;
	static C(Other: UObject | any): BrushEditingSubsystem;
}

declare class CanvasRenderTarget2DFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	static Load(ResourceName: string): CanvasRenderTarget2DFactoryNew;
	static Find(Outer: UObject, ResourceName: string): CanvasRenderTarget2DFactoryNew;
	static GetDefaultObject(): CanvasRenderTarget2DFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CanvasRenderTarget2DFactoryNew;
	static C(Other: UObject | any): CanvasRenderTarget2DFactoryNew;
}

declare class CascadeOptions extends UObject { 
	bShowModuleDump: boolean;
	BackgroundColor: Color;
	bUseSubMenus: boolean;
	bUseSpaceBarReset: boolean;
	bUseSpaceBarResetInLevel: boolean;
	Empty_Background: Color;
	Emitter_Background: Color;
	Emitter_Unselected: Color;
	Emitter_Selected: Color;
	ModuleColor_General_Unselected: Color;
	ModuleColor_General_Selected: Color;
	ModuleColor_TypeData_Unselected: Color;
	ModuleColor_TypeData_Selected: Color;
	ModuleColor_Beam_Unselected: Color;
	ModuleColor_Beam_Selected: Color;
	ModuleColor_Trail_Unselected: Color;
	ModuleColor_Trail_Selected: Color;
	ModuleColor_Spawn_Unselected: Color;
	ModuleColor_Spawn_Selected: Color;
	ModuleColor_Light_Unselected: Color;
	ModuleColor_Light_Selected: Color;
	ModuleColor_SubUV_Unselected: Color;
	ModuleColor_SubUV_Selected: Color;
	ModuleColor_Required_Unselected: Color;
	ModuleColor_Required_Selected: Color;
	ModuleColor_Event_Unselected: Color;
	ModuleColor_Event_Selected: Color;
	bShowGrid: boolean;
	GridColor_Hi: Color;
	GridColor_Low: Color;
	GridPerspectiveSize: number;
	bShowParticleCounts: boolean;
	bShowParticleEvents: boolean;
	bShowParticleTimes: boolean;
	bShowParticleDistance: boolean;
	bShowParticleMemory: boolean;
	ParticleMemoryUpdateTime: number;
	bShowFloor: boolean;
	FloorMesh: string;
	FloorPosition: Vector;
	FloorRotation: Rotator;
	FloorScale: number;
	FloorScale3D: Vector;
	ShowPPFlags: number;
	bUseSlimCascadeDraw: boolean;
	SlimCascadeDrawHeight: number;
	bCenterCascadeModuleText: boolean;
	Cascade_MouseMoveThreshold: number;
	MotionModeRadius: number;
	static Load(ResourceName: string): CascadeOptions;
	static Find(Outer: UObject, ResourceName: string): CascadeOptions;
	static GetDefaultObject(): CascadeOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CascadeOptions;
	static C(Other: UObject | any): CascadeOptions;
}

declare class ChunkDependency { 
	ChunkID: number;
	ParentChunkID: number;
	clone() : ChunkDependency;
	static C(Other: UObject | any): ChunkDependency;
}

declare class ChunkDependencyInfo extends UObject { 
	DependencyArray: ChunkDependency[];
	static Load(ResourceName: string): ChunkDependencyInfo;
	static Find(Outer: UObject, ResourceName: string): ChunkDependencyInfo;
	static GetDefaultObject(): ChunkDependencyInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChunkDependencyInfo;
	static C(Other: UObject | any): ChunkDependencyInfo;
}

declare class ClassThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): ClassThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ClassThumbnailRenderer;
	static GetDefaultObject(): ClassThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassThumbnailRenderer;
	static C(Other: UObject | any): ClassThumbnailRenderer;
}

declare type EClassViewerDeveloperType = 'CVDT_None' | 'CVDT_CurrentUser' | 'CVDT_All' | 'CVDT_Max';
declare var EClassViewerDeveloperType : { CVDT_None:'CVDT_None',CVDT_CurrentUser:'CVDT_CurrentUser',CVDT_All:'CVDT_All',CVDT_Max:'CVDT_Max', };
declare class ClassViewerSettings extends UObject { 
	AllowedClasses: string[];
	DisplayInternalClasses: boolean;
	DeveloperFolderType: EClassViewerDeveloperType;
	static Load(ResourceName: string): ClassViewerSettings;
	static Find(Outer: UObject, ResourceName: string): ClassViewerSettings;
	static GetDefaultObject(): ClassViewerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassViewerSettings;
	static C(Other: UObject | any): ClassViewerSettings;
}

declare class CompileAllBlueprintsCommandlet extends Commandlet { 
	static Load(ResourceName: string): CompileAllBlueprintsCommandlet;
	static Find(Outer: UObject, ResourceName: string): CompileAllBlueprintsCommandlet;
	static GetDefaultObject(): CompileAllBlueprintsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompileAllBlueprintsCommandlet;
	static C(Other: UObject | any): CompileAllBlueprintsCommandlet;
}

declare class ComponentElementDetailsInterface extends UObject { 
	static Load(ResourceName: string): ComponentElementDetailsInterface;
	static Find(Outer: UObject, ResourceName: string): ComponentElementDetailsInterface;
	static GetDefaultObject(): ComponentElementDetailsInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentElementDetailsInterface;
	static C(Other: UObject | any): ComponentElementDetailsInterface;
}

declare class ComponentElementSelectionInterface extends UObject { 
	static Load(ResourceName: string): ComponentElementSelectionInterface;
	static Find(Outer: UObject, ResourceName: string): ComponentElementSelectionInterface;
	static GetDefaultObject(): ComponentElementSelectionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentElementSelectionInterface;
	static C(Other: UObject | any): ComponentElementSelectionInterface;
}

declare class ComponentElementEditorSelectionInterface extends ComponentElementSelectionInterface { 
	static Load(ResourceName: string): ComponentElementEditorSelectionInterface;
	static Find(Outer: UObject, ResourceName: string): ComponentElementEditorSelectionInterface;
	static GetDefaultObject(): ComponentElementEditorSelectionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentElementEditorSelectionInterface;
	static C(Other: UObject | any): ComponentElementEditorSelectionInterface;
}

declare class ComponentElementWorldInterface extends UObject { 
	static Load(ResourceName: string): ComponentElementWorldInterface;
	static Find(Outer: UObject, ResourceName: string): ComponentElementWorldInterface;
	static GetDefaultObject(): ComponentElementWorldInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentElementWorldInterface;
	static C(Other: UObject | any): ComponentElementWorldInterface;
}

declare class ComponentElementEditorWorldInterface extends ComponentElementWorldInterface { 
	static Load(ResourceName: string): ComponentElementEditorWorldInterface;
	static Find(Outer: UObject, ResourceName: string): ComponentElementEditorWorldInterface;
	static GetDefaultObject(): ComponentElementEditorWorldInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentElementEditorWorldInterface;
	static C(Other: UObject | any): ComponentElementEditorWorldInterface;
}

declare class CompositeCurveTableFactory extends Factory { 
	static Load(ResourceName: string): CompositeCurveTableFactory;
	static Find(Outer: UObject, ResourceName: string): CompositeCurveTableFactory;
	static GetDefaultObject(): CompositeCurveTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositeCurveTableFactory;
	static C(Other: UObject | any): CompositeCurveTableFactory;
}

declare class DataTableFactory extends Factory { 
	struct: ScriptStruct;
	static Load(ResourceName: string): DataTableFactory;
	static Find(Outer: UObject, ResourceName: string): DataTableFactory;
	static GetDefaultObject(): DataTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTableFactory;
	static C(Other: UObject | any): DataTableFactory;
}

declare class CompositeDataTableFactory extends DataTableFactory { 
	static Load(ResourceName: string): CompositeDataTableFactory;
	static Find(Outer: UObject, ResourceName: string): CompositeDataTableFactory;
	static GetDefaultObject(): CompositeDataTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositeDataTableFactory;
	static C(Other: UObject | any): CompositeDataTableFactory;
}

declare class CompressAnimationsCommandlet extends Commandlet { 
	static Load(ResourceName: string): CompressAnimationsCommandlet;
	static Find(Outer: UObject, ResourceName: string): CompressAnimationsCommandlet;
	static GetDefaultObject(): CompressAnimationsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompressAnimationsCommandlet;
	static C(Other: UObject | any): CompressAnimationsCommandlet;
}

declare class EditorBrushBuilder extends BrushBuilder { 
	static Load(ResourceName: string): EditorBrushBuilder;
	static Find(Outer: UObject, ResourceName: string): EditorBrushBuilder;
	static GetDefaultObject(): EditorBrushBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorBrushBuilder;
	static C(Other: UObject | any): EditorBrushBuilder;
}

declare class ConeBuilder extends EditorBrushBuilder { 
	Z: number;
	CapZ: number;
	OuterRadius: number;
	InnerRadius: number;
	Sides: number;
	GroupName: string;
	AlignToSide: boolean;
	Hollow: boolean;
	static Load(ResourceName: string): ConeBuilder;
	static Find(Outer: UObject, ResourceName: string): ConeBuilder;
	static GetDefaultObject(): ConeBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConeBuilder;
	static C(Other: UObject | any): ConeBuilder;
}

declare class ContentBrowserSettings extends UObject { 
	NumObjectsToLoadBeforeWarning: number;
	bOpenSourcesPanelByDefault: boolean;
	RealTimeThumbnails: boolean;
	DisplayFolders: boolean;
	DisplayEmptyFolders: boolean;
	FilterRecursively: boolean;
	bShowAllFolder: boolean;
	bOrganizeFolders: boolean;
	bDisplayContentFolderSuffix: boolean;
	bDisplayFriendlyNameForPluginFolders: boolean;
	NumObjectsInRecentList: number;
	bEnableRealtimeMaterialInstanceThumbnails: boolean;
	DisplayEngineFolder: boolean;
	DisplayDevelopersFolder: boolean;
	DisplayL10NFolder: boolean;
	DisplayPluginFolders: boolean;
	DisplayFavorites: boolean;
	DockCollections: boolean;
	DisplayCppFolders: boolean;
	IncludeClassNames: boolean;
	IncludeAssetPaths: boolean;
	IncludeCollectionNames: boolean;
	static Load(ResourceName: string): ContentBrowserSettings;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserSettings;
	static GetDefaultObject(): ContentBrowserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserSettings;
	static C(Other: UObject | any): ContentBrowserSettings;
}

declare class ConvertLevelsToExternalActorsCommandlet extends Commandlet { 
	static Load(ResourceName: string): ConvertLevelsToExternalActorsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ConvertLevelsToExternalActorsCommandlet;
	static GetDefaultObject(): ConvertLevelsToExternalActorsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConvertLevelsToExternalActorsCommandlet;
	static C(Other: UObject | any): ConvertLevelsToExternalActorsCommandlet;
}

declare class CookCommandlet extends Commandlet { 
	FullGCAssetClassNames: string[];
	static Load(ResourceName: string): CookCommandlet;
	static Find(Outer: UObject, ResourceName: string): CookCommandlet;
	static GetDefaultObject(): CookCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookCommandlet;
	static C(Other: UObject | any): CookCommandlet;
}

declare class CookGlobalShadersCommandlet extends Commandlet { 
	static Load(ResourceName: string): CookGlobalShadersCommandlet;
	static Find(Outer: UObject, ResourceName: string): CookGlobalShadersCommandlet;
	static GetDefaultObject(): CookGlobalShadersCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookGlobalShadersCommandlet;
	static C(Other: UObject | any): CookGlobalShadersCommandlet;
}

declare class CookGlobalShadersDeviceHelperBase extends UObject { 
	static Load(ResourceName: string): CookGlobalShadersDeviceHelperBase;
	static Find(Outer: UObject, ResourceName: string): CookGlobalShadersDeviceHelperBase;
	static GetDefaultObject(): CookGlobalShadersDeviceHelperBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookGlobalShadersDeviceHelperBase;
	static C(Other: UObject | any): CookGlobalShadersDeviceHelperBase;
}

declare class CookGlobalShadersDeviceHelperStaged extends CookGlobalShadersDeviceHelperBase { 
	static Load(ResourceName: string): CookGlobalShadersDeviceHelperStaged;
	static Find(Outer: UObject, ResourceName: string): CookGlobalShadersDeviceHelperStaged;
	static GetDefaultObject(): CookGlobalShadersDeviceHelperStaged;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookGlobalShadersDeviceHelperStaged;
	static C(Other: UObject | any): CookGlobalShadersDeviceHelperStaged;
}

declare class CookOnTheFlyServer extends UObject { 
	static Load(ResourceName: string): CookOnTheFlyServer;
	static Find(Outer: UObject, ResourceName: string): CookOnTheFlyServer;
	static GetDefaultObject(): CookOnTheFlyServer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookOnTheFlyServer;
	static C(Other: UObject | any): CookOnTheFlyServer;
}

declare class CrashReporterSettings extends UObject { 
	UploadSymbolsPath: string;
	DownstreamStorage: string;
	RemoteStorage: string[];
	static Load(ResourceName: string): CrashReporterSettings;
	static Find(Outer: UObject, ResourceName: string): CrashReporterSettings;
	static GetDefaultObject(): CrashReporterSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrashReporterSettings;
	static C(Other: UObject | any): CrashReporterSettings;
}

declare class CrashReportsPrivacySettings extends UObject { 
	bSendUnattendedBugReports: boolean;
	static Load(ResourceName: string): CrashReportsPrivacySettings;
	static Find(Outer: UObject, ResourceName: string): CrashReportsPrivacySettings;
	static GetDefaultObject(): CrashReportsPrivacySettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrashReportsPrivacySettings;
	static C(Other: UObject | any): CrashReportsPrivacySettings;
}

declare type ECSVImportType = 'ECSV_DataTable' | 'ECSV_CurveTable' | 'ECSV_CurveFloat' | 'ECSV_CurveVector' | 'ECSV_CurveLinearColor' | 'ECSV_MAX';
declare var ECSVImportType : { ECSV_DataTable:'ECSV_DataTable',ECSV_CurveTable:'ECSV_CurveTable',ECSV_CurveFloat:'ECSV_CurveFloat',ECSV_CurveVector:'ECSV_CurveVector',ECSV_CurveLinearColor:'ECSV_CurveLinearColor',ECSV_MAX:'ECSV_MAX', };
declare class CSVImportSettings { 
	ImportRowStruct: ScriptStruct;
	ImportType: ECSVImportType;
	ImportCurveInterpMode: ERichCurveInterpMode;
	clone() : CSVImportSettings;
	static C(Other: UObject | any): CSVImportSettings;
}

declare class CSVImportFactory extends Factory { 
	AutomatedImportSettings: CSVImportSettings;
	DataTableImportOptions: DataTable;
	static Load(ResourceName: string): CSVImportFactory;
	static Find(Outer: UObject, ResourceName: string): CSVImportFactory;
	static GetDefaultObject(): CSVImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CSVImportFactory;
	static C(Other: UObject | any): CSVImportFactory;
}

declare class CubeBuilder extends EditorBrushBuilder { 
	X: number;
	Y: number;
	Z: number;
	WallThickness: number;
	GroupName: string;
	Hollow: boolean;
	Tessellated: boolean;
	static Load(ResourceName: string): CubeBuilder;
	static Find(Outer: UObject, ResourceName: string): CubeBuilder;
	static GetDefaultObject(): CubeBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CubeBuilder;
	static C(Other: UObject | any): CubeBuilder;
}

declare class CurvedStairBuilder extends EditorBrushBuilder { 
	InnerRadius: number;
	StepHeight: number;
	StepWidth: number;
	AngleOfCurve: number;
	NumSteps: number;
	AddToFirstStep: number;
	GroupName: string;
	CounterClockwise: boolean;
	static Load(ResourceName: string): CurvedStairBuilder;
	static Find(Outer: UObject, ResourceName: string): CurvedStairBuilder;
	static GetDefaultObject(): CurvedStairBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurvedStairBuilder;
	static C(Other: UObject | any): CurvedStairBuilder;
}

declare class CurveEdOptions extends UObject { 
	MinViewRange: number;
	MaxViewRange: number;
	BackgroundColor: LinearColor;
	LabelColor: LinearColor;
	SelectedLabelColor: LinearColor;
	GridColor: LinearColor;
	GridTextColor: LinearColor;
	LabelBlockBkgColor: LinearColor;
	SelectedKeyColor: LinearColor;
	static Load(ResourceName: string): CurveEdOptions;
	static Find(Outer: UObject, ResourceName: string): CurveEdOptions;
	static GetDefaultObject(): CurveEdOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEdOptions;
	static C(Other: UObject | any): CurveEdOptions;
}

declare class CurveFactory extends Factory { 
	CurveClass: UnrealEngineClass;
	static Load(ResourceName: string): CurveFactory;
	static Find(Outer: UObject, ResourceName: string): CurveFactory;
	static GetDefaultObject(): CurveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveFactory;
	static C(Other: UObject | any): CurveFactory;
}

declare class CurveFloatFactory extends CurveFactory { 
	static Load(ResourceName: string): CurveFloatFactory;
	static Find(Outer: UObject, ResourceName: string): CurveFloatFactory;
	static GetDefaultObject(): CurveFloatFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveFloatFactory;
	static C(Other: UObject | any): CurveFloatFactory;
}

declare class CurveLinearColorFactory extends CurveFactory { 
	static Load(ResourceName: string): CurveLinearColorFactory;
	static Find(Outer: UObject, ResourceName: string): CurveLinearColorFactory;
	static GetDefaultObject(): CurveLinearColorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColorFactory;
	static C(Other: UObject | any): CurveLinearColorFactory;
}

declare class CurveVectorFactory extends CurveFactory { 
	static Load(ResourceName: string): CurveVectorFactory;
	static Find(Outer: UObject, ResourceName: string): CurveVectorFactory;
	static GetDefaultObject(): CurveVectorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveVectorFactory;
	static C(Other: UObject | any): CurveVectorFactory;
}

declare class CurveImportFactory extends Factory { 
	static Load(ResourceName: string): CurveImportFactory;
	static Find(Outer: UObject, ResourceName: string): CurveImportFactory;
	static GetDefaultObject(): CurveImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveImportFactory;
	static C(Other: UObject | any): CurveImportFactory;
}

declare class CurveLinearColorAtlasFactory extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	static Load(ResourceName: string): CurveLinearColorAtlasFactory;
	static Find(Outer: UObject, ResourceName: string): CurveLinearColorAtlasFactory;
	static GetDefaultObject(): CurveLinearColorAtlasFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColorAtlasFactory;
	static C(Other: UObject | any): CurveLinearColorAtlasFactory;
}

declare class CurveLinearColorThumbnailRenderer extends ThumbnailRenderer { 
	static Load(ResourceName: string): CurveLinearColorThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): CurveLinearColorThumbnailRenderer;
	static GetDefaultObject(): CurveLinearColorThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColorThumbnailRenderer;
	static C(Other: UObject | any): CurveLinearColorThumbnailRenderer;
}

declare class CurveTableFactory extends Factory { 
	static Load(ResourceName: string): CurveTableFactory;
	static Find(Outer: UObject, ResourceName: string): CurveTableFactory;
	static GetDefaultObject(): CurveTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveTableFactory;
	static C(Other: UObject | any): CurveTableFactory;
}

declare class CylinderBuilder extends EditorBrushBuilder { 
	Z: number;
	OuterRadius: number;
	InnerRadius: number;
	Sides: number;
	GroupName: string;
	AlignToSide: boolean;
	Hollow: boolean;
	static Load(ResourceName: string): CylinderBuilder;
	static Find(Outer: UObject, ResourceName: string): CylinderBuilder;
	static GetDefaultObject(): CylinderBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CylinderBuilder;
	static C(Other: UObject | any): CylinderBuilder;
}

declare class DataAssetFactory extends Factory { 
	DataAssetClass: UnrealEngineClass;
	static Load(ResourceName: string): DataAssetFactory;
	static Find(Outer: UObject, ResourceName: string): DataAssetFactory;
	static GetDefaultObject(): DataAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataAssetFactory;
	static C(Other: UObject | any): DataAssetFactory;
}

declare class DDCCleanupCommandlet extends Commandlet { 
	static Load(ResourceName: string): DDCCleanupCommandlet;
	static Find(Outer: UObject, ResourceName: string): DDCCleanupCommandlet;
	static GetDefaultObject(): DDCCleanupCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DDCCleanupCommandlet;
	static C(Other: UObject | any): DDCCleanupCommandlet;
}

declare class DEditorParameterValue extends UObject { 
	bOverride: boolean;
	ParameterInfo: MaterialParameterInfo;
	ExpressionId: Guid;
	SortPriority: number;
	static Load(ResourceName: string): DEditorParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorParameterValue;
	static GetDefaultObject(): DEditorParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorParameterValue;
	static C(Other: UObject | any): DEditorParameterValue;
}

declare class DEditorDoubleVectorParameterValue extends DEditorParameterValue { 
	ParameterValue: Vector4d;
	static Load(ResourceName: string): DEditorDoubleVectorParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorDoubleVectorParameterValue;
	static GetDefaultObject(): DEditorDoubleVectorParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorDoubleVectorParameterValue;
	static C(Other: UObject | any): DEditorDoubleVectorParameterValue;
}

declare class DFontParameters { 
	FontValue: Font;
	FontPage: number;
	clone() : DFontParameters;
	static C(Other: UObject | any): DFontParameters;
}

declare class DEditorFontParameterValue extends DEditorParameterValue { 
	ParameterValue: DFontParameters;
	static Load(ResourceName: string): DEditorFontParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorFontParameterValue;
	static GetDefaultObject(): DEditorFontParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorFontParameterValue;
	static C(Other: UObject | any): DEditorFontParameterValue;
}

declare class DEditorMaterialLayersParameterValue extends DEditorParameterValue { 
	ParameterValue: MaterialLayersFunctions;
	static Load(ResourceName: string): DEditorMaterialLayersParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorMaterialLayersParameterValue;
	static GetDefaultObject(): DEditorMaterialLayersParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorMaterialLayersParameterValue;
	static C(Other: UObject | any): DEditorMaterialLayersParameterValue;
}

declare class DEditorRuntimeVirtualTextureParameterValue extends DEditorParameterValue { 
	ParameterValue: RuntimeVirtualTexture;
	static Load(ResourceName: string): DEditorRuntimeVirtualTextureParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorRuntimeVirtualTextureParameterValue;
	static GetDefaultObject(): DEditorRuntimeVirtualTextureParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorRuntimeVirtualTextureParameterValue;
	static C(Other: UObject | any): DEditorRuntimeVirtualTextureParameterValue;
}

declare class ScalarParameterAtlasData { 
	bIsUsedAsAtlasPosition: boolean;
	Curve: CurveLinearColor;
	Atlas: CurveLinearColorAtlas;
	clone() : ScalarParameterAtlasData;
	static C(Other: UObject | any): ScalarParameterAtlasData;
}

declare class DEditorScalarParameterValue extends DEditorParameterValue { 
	ParameterValue: number;
	AtlasData: ScalarParameterAtlasData;
	static Load(ResourceName: string): DEditorScalarParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorScalarParameterValue;
	static GetDefaultObject(): DEditorScalarParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorScalarParameterValue;
	static C(Other: UObject | any): DEditorScalarParameterValue;
}

declare class DComponentMaskParameter { 
	R: boolean;
	G: boolean;
	B: boolean;
	A: boolean;
	clone() : DComponentMaskParameter;
	static C(Other: UObject | any): DComponentMaskParameter;
}

declare class DEditorStaticComponentMaskParameterValue extends DEditorParameterValue { 
	ParameterValue: DComponentMaskParameter;
	static Load(ResourceName: string): DEditorStaticComponentMaskParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorStaticComponentMaskParameterValue;
	static GetDefaultObject(): DEditorStaticComponentMaskParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorStaticComponentMaskParameterValue;
	static C(Other: UObject | any): DEditorStaticComponentMaskParameterValue;
}

declare class DEditorStaticSwitchParameterValue extends DEditorParameterValue { 
	ParameterValue: boolean;
	static Load(ResourceName: string): DEditorStaticSwitchParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorStaticSwitchParameterValue;
	static GetDefaultObject(): DEditorStaticSwitchParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorStaticSwitchParameterValue;
	static C(Other: UObject | any): DEditorStaticSwitchParameterValue;
}

declare class ParameterChannelNames { 
	R: string;
	G: string;
	B: string;
	A: string;
	clone() : ParameterChannelNames;
	static C(Other: UObject | any): ParameterChannelNames;
}

declare class DEditorTextureParameterValue extends DEditorParameterValue { 
	ParameterValue: Texture;
	ChannelNames: ParameterChannelNames;
	static Load(ResourceName: string): DEditorTextureParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorTextureParameterValue;
	static GetDefaultObject(): DEditorTextureParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorTextureParameterValue;
	static C(Other: UObject | any): DEditorTextureParameterValue;
}

declare class DEditorVectorParameterValue extends DEditorParameterValue { 
	ParameterValue: LinearColor;
	bIsUsedAsChannelMask: boolean;
	ChannelNames: ParameterChannelNames;
	static Load(ResourceName: string): DEditorVectorParameterValue;
	static Find(Outer: UObject, ResourceName: string): DEditorVectorParameterValue;
	static GetDefaultObject(): DEditorVectorParameterValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DEditorVectorParameterValue;
	static C(Other: UObject | any): DEditorVectorParameterValue;
}

declare class EdMode extends UObject { 
	ModeToolsContext: EdModeInteractiveToolsContext;
	SettingsClass: Class;
	SettingsObject: UObject;
	static Load(ResourceName: string): EdMode;
	static Find(Outer: UObject, ResourceName: string): EdMode;
	static GetDefaultObject(): EdMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdMode;
	static C(Other: UObject | any): EdMode;
}

declare class BaseLegacyWidgetEdMode extends EdMode { 
	static Load(ResourceName: string): BaseLegacyWidgetEdMode;
	static Find(Outer: UObject, ResourceName: string): BaseLegacyWidgetEdMode;
	static GetDefaultObject(): BaseLegacyWidgetEdMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseLegacyWidgetEdMode;
	static C(Other: UObject | any): BaseLegacyWidgetEdMode;
}

declare class EdModeDefault extends BaseLegacyWidgetEdMode { 
	static Load(ResourceName: string): EdModeDefault;
	static Find(Outer: UObject, ResourceName: string): EdModeDefault;
	static GetDefaultObject(): EdModeDefault;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdModeDefault;
	static C(Other: UObject | any): EdModeDefault;
}

declare class DerivedDataCacheCommandlet extends Commandlet { 
	static Load(ResourceName: string): DerivedDataCacheCommandlet;
	static Find(Outer: UObject, ResourceName: string): DerivedDataCacheCommandlet;
	static GetDefaultObject(): DerivedDataCacheCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DerivedDataCacheCommandlet;
	static C(Other: UObject | any): DerivedDataCacheCommandlet;
}

declare class DiffAssetRegistriesCommandlet extends Commandlet { 
	AssetRegistrySearchPath: string[];
	P4Repository: string;
	P4EngineBasePath: string;
	P4EngineAssetPath: string;
	P4GameBasePath: string;
	P4GameAssetPath: string;
	RegexBranchCL: string;
	static Load(ResourceName: string): DiffAssetRegistriesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffAssetRegistriesCommandlet;
	static GetDefaultObject(): DiffAssetRegistriesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffAssetRegistriesCommandlet;
	static C(Other: UObject | any): DiffAssetRegistriesCommandlet;
}

declare class DiffAssetsCommandlet extends Commandlet { 
	static Load(ResourceName: string): DiffAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffAssetsCommandlet;
	static GetDefaultObject(): DiffAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffAssetsCommandlet;
	static C(Other: UObject | any): DiffAssetsCommandlet;
}

declare class DiffFilesCommandlet extends Commandlet { 
	static Load(ResourceName: string): DiffFilesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffFilesCommandlet;
	static GetDefaultObject(): DiffFilesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffFilesCommandlet;
	static C(Other: UObject | any): DiffFilesCommandlet;
}

declare class DiffPackagesCommandlet extends Commandlet { 
	Packages: Package;
	static Load(ResourceName: string): DiffPackagesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DiffPackagesCommandlet;
	static GetDefaultObject(): DiffPackagesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DiffPackagesCommandlet;
	static C(Other: UObject | any): DiffPackagesCommandlet;
}

declare class DumpBlueprintsInfoCommandlet extends Commandlet { 
	static Load(ResourceName: string): DumpBlueprintsInfoCommandlet;
	static Find(Outer: UObject, ResourceName: string): DumpBlueprintsInfoCommandlet;
	static GetDefaultObject(): DumpBlueprintsInfoCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DumpBlueprintsInfoCommandlet;
	static C(Other: UObject | any): DumpBlueprintsInfoCommandlet;
}

declare class DumpHiddenCategoriesCommandlet extends Commandlet { 
	static Load(ResourceName: string): DumpHiddenCategoriesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DumpHiddenCategoriesCommandlet;
	static GetDefaultObject(): DumpHiddenCategoriesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DumpHiddenCategoriesCommandlet;
	static C(Other: UObject | any): DumpHiddenCategoriesCommandlet;
}

declare class DumpMaterialShaderTypesCommandlet extends Commandlet { 
	static Load(ResourceName: string): DumpMaterialShaderTypesCommandlet;
	static Find(Outer: UObject, ResourceName: string): DumpMaterialShaderTypesCommandlet;
	static GetDefaultObject(): DumpMaterialShaderTypesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DumpMaterialShaderTypesCommandlet;
	static C(Other: UObject | any): DumpMaterialShaderTypesCommandlet;
}

declare class EdGraphNode_Comment extends EdGraphNode { 
	CommentColor: LinearColor;
	FontSize: number;
	bCommentBubbleVisible_InDetailsPanel: boolean;
	bColorCommentBubble: boolean;
	MoveMode: ECommentBoxMode;
	CommentDepth: number;
	static Load(ResourceName: string): EdGraphNode_Comment;
	static Find(Outer: UObject, ResourceName: string): EdGraphNode_Comment;
	static GetDefaultObject(): EdGraphNode_Comment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode_Comment;
	static C(Other: UObject | any): EdGraphNode_Comment;
}

declare class EditorActorSubsystem extends EditorSubsystem { 
	OnEditCutActorsBegin: UnrealEngineMulticastDelegate<() => void>;
	OnEditCutActorsEnd: UnrealEngineMulticastDelegate<() => void>;
	OnEditCopyActorsBegin: UnrealEngineMulticastDelegate<() => void>;
	OnEditCopyActorsEnd: UnrealEngineMulticastDelegate<() => void>;
	OnEditPasteActorsBegin: UnrealEngineMulticastDelegate<() => void>;
	OnEditPasteActorsEnd: UnrealEngineMulticastDelegate<() => void>;
	OnDuplicateActorsBegin: UnrealEngineMulticastDelegate<() => void>;
	OnDuplicateActorsEnd: UnrealEngineMulticastDelegate<() => void>;
	OnDeleteActorsBegin: UnrealEngineMulticastDelegate<() => void>;
	OnDeleteActorsEnd: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): EditorActorSubsystem;
	static Find(Outer: UObject, ResourceName: string): EditorActorSubsystem;
	static GetDefaultObject(): EditorActorSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorActorSubsystem;
	SpawnActorFromObject(ObjectToUse: UObject,Location: Vector,Rotation: Rotator,bTransient: boolean): Actor;
	SpawnActorFromClass(ActorClass: UnrealEngineClass,Location: Vector,Rotation: Rotator,bTransient: boolean): Actor;
	SetSelectedLevelActors(ActorsToSelect: Actor[]): void;
	SetComponentTransform(InSceneComponent: SceneComponent,InWorldTransform: Transform): boolean;
	SetActorTransform(InActor: Actor,InWorldTransform: Transform): boolean;
	SetActorSelectionState(Actor: Actor,bShouldBeSelected: boolean): void;
	SelectNothing(): void;
	SelectAllChildren(bRecurseChildren: boolean): void;
	SelectAll(InWorld: World): void;
	InvertSelection(InWorld: World): void;
	GetSelectedLevelActors(): Actor[];
	GetAllLevelActorsComponents(): ActorComponent[];
	GetAllLevelActors(): Actor[];
	GetActorReference(PathToActor: string): Actor;
	DuplicateSelectedActors(InWorld: World): void;
	DuplicateActors(ActorsToDuplicate: Actor[],ToWorld: World,Offset: Vector): Actor[];
	DuplicateActor(ActorToDuplicate: Actor,ToWorld: World,Offset: Vector): Actor;
	DestroyActors(ActorsToDestroy: Actor[]): boolean;
	DestroyActor(ActorToDestroy: Actor): boolean;
	DeleteSelectedActors(InWorld: World): void;
	ConvertActors(Actors: Actor[],ActorClass: UnrealEngineClass,StaticMeshPackagePath: string): Actor[];
	ClearActorSelectionSet(): void;
	static C(Other: UObject | any): EditorActorSubsystem;
}

declare class EditorAnimBaseObj extends UObject { 
	static Load(ResourceName: string): EditorAnimBaseObj;
	static Find(Outer: UObject, ResourceName: string): EditorAnimBaseObj;
	static GetDefaultObject(): EditorAnimBaseObj;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimBaseObj;
	static C(Other: UObject | any): EditorAnimBaseObj;
}

declare class EditorAnimCompositeSegment extends EditorAnimBaseObj { 
	AnimSegment: AnimSegment;
	static Load(ResourceName: string): EditorAnimCompositeSegment;
	static Find(Outer: UObject, ResourceName: string): EditorAnimCompositeSegment;
	static GetDefaultObject(): EditorAnimCompositeSegment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimCompositeSegment;
	static C(Other: UObject | any): EditorAnimCompositeSegment;
}

declare class EditorAnimCurveBoneLinks extends UObject { 
	CurveName: SmartName;
	ConnectedBones: BoneReference[];
	MaxLOD: number;
	static Load(ResourceName: string): EditorAnimCurveBoneLinks;
	static Find(Outer: UObject, ResourceName: string): EditorAnimCurveBoneLinks;
	static GetDefaultObject(): EditorAnimCurveBoneLinks;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimCurveBoneLinks;
	static C(Other: UObject | any): EditorAnimCurveBoneLinks;
}

declare class EditorAnimSegment extends EditorAnimBaseObj { 
	AnimSegment: AnimSegment;
	static Load(ResourceName: string): EditorAnimSegment;
	static Find(Outer: UObject, ResourceName: string): EditorAnimSegment;
	static GetDefaultObject(): EditorAnimSegment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorAnimSegment;
	static C(Other: UObject | any): EditorAnimSegment;
}

declare class EditorCompositeSection extends EditorAnimBaseObj { 
	CompositeSection: CompositeSection;
	static Load(ResourceName: string): EditorCompositeSection;
	static Find(Outer: UObject, ResourceName: string): EditorCompositeSection;
	static GetDefaultObject(): EditorCompositeSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorCompositeSection;
	static C(Other: UObject | any): EditorCompositeSection;
}

declare class EditorDomainSaveCommandlet extends Commandlet { 
	static Load(ResourceName: string): EditorDomainSaveCommandlet;
	static Find(Outer: UObject, ResourceName: string): EditorDomainSaveCommandlet;
	static GetDefaultObject(): EditorDomainSaveCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorDomainSaveCommandlet;
	static C(Other: UObject | any): EditorDomainSaveCommandlet;
}

declare type EWindowMode = 'Fullscreen' | 'WindowedFullscreen' | 'Windowed' | 'EWindowMode_MAX';
declare var EWindowMode : { Fullscreen:'Fullscreen',WindowedFullscreen:'WindowedFullscreen',Windowed:'Windowed',EWindowMode_MAX:'EWindowMode_MAX', };
declare class GameUserSettings extends UObject { 
	bUseVSync: boolean;
	bUseDynamicResolution: boolean;
	ResolutionSizeX: any;
	ResolutionSizeY: any;
	LastUserConfirmedResolutionSizeX: any;
	LastUserConfirmedResolutionSizeY: any;
	WindowPosX: number;
	WindowPosY: number;
	FullscreenMode: number;
	LastConfirmedFullscreenMode: number;
	PreferredFullscreenMode: number;
	Version: any;
	AudioQualityLevel: number;
	LastConfirmedAudioQualityLevel: number;
	FrameRateLimit: number;
	DesiredScreenWidth: number;
	bUseDesiredScreenHeight: boolean;
	DesiredScreenHeight: number;
	LastUserConfirmedDesiredScreenWidth: number;
	LastUserConfirmedDesiredScreenHeight: number;
	LastRecommendedScreenWidth: number;
	LastRecommendedScreenHeight: number;
	LastCPUBenchmarkResult: number;
	LastGPUBenchmarkResult: number;
	LastCPUBenchmarkSteps: number[];
	LastGPUBenchmarkSteps: number[];
	LastGPUBenchmarkMultiplier: number;
	bUseHDRDisplayOutput: boolean;
	HDRDisplayOutputNits: number;
	OnGameUserSettingsUINeedsUpdate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): GameUserSettings;
	static Find(Outer: UObject, ResourceName: string): GameUserSettings;
	static GetDefaultObject(): GameUserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameUserSettings;
	ValidateSettings(): void;
	SupportsHDRDisplayOutput(): boolean;
	SetVSyncEnabled(bEnable: boolean): void;
	SetVisualEffectQuality(Value: number): void;
	SetViewDistanceQuality(Value: number): void;
	SetToDefaults(): void;
	SetTextureQuality(Value: number): void;
	SetShadowQuality(Value: number): void;
	SetShadingQuality(Value: number): void;
	SetScreenResolution(Resolution: IntPoint): void;
	SetResolutionScaleValueEx(NewScaleValue: number): void;
	SetResolutionScaleValue(NewScaleValue: number): void;
	SetResolutionScaleNormalized(NewScaleNormalized: number): void;
	SetReflectionQuality(Value: number): void;
	SetPostProcessingQuality(Value: number): void;
	SetOverallScalabilityLevel(Value: number): void;
	SetGlobalIlluminationQuality(Value: number): void;
	SetFullscreenMode(InFullscreenMode: EWindowMode): void;
	SetFrameRateLimit(NewLimit: number): void;
	SetFoliageQuality(Value: number): void;
	SetDynamicResolutionEnabled(bEnable: boolean): void;
	SetBenchmarkFallbackValues(): void;
	SetAudioQualityLevel(QualityLevel: number): void;
	SetAntiAliasingQuality(Value: number): void;
	SaveSettings(): void;
	RunHardwareBenchmark(WorkScale: number,CPUMultiplier: number,GPUMultiplier: number): void;
	RevertVideoMode(): void;
	ResetToCurrentSettings(): void;
	LoadSettings(bForceReload: boolean): void;
	IsVSyncEnabled(): boolean;
	IsVSyncDirty(): boolean;
	IsScreenResolutionDirty(): boolean;
	IsHDREnabled(): boolean;
	IsFullscreenModeDirty(): boolean;
	IsDynamicResolutionEnabled(): boolean;
	IsDynamicResolutionDirty(): boolean;
	IsDirty(): boolean;
	GetVisualEffectQuality(): number;
	GetViewDistanceQuality(): number;
	GetTextureQuality(): number;
	static GetSyncInterval(): number;
	GetShadowQuality(): number;
	GetShadingQuality(): number;
	GetScreenResolution(): IntPoint;
	GetResolutionScaleNormalized(): number;
	GetResolutionScaleInformationEx(CurrentScaleNormalized?: number,CurrentScaleValue?: number,MinScaleValue?: number,MaxScaleValue?: number): {CurrentScaleNormalized: number, CurrentScaleValue: number, MinScaleValue: number, MaxScaleValue: number};
	GetResolutionScaleInformation(CurrentScaleNormalized?: number,CurrentScaleValue?: number,MinScaleValue?: number,MaxScaleValue?: number): {CurrentScaleNormalized: number, CurrentScaleValue: number, MinScaleValue: number, MaxScaleValue: number};
	GetReflectionQuality(): number;
	GetRecommendedResolutionScale(): number;
	GetPreferredFullscreenMode(): EWindowMode;
	GetPostProcessingQuality(): number;
	GetOverallScalabilityLevel(): number;
	GetLastConfirmedScreenResolution(): IntPoint;
	GetLastConfirmedFullscreenMode(): EWindowMode;
	GetGlobalIlluminationQuality(): number;
	static GetGameUserSettings(): GameUserSettings;
	GetFullscreenMode(): EWindowMode;
	GetFrameRateLimit(): number;
	static GetFramePace(): number;
	GetFoliageQuality(): number;
	GetDesktopResolution(): IntPoint;
	static GetDefaultWindowPosition(): IntPoint;
	static GetDefaultWindowMode(): EWindowMode;
	GetDefaultResolutionScale(): number;
	static GetDefaultResolution(): IntPoint;
	GetCurrentHDRDisplayNits(): number;
	GetAudioQualityLevel(): number;
	GetAntiAliasingQuality(): number;
	EnableHDRDisplayOutput(bEnable: boolean,DisplayNits: number): void;
	ConfirmVideoMode(): void;
	ApplySettings(bCheckForCommandLineOverrides: boolean): void;
	ApplyResolutionSettings(bCheckForCommandLineOverrides: boolean): void;
	ApplyNonResolutionSettings(): void;
	ApplyHardwareBenchmarkResults(): void;
	static C(Other: UObject | any): GameUserSettings;
}

declare class AssetManager extends UObject { 
	ObjectReferenceList: UObject[];
	bIsGlobalAsyncScanEnvironment: boolean;
	bShouldGuessTypeAndName: boolean;
	bShouldUseSynchronousLoad: boolean;
	bIsLoadingFromPakFiles: boolean;
	bShouldAcquireMissingChunksOnLoad: boolean;
	bOnlyCookProductionAssets: boolean;
	NumBulkScanRequests: number;
	bIsPrimaryAssetDirectoryCurrent: boolean;
	bIsManagementDatabaseCurrent: boolean;
	bUpdateManagementDatabaseAfterScan: boolean;
	bIncludeOnlyOnDiskAssets: boolean;
	bHasCompletedInitialScan: boolean;
	NumberOfSpawnedNotifications: number;
	static Load(ResourceName: string): AssetManager;
	static Find(Outer: UObject, ResourceName: string): AssetManager;
	static GetDefaultObject(): AssetManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetManager;
	static C(Other: UObject | any): AssetManager;
}

declare class StatColorMapEntry { 
	In: number;
	Out: Color;
	clone() : StatColorMapEntry;
	static C(Other: UObject | any): StatColorMapEntry;
}

declare class StatColorMapping { 
	StatName: string;
	ColorMap: StatColorMapEntry[];
	DisableBlend: boolean;
	clone() : StatColorMapping;
	static C(Other: UObject | any): StatColorMapping;
}

declare class GameNameRedirect { 
	OldGameName: string;
	NewGameName: string;
	clone() : GameNameRedirect;
	static C(Other: UObject | any): GameNameRedirect;
}

declare class ClassRedirect { 
	ObjectName: string;
	OldClassName: string;
	NewClassName: string;
	OldSubobjName: string;
	NewSubobjName: string;
	NewClassClass: string;
	NewClassPackage: string;
	InstanceOnly: boolean;
	clone() : ClassRedirect;
	static C(Other: UObject | any): ClassRedirect;
}

declare class PluginRedirect { 
	OldPluginName: string;
	NewPluginName: string;
	clone() : PluginRedirect;
	static C(Other: UObject | any): PluginRedirect;
}

declare class StructRedirect { 
	OldStructName: string;
	NewStructName: string;
	clone() : StructRedirect;
	static C(Other: UObject | any): StructRedirect;
}

declare type ETransitionType = 'None' | 'Paused' | 'Loading' | 'Saving' | 'Connecting' | 'Precaching' | 'WaitingToConnect' | 'MAX';
declare var ETransitionType : { None:'None',Paused:'Paused',Loading:'Loading',Saving:'Saving',Connecting:'Connecting',Precaching:'Precaching',WaitingToConnect:'WaitingToConnect',MAX:'MAX', };
declare class DropNoteInfo { 
	Location: Vector;
	Rotation: Rotator;
	Comment: string;
	clone() : DropNoteInfo;
	static C(Other: UObject | any): DropNoteInfo;
}

declare class NetDriverDefinition { 
	DefName: string;
	DriverClassName: string;
	DriverClassNameFallback: string;
	clone() : NetDriverDefinition;
	static C(Other: UObject | any): NetDriverDefinition;
}

declare class Engine extends UObject { 
	TinyFont: Font;
	TinyFontName: SoftObjectPath;
	SmallFont: Font;
	SmallFontName: SoftObjectPath;
	MediumFont: Font;
	MediumFontName: SoftObjectPath;
	LargeFont: Font;
	LargeFontName: SoftObjectPath;
	SubtitleFont: Font;
	SubtitleFontName: SoftObjectPath;
	AdditionalFonts: Font[];
	AdditionalFontNames: string[];
	ConsoleClass: UnrealEngineClass;
	ConsoleClassName: SoftClassPath;
	GameViewportClientClass: UnrealEngineClass;
	GameViewportClientClassName: SoftClassPath;
	LocalPlayerClass: UnrealEngineClass;
	LocalPlayerClassName: SoftClassPath;
	WorldSettingsClass: UnrealEngineClass;
	WorldSettingsClassName: SoftClassPath;
	NavigationSystemClassName: SoftClassPath;
	NavigationSystemClass: UnrealEngineClass;
	NavigationSystemConfigClassName: SoftClassPath;
	NavigationSystemConfigClass: UnrealEngineClass;
	AvoidanceManagerClassName: SoftClassPath;
	AvoidanceManagerClass: UnrealEngineClass;
	AIControllerClassName: SoftClassPath;
	PhysicsCollisionHandlerClass: UnrealEngineClass;
	PhysicsCollisionHandlerClassName: SoftClassPath;
	GameUserSettingsClassName: SoftClassPath;
	GameUserSettingsClass: UnrealEngineClass;
	GameUserSettings: GameUserSettings;
	LevelScriptActorClass: UnrealEngineClass;
	LevelScriptActorClassName: SoftClassPath;
	DefaultBlueprintBaseClassName: SoftClassPath;
	GameSingletonClassName: SoftClassPath;
	GameSingleton: UObject;
	AssetManagerClassName: SoftClassPath;
	AssetManager: AssetManager;
	DefaultTexture: Texture2D;
	DefaultTextureName: SoftObjectPath;
	DefaultDiffuseTexture: Texture;
	DefaultDiffuseTextureName: SoftObjectPath;
	DefaultBSPVertexTexture: Texture2D;
	DefaultBSPVertexTextureName: SoftObjectPath;
	HighFrequencyNoiseTexture: Texture2D;
	HighFrequencyNoiseTextureName: SoftObjectPath;
	DefaultBokehTexture: Texture2D;
	DefaultBokehTextureName: SoftObjectPath;
	DefaultBloomKernelTexture: Texture2D;
	DefaultBloomKernelTextureName: SoftObjectPath;
	DefaultFilmGrainTexture: Texture2D;
	DefaultFilmGrainTextureName: SoftObjectPath;
	WireframeMaterial: Material;
	WireframeMaterialName: string;
	GeomMaterial: Material;
	GeomMaterialName: SoftObjectPath;
	DebugMeshMaterial: Material;
	DebugMeshMaterialName: SoftObjectPath;
	EmissiveMeshMaterial: Material;
	EmissiveMeshMaterialName: SoftObjectPath;
	LevelColorationLitMaterial: Material;
	LevelColorationLitMaterialName: string;
	LevelColorationUnlitMaterial: Material;
	LevelColorationUnlitMaterialName: string;
	LightingTexelDensityMaterial: Material;
	LightingTexelDensityName: string;
	ShadedLevelColorationLitMaterial: Material;
	ShadedLevelColorationLitMaterialName: string;
	ShadedLevelColorationUnlitMaterial: Material;
	ShadedLevelColorationUnlitMaterialName: string;
	RemoveSurfaceMaterial: Material;
	RemoveSurfaceMaterialName: SoftObjectPath;
	VertexColorMaterial: Material;
	VertexColorMaterialName: string;
	VertexColorViewModeMaterial_ColorOnly: Material;
	VertexColorViewModeMaterialName_ColorOnly: string;
	VertexColorViewModeMaterial_AlphaAsColor: Material;
	VertexColorViewModeMaterialName_AlphaAsColor: string;
	VertexColorViewModeMaterial_RedOnly: Material;
	VertexColorViewModeMaterialName_RedOnly: string;
	VertexColorViewModeMaterial_GreenOnly: Material;
	VertexColorViewModeMaterialName_GreenOnly: string;
	VertexColorViewModeMaterial_BlueOnly: Material;
	VertexColorViewModeMaterialName_BlueOnly: string;
	BoneWeightMaterial: Material;
	BoneWeightMaterialName: SoftObjectPath;
	ClothPaintMaterial: Material;
	ClothPaintMaterialWireframe: Material;
	ClothPaintMaterialInstance: MaterialInstanceDynamic;
	ClothPaintMaterialWireframeInstance: MaterialInstanceDynamic;
	ClothPaintMaterialName: SoftObjectPath;
	ClothPaintMaterialWireframeName: SoftObjectPath;
	PhysicalMaterialMaskMaterial: Material;
	PhysicalMaterialMaskMaterialName: SoftObjectPath;
	DebugEditorMaterial: Material;
	DefaultFlattenMaterialName: SoftObjectPath;
	DefaultHLODFlattenMaterialName: SoftObjectPath;
	DefaultLandscapeFlattenMaterialName: SoftObjectPath;
	DefaultFlattenMaterial: Material;
	DefaultHLODFlattenMaterial: Material;
	DefaultLandscapeFlattenMaterial: Material;
	DebugEditorMaterialName: SoftObjectPath;
	ConstraintLimitMaterial: Material;
	ConstraintLimitMaterialX: MaterialInstanceDynamic;
	ConstraintLimitMaterialXAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialY: MaterialInstanceDynamic;
	ConstraintLimitMaterialYAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialZ: MaterialInstanceDynamic;
	ConstraintLimitMaterialZAxis: MaterialInstanceDynamic;
	ConstraintLimitMaterialPrismatic: MaterialInstanceDynamic;
	InvalidLightmapSettingsMaterial: Material;
	InvalidLightmapSettingsMaterialName: SoftObjectPath;
	PreviewShadowsIndicatorMaterial: Material;
	PreviewShadowsIndicatorMaterialName: SoftObjectPath;
	ArrowMaterial: Material;
	ArrowMaterialYellow: MaterialInstanceDynamic;
	ArrowMaterialName: SoftObjectPath;
	LightingOnlyBrightness: LinearColor;
	ShaderComplexityColors: LinearColor[];
	QuadComplexityColors: LinearColor[];
	LightComplexityColors: LinearColor[];
	StationaryLightOverlapColors: LinearColor[];
	LODColorationColors: LinearColor[];
	HLODColorationColors: LinearColor[];
	StreamingAccuracyColors: LinearColor[];
	MaxPixelShaderAdditiveComplexityCount: number;
	MaxES3PixelShaderAdditiveComplexityCount: number;
	MinLightMapDensity: number;
	IdealLightMapDensity: number;
	MaxLightMapDensity: number;
	bRenderLightMapDensityGrayscale: boolean;
	RenderLightMapDensityGrayscaleScale: number;
	RenderLightMapDensityColorScale: number;
	LightMapDensityVertexMappedColor: LinearColor;
	LightMapDensitySelectedColor: LinearColor;
	StatColorMappings: StatColorMapping[];
	EditorBrushMaterial: Material;
	EditorBrushMaterialName: SoftObjectPath;
	DefaultPhysMaterial: PhysicalMaterial;
	DefaultPhysMaterialName: SoftObjectPath;
	DefaultDestructiblePhysMaterial: PhysicalMaterial;
	DefaultDestructiblePhysMaterialName: SoftObjectPath;
	ActiveGameNameRedirects: GameNameRedirect[];
	ActiveClassRedirects: ClassRedirect[];
	ActivePluginRedirects: PluginRedirect[];
	ActiveStructRedirects: StructRedirect[];
	PreIntegratedSkinBRDFTexture: Texture2D;
	PreIntegratedSkinBRDFTextureName: SoftObjectPath;
	BlueNoiseTexture: Texture2D;
	BlueNoiseTextureName: SoftObjectPath;
	MiniFontTexture: Texture2D;
	MiniFontTextureName: SoftObjectPath;
	WeightMapPlaceholderTexture: Texture;
	WeightMapPlaceholderTextureName: SoftObjectPath;
	LightMapDensityTexture: Texture2D;
	LightMapDensityTextureName: SoftObjectPath;
	GameViewport: GameViewportClient;
	DeferredCommands: string[];
	NearClipPlane: number;
	bSubtitlesEnabled: boolean;
	bSubtitlesForcedOff: boolean;
	MaximumLoopIterationCount: number;
	bCanBlueprintsTickByDefault: boolean;
	bOptimizeAnimBlueprintMemberVariableAccess: boolean;
	bAllowMultiThreadedAnimationUpdate: boolean;
	bEnableEditorPSysRealtimeLOD: boolean;
	bSmoothFrameRate: boolean;
	bUseFixedFrameRate: boolean;
	FixedFrameRate: number;
	SmoothedFrameRateRange: FloatRange;
	CustomTimeStep: EngineCustomTimeStep;
	CustomTimeStepClassName: SoftClassPath;
	TimecodeProvider: TimecodeProvider;
	TimecodeProviderClassName: SoftClassPath;
	bGenerateDefaultTimecode: boolean;
	GenerateDefaultTimecodeFrameRate: FrameRate;
	GenerateDefaultTimecodeFrameDelay: number;
	bCheckForMultiplePawnsSpawnedInAFrame: boolean;
	NumPawnsAllowedToBeSpawnedInAFrame: number;
	bShouldGenerateLowQualityLightmaps: boolean;
	C_WorldBox: Color;
	C_BrushWire: Color;
	C_AddWire: Color;
	C_SubtractWire: Color;
	C_SemiSolidWire: Color;
	C_NonSolidWire: Color;
	C_WireBackground: Color;
	C_ScaleBoxHi: Color;
	C_VolumeCollision: Color;
	C_BSPCollision: Color;
	C_OrthoBackground: Color;
	C_Volume: Color;
	C_BrushShape: Color;
	StreamingDistanceFactor: number;
	GameScreenshotSaveDirectory: DirectoryPath;
	UseStaticMeshMinLODPerQualityLevels: boolean;
	TransitionType: ETransitionType;
	TransitionDescription: string;
	TransitionGameMode: string;
	bAllowMatureLanguage: boolean;
	CameraRotationThreshold: number;
	CameraTranslationThreshold: number;
	PrimitiveProbablyVisibleTime: number;
	MaxOcclusionPixelsFraction: number;
	bPauseOnLossOfFocus: boolean;
	MaxParticleResize: number;
	MaxParticleResizeWarn: number;
	PendingDroppedNotes: DropNoteInfo[];
	NetClientTicksPerSecond: number;
	DisplayGamma: number;
	MinDesiredFrameRate: number;
	DefaultSelectedMaterialColor: LinearColor;
	SelectedMaterialColor: LinearColor;
	SelectionOutlineColor: LinearColor;
	SubduedSelectionOutlineColor: LinearColor;
	SelectedMaterialColorOverride: LinearColor;
	bIsOverridingSelectedColor: boolean;
	bEnableOnScreenDebugMessages: boolean;
	bEnableOnScreenDebugMessagesDisplay: boolean;
	bSuppressMapWarnings: boolean;
	bDisableAILogging: boolean;
	bEnableVisualLogRecordingOnStart: any;
	ScreenSaverInhibitorSemaphore: number;
	bLockReadOnlyLevels: boolean;
	ParticleEventManagerClassPath: string;
	SelectionHighlightIntensity: number;
	BSPSelectionHighlightIntensity: number;
	SelectionHighlightIntensityBillboards: number;
	NetDriverDefinitions: NetDriverDefinition[];
	ServerActors: string[];
	RuntimeServerActors: string[];
	NetErrorLogInterval: number;
	bStartedLoadMapMovie: boolean;
	NextWorldContextHandle: number;
	static Load(ResourceName: string): Engine;
	static Find(Outer: UObject, ResourceName: string): Engine;
	static GetDefaultObject(): Engine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Engine;
	static C(Other: UObject | any): Engine;
	GetEditorWorld(): World;
	GetPIEWorld(): World;
	HasUndo(): boolean;
	SetClientTravel(InWorld: World,NextURL: string,InTravelType: ETravelType): void;
	static GetEditorWorld(Engine: Engine): World;
	static GetPIEWorld(Engine: Engine): World;
	static HasUndo(Engine: Engine): boolean;
	static SetClientTravel(Engine: Engine,InWorld: World,NextURL: string,InTravelType: ETravelType): void;
}

declare class JavascriptTransaction { 
	clone() : JavascriptTransaction;
	static C(Other: UObject | any): JavascriptTransaction;
	GetContext(): string;
	GetPrimaryObject(): UObject;
	GetTitle(): string;
	static GetContext(Transaction: JavascriptTransaction): string;
	static GetPrimaryObject(Transaction: JavascriptTransaction): UObject;
	static GetTitle(Transaction: JavascriptTransaction): string;
}

declare class Transactor extends UObject { 
	static Load(ResourceName: string): Transactor;
	static Find(Outer: UObject, ResourceName: string): Transactor;
	static GetDefaultObject(): Transactor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Transactor;
	static C(Other: UObject | any): Transactor;
	GetQueueLength(): number;
	GetTransaction(QueueIndex: number): JavascriptTransaction;
	IsActive(): boolean;
	static GetQueueLength(Transactor: Transactor): number;
	static GetTransaction(Transactor: Transactor,QueueIndex: number): JavascriptTransaction;
	static IsActive(Transactor: Transactor): boolean;
}

declare class EditorWorldExtensionCollection extends UObject { 
	static Load(ResourceName: string): EditorWorldExtensionCollection;
	static Find(Outer: UObject, ResourceName: string): EditorWorldExtensionCollection;
	static GetDefaultObject(): EditorWorldExtensionCollection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorWorldExtensionCollection;
	static C(Other: UObject | any): EditorWorldExtensionCollection;
}

declare class EditorWorldExtensionManager extends UObject { 
	EditorWorldExtensionCollection: EditorWorldExtensionCollection[];
	static Load(ResourceName: string): EditorWorldExtensionManager;
	static Find(Outer: UObject, ResourceName: string): EditorWorldExtensionManager;
	static GetDefaultObject(): EditorWorldExtensionManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorWorldExtensionManager;
	static C(Other: UObject | any): EditorWorldExtensionManager;
}

declare class LevelEditorDragDropHandler extends UObject { 
	static Load(ResourceName: string): LevelEditorDragDropHandler;
	static Find(Outer: UObject, ResourceName: string): LevelEditorDragDropHandler;
	static GetDefaultObject(): LevelEditorDragDropHandler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorDragDropHandler;
	static C(Other: UObject | any): LevelEditorDragDropHandler;
}

declare type ECsgOper = 'CSG_Active' | 'CSG_Add' | 'CSG_Subtract' | 'CSG_Intersect' | 'CSG_Deintersect' | 'CSG_None' | 'CSG_MAX';
declare var ECsgOper : { CSG_Active:'CSG_Active',CSG_Add:'CSG_Add',CSG_Subtract:'CSG_Subtract',CSG_Intersect:'CSG_Intersect',CSG_Deintersect:'CSG_Deintersect',CSG_None:'CSG_None',CSG_MAX:'CSG_MAX', };
declare class USelection extends UObject { 
	ElementSelectionSet: TypedElementSelectionSet;
	static Load(ResourceName: string): USelection;
	static Find(Outer: UObject, ResourceName: string): USelection;
	static GetDefaultObject(): USelection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): USelection;
	static C(Other: UObject | any): USelection;
	Deselect(InObject: UObject): void;
	DeselectAll(InClass: UnrealEngineClass): void;
	GetSelectedObjects(Out?: UObject[]): {Out: UObject[], $: number};
	Select(InObject: UObject): void;
	ToggleSelect(InObject: UObject): void;
	static Deselect(USelection: USelection,InObject: UObject): void;
	static DeselectAll(USelection: USelection,InClass: UnrealEngineClass): void;
	static GetSelectedObjects(USelection: USelection,Out?: UObject[]): {Out: UObject[], $: number};
	static Select(USelection: USelection,InObject: UObject): void;
	static ToggleSelect(USelection: USelection,InObject: UObject): void;
}

declare class EditorEngine extends Engine { 
	TempModel: Model;
	ConversionTempModel: Model;
	Trans: Transactor;
	Bad: Texture2D;
	EditorFont: Font;
	PreviewSoundCue: SoundCue;
	PreviewAudioComponent: AudioComponent;
	EditorCube: StaticMesh;
	EditorSphere: StaticMesh;
	EditorPlane: StaticMesh;
	EditorCylinder: StaticMesh;
	bFastRebuild: boolean;
	IsImportingT3D: boolean;
	ClickFlags: any;
	ParentContext: Package;
	UnsnappedClickLocation: Vector;
	ClickLocation: Vector;
	ClickPlane: Plane;
	MouseMovement: Vector;
	DetailMode: EDetailMode;
	UseSizingBox: boolean;
	UseAxisIndicator: boolean;
	GodMode: boolean;
	GameCommandLine: string;
	bShowBrushMarkerPolys: boolean;
	bEnableSocketSnapping: boolean;
	bEnableLODLocking: boolean;
	HeightMapExportClassName: string;
	ActorFactories: ActorFactory[];
	UserOpenedFile: string;
	InEditorGameURLOptions: string;
	PlayWorld: World;
	bIsToggleBetweenPIEandSIEQueued: boolean;
	bAllowMultiplePIEWorlds: boolean;
	bRequestEndPlayMapQueued: boolean;
	bSquelchTransactionNotification: boolean;
	bNotifyUndoRedoSelectionChange: boolean;
	PlayFromHerePlayerStartClass: UnrealEngineClass;
	EditorWorld: World;
	ActorsThatWereSelected: any[];
	PlayWorldDestination: number;
	CurrentPlayWorldDestination: number;
	bMobilePreviewPortrait: boolean;
	BuildPlayDevice: number;
	UserEditedPlayWorldURL: string;
	ScratchRenderTarget2048: TextureRenderTarget2D;
	ScratchRenderTarget1024: TextureRenderTarget2D;
	ScratchRenderTarget512: TextureRenderTarget2D;
	ScratchRenderTarget256: TextureRenderTarget2D;
	PreviewMeshComp: StaticMeshComponent;
	PreviewMeshIndex: number;
	bShowPreviewMesh: boolean;
	bCustomCameraAlignEmitter: boolean;
	CustomCameraAlignEmitterDistance: number;
	bDrawSocketsInGMode: boolean;
	bDrawParticleHelpers: boolean;
	BrushBuilders: BrushBuilder[];
	EditorWorldExtensionsManager: EditorWorldExtensionManager;
	DragDropHandler: LevelEditorDragDropHandler;
	ActorGroupingUtilsClassName: SoftClassPath;
	ActorGroupingUtils: ActorGroupingUtils;
	PlayWorldLocation: Vector;
	PlayWorldRotation: Rotator;
	bIsPlayWorldQueued: boolean;
	bIsSimulateInEditorQueued: boolean;
	bHasPlayWorldPlacement: boolean;
	bUseMobilePreviewForPlayWorld: boolean;
	bUseVRPreviewForPlayWorld: boolean;
	bIsSimulatingInEditor: boolean;
	PlayInEditorViewportIndex: number;
	static Load(ResourceName: string): EditorEngine;
	static Find(Outer: UObject, ResourceName: string): EditorEngine;
	static GetDefaultObject(): EditorEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorEngine;
	static C(Other: UObject | any): EditorEngine;
	bspBrushCSG(Actor: Brush,Model: Model,PolyFlags: number,BrushType: EBrushType,CSGOper: ECsgOper,bBuildBounds: boolean,bMergePolys: boolean,bReplaceNULLMaterialRefs: boolean,bShowProgressBar: boolean): number;
	CanSelectActor(Actor: Actor,bInSelected: boolean,bSelectEvenIfHidden: boolean,bWarnIfLevelLocked: boolean): boolean;
	Exec(InWorld: World,Command: string,Out?: string): {Out: string, $: boolean};
	FindBrushBuilder(BrushBuilderClass: UnrealEngineClass): BrushBuilder;
	GetSelectedActors(): USelection;
	GetSelectedComponents(): USelection;
	GetSelectedObjects(): USelection;
	GetSelectedSet(Class: UnrealEngineClass): USelection;
	RebuildLevel(Level: Level): void;
	RebuildStaticNavigableGeometry(Level: Level): void;
	RedrawAllViewports(bInvalidateHitProxies: boolean): void;
	SelectActor(Actor: Actor,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean,bForceRefresh: boolean): void;
	SelectComponent(Component: ActorComponent,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): void;
	SelectGroup(InGroupActor: GroupActor,bForceSelection: boolean,bInSelected: boolean,bNotify: boolean): void;
	SelectNone(bNoteSelectionChange: boolean,bDeselectBSPSurfs: boolean,WarnAboutManyActors: boolean): void;
	SetMaterial(InModel: Model,Material: MaterialInterface,Surfaces: number[]): void;
	static bspBrushCSG(Engine: EditorEngine,Actor: Brush,Model: Model,PolyFlags: number,BrushType: EBrushType,CSGOper: ECsgOper,bBuildBounds: boolean,bMergePolys: boolean,bReplaceNULLMaterialRefs: boolean,bShowProgressBar: boolean): number;
	static CanSelectActor(Engine: EditorEngine,Actor: Actor,bInSelected: boolean,bSelectEvenIfHidden: boolean,bWarnIfLevelLocked: boolean): boolean;
	static Exec(Engine: EditorEngine,InWorld: World,Command: string,Out?: string): {Out: string, $: boolean};
	static FindBrushBuilder(Engine: EditorEngine,BrushBuilderClass: UnrealEngineClass): BrushBuilder;
	static GetSelectedActors(Engine: EditorEngine): USelection;
	static GetSelectedComponents(Engine: EditorEngine): USelection;
	static GetSelectedObjects(Engine: EditorEngine): USelection;
	static GetSelectedSet(Engine: EditorEngine,Class: UnrealEngineClass): USelection;
	static RebuildLevel(Engine: EditorEngine,Level: Level): void;
	static RebuildStaticNavigableGeometry(Engine: EditorEngine,Level: Level): void;
	static RedrawAllViewports(Engine: EditorEngine,bInvalidateHitProxies: boolean): void;
	static SelectActor(Engine: EditorEngine,Actor: Actor,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean,bForceRefresh: boolean): void;
	static SelectComponent(Engine: EditorEngine,Component: ActorComponent,bInSelected: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): void;
	static SelectGroup(Engine: EditorEngine,InGroupActor: GroupActor,bForceSelection: boolean,bInSelected: boolean,bNotify: boolean): void;
	static SelectNone(Engine: EditorEngine,bNoteSelectionChange: boolean,bDeselectBSPSurfs: boolean,WarnAboutManyActors: boolean): void;
	static SetMaterial(Engine: EditorEngine,InModel: Model,Material: MaterialInterface,Surfaces: number[]): void;
}

declare type EConsoleForGamepadLabels = 'None' | 'XBoxOne' | 'PS4' | 'EConsoleForGamepadLabels_MAX';
declare var EConsoleForGamepadLabels : { None:'None',XBoxOne:'XBoxOne',PS4:'PS4',EConsoleForGamepadLabels_MAX:'EConsoleForGamepadLabels_MAX', };
declare class EditorExperimentalSettings extends UObject { 
	bEnableAsyncTextureCompilation: boolean;
	bEnableAsyncStaticMeshCompilation: boolean;
	bEnableAsyncSkeletalMeshCompilation: boolean;
	bEnableInterchangeFramework: boolean;
	bEnableInterchangeFrameworkForTextureOnly: boolean;
	bHDREditor: boolean;
	HDREditorNITLevel: number;
	bProceduralFoliage: boolean;
	bEnableTranslationPicker: boolean;
	ConsoleForGamepadLabels: EConsoleForGamepadLabels;
	bToolbarCustomization: boolean;
	bBreakOnExceptions: boolean;
	bDrawMidpointArrowsInBlueprints: boolean;
	bContextMenuChunkAssignments: boolean;
	bDisableCookInEditor: boolean;
	bSharedCookedBuilds: boolean;
	MultiProcessCooking: number;
	bAllowLateJoinInPIE: boolean;
	bAllowVulkanPreview: boolean;
	bEnableMultithreadedLightmapEncoding: boolean;
	bEnableMultithreadedShadowmapEncoding: boolean;
	bUseOpenCLForConvexHullDecomp: boolean;
	bAllowPotentiallyUnsafePropertyEditing: boolean;
	bFacialAnimationImporter: boolean;
	bEnableOneFilePerActorSupport: boolean;
	bEnableActorFolderObjectSupport: boolean;
	bMobilePIEPreviewDeviceLaunch: boolean;
	bTextAssetFormatSupport: boolean;
	bExampleLayersAndBlends: boolean;
	bEnableLongPathsSupport: boolean;
	bPackedLevelActor: boolean;
	bLevelInstance: boolean;
	static Load(ResourceName: string): EditorExperimentalSettings;
	static Find(Outer: UObject, ResourceName: string): EditorExperimentalSettings;
	static GetDefaultObject(): EditorExperimentalSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorExperimentalSettings;
	static C(Other: UObject | any): EditorExperimentalSettings;
}

declare type ELevelVisibilityDirtyMode = 'ModifyOnChange' | 'DontModify' | 'ELevelVisibilityDirtyMode_MAX';
declare var ELevelVisibilityDirtyMode : { ModifyOnChange:'ModifyOnChange',DontModify:'DontModify',ELevelVisibilityDirtyMode_MAX:'ELevelVisibilityDirtyMode_MAX', };
declare class EditorLevelUtils extends UObject { 
	static Load(ResourceName: string): EditorLevelUtils;
	static Find(Outer: UObject, ResourceName: string): EditorLevelUtils;
	static GetDefaultObject(): EditorLevelUtils;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorLevelUtils;
	static SetLevelVisibility(Level: Level,bShouldBeVisible: boolean,bForceLayersVisible: boolean,ModifyMode: ELevelVisibilityDirtyMode): void;
	static SetLevelsVisibility(Levels: Level[],bShouldBeVisible: boolean[],bForceLayersVisible: boolean,ModifyMode: ELevelVisibilityDirtyMode): void;
	static MoveSelectedActorsToLevel(DestLevel: LevelStreaming,bWarnAboutReferences: boolean): number;
	static MoveActorsToLevel(ActorsToMove: Actor[],DestStreamingLevel: LevelStreaming,bWarnAboutReferences: boolean,bWarnAboutRenaming: boolean): number;
	static MakeLevelCurrent(InStreamingLevel: LevelStreaming): void;
	static K2_AddLevelToWorldWithTransform(World: World,LevelPackageName: string,LevelStreamingClass: UnrealEngineClass,LevelTransform: Transform): LevelStreaming;
	static K2_AddLevelToWorld(World: World,LevelPackageName: string,LevelStreamingClass: UnrealEngineClass): LevelStreaming;
	static GetLevels(World: World): Level[];
	static CreateNewStreamingLevel(LevelStreamingClass: UnrealEngineClass,NewLevelPath: string,bMoveSelectedActorsIntoNewLevel: boolean): LevelStreaming;
	static C(Other: UObject | any): EditorLevelUtils;
}

declare type ELoadLevelAtStartup = 'None' | 'ProjectDefault' | 'LastOpened' | 'ELoadLevelAtStartup_MAX';
declare var ELoadLevelAtStartup : { None:'None',ProjectDefault:'ProjectDefault',LastOpened:'LastOpened',ELoadLevelAtStartup_MAX:'ELoadLevelAtStartup_MAX', };
declare class AutoReimportWildcard { 
	wildcard: string;
	bInclude: boolean;
	clone() : AutoReimportWildcard;
	static C(Other: UObject | any): AutoReimportWildcard;
}

declare class AutoReimportDirectoryConfig { 
	SourceDirectory: string;
	MountPoint: string;
	Wildcards: AutoReimportWildcard[];
	clone() : AutoReimportDirectoryConfig;
	static C(Other: UObject | any): AutoReimportDirectoryConfig;
}

declare class EditorLoadingSavingSettings extends UObject { 
	LoadLevelAtStartup: ELoadLevelAtStartup;
	bForceCompilationAtStartup: boolean;
	bRestoreOpenAssetTabsOnRestart: boolean;
	bEnableSourceControlCompatabilityCheck: boolean;
	bMonitorContentDirectories: boolean;
	AutoReimportDirectories: string[];
	AutoReimportDirectorySettings: AutoReimportDirectoryConfig[];
	AutoReimportThreshold: number;
	bAutoCreateAssets: boolean;
	bAutoDeleteAssets: boolean;
	bDetectChangesOnStartup: boolean;
	bPromptBeforeAutoImporting: boolean;
	bDeleteSourceFilesWithAssets: boolean;
	bAutoReimportTextures: boolean;
	bAutoReimportCSV: boolean;
	bDirtyMigratedBlueprints: boolean;
	bAutoSaveEnable: boolean;
	bAutoSaveMaps: boolean;
	bAutoSaveContent: boolean;
	AutoSaveTimeMinutes: number;
	AutoSaveInteractionDelayInSeconds: number;
	AutoSaveWarningInSeconds: number;
	bAutomaticallyCheckoutOnAssetModification: boolean;
	bPromptForCheckoutOnAssetModification: boolean;
	bSCCAutoAddNewFiles: boolean;
	bSCCUseGlobalSettings: boolean;
	TextDiffToolPath: FilePath;
	static Load(ResourceName: string): EditorLoadingSavingSettings;
	static Find(Outer: UObject, ResourceName: string): EditorLoadingSavingSettings;
	static GetDefaultObject(): EditorLoadingSavingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorLoadingSavingSettings;
	static C(Other: UObject | any): EditorLoadingSavingSettings;
}

declare class EditorMiscSettings extends UObject { 
	static Load(ResourceName: string): EditorMiscSettings;
	static Find(Outer: UObject, ResourceName: string): EditorMiscSettings;
	static GetDefaultObject(): EditorMiscSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorMiscSettings;
	static C(Other: UObject | any): EditorMiscSettings;
}

declare class EditorNotifyObject extends EditorAnimBaseObj { 
	Event: AnimNotifyEvent;
	static Load(ResourceName: string): EditorNotifyObject;
	static Find(Outer: UObject, ResourceName: string): EditorNotifyObject;
	static GetDefaultObject(): EditorNotifyObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorNotifyObject;
	static C(Other: UObject | any): EditorNotifyObject;
}

declare class EditorParentPlayerListObj extends UObject { 
	Overrides: AnimParentNodeAssetOverride[];
	static Load(ResourceName: string): EditorParentPlayerListObj;
	static Find(Outer: UObject, ResourceName: string): EditorParentPlayerListObj;
	static GetDefaultObject(): EditorParentPlayerListObj;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorParentPlayerListObj;
	static C(Other: UObject | any): EditorParentPlayerListObj;
}

declare type EEditorUserScreenPercentageModeOverride = 'ProjectDefault' | 'Manual' | 'BasedOnDisplayResolution' | 'BasedOnDPIScale' | 'EEditorUserScreenPercentageModeOverride_MAX';
declare var EEditorUserScreenPercentageModeOverride : { ProjectDefault:'ProjectDefault',Manual:'Manual',BasedOnDisplayResolution:'BasedOnDisplayResolution',BasedOnDPIScale:'BasedOnDPIScale',EEditorUserScreenPercentageModeOverride_MAX:'EEditorUserScreenPercentageModeOverride_MAX', };
declare class EditorPerformanceSettings extends DeveloperSettings { 
	bShowFrameRateAndMemory: boolean;
	bThrottleCPUWhenNotForeground: boolean;
	bDisableRealtimeViewportsInRemoteSessions: boolean;
	bMonitorEditorPerformance: boolean;
	bEnableSharedDDCPerformanceNotifications: boolean;
	bEnableScalabilityWarningIndicator: boolean;
	bDisplayHighDPIViewports: boolean;
	bOverridePIEScreenPercentage: boolean;
	RealtimeScreenPercentageMode: EEditorUserScreenPercentageModeOverride;
	NonRealtimeScreenPercentageMode: EEditorUserScreenPercentageModeOverride;
	bOverrideManualScreenPercentage: boolean;
	ManualScreenPercentage: number;
	bOverrideMinViewportRenderingResolution: boolean;
	MinViewportRenderingResolution: number;
	bOverrideMaxViewportRenderingResolution: boolean;
	MaxViewportRenderingResolution: number;
	static Load(ResourceName: string): EditorPerformanceSettings;
	static Find(Outer: UObject, ResourceName: string): EditorPerformanceSettings;
	static GetDefaultObject(): EditorPerformanceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorPerformanceSettings;
	static C(Other: UObject | any): EditorPerformanceSettings;
}

declare class EditorPerProjectUserSettings extends UObject { 
	bDisplayUIExtensionPoints: boolean;
	bDisplayDocumentationLink: boolean;
	bDisplayActionListItemRefIds: boolean;
	bAlwaysGatherBehaviorTreeDebuggerData: boolean;
	bDisplayBlackboardKeysInAlphabeticalOrder: boolean;
	bDisplayEngineVersionInBadge: boolean;
	bUseSimplygonSwarm: boolean;
	SimplygonServerIP: string;
	bEnableSwarmDebugging: boolean;
	SimplygonSwarmDelay: any;
	SwarmNumOfConcurrentJobs: any;
	SwarmMaxUploadChunkSizeInMB: any;
	SwarmIntermediateFolder: string;
	bAutomaticallyHotReloadNewClasses: boolean;
	bShowCompilerLogOnCompileError: boolean;
	bKeepFbxNamespace: boolean;
	bShowImportDialogAtReimport: boolean;
	DataSourceFolder: DirectoryPath;
	bKeepAttachHierarchy: boolean;
	bAnimationReimportWarnings: boolean;
	bUseCurvesForDistributions: boolean;
	PropertyMatrix_NumberOfPasteOperationsBeforeWarning: number;
	bSCSEditorShowGrid: boolean;
	bSCSEditorShowFloor: boolean;
	bGetAttentionOnUATCompletion: boolean;
	bAlwaysBuildUAT: boolean;
	SCSViewportCameraSpeed: number;
	bAutoloadCheckedOutPackages: boolean;
	bSuppressFullyLoadPrompt: boolean;
	bAllowSelectTranslucent: boolean;
	BlueprintFavorites: BlueprintPaletteFavorites;
	AssetViewerProfileIndex: number;
	AssetViewerProfileName: string;
	PreviewFeatureLevel: number;
	PreviewPlatformName: string;
	PreviewShaderFormatName: string;
	bPreviewFeatureLevelActive: boolean;
	bPreviewFeatureLevelWasDefault: boolean;
	PreviewDeviceProfileName: string;
	static Load(ResourceName: string): EditorPerProjectUserSettings;
	static Find(Outer: UObject, ResourceName: string): EditorPerProjectUserSettings;
	static GetDefaultObject(): EditorPerProjectUserSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorPerProjectUserSettings;
	static C(Other: UObject | any): EditorPerProjectUserSettings;
}

declare class InstancedPlacemenClientSettings extends UObject { 
	UpdateGuid: Guid;
	ObjectPath: SoftObjectPath;
	InstancedComponentSettings: ISMComponentDescriptor;
	static Load(ResourceName: string): InstancedPlacemenClientSettings;
	static Find(Outer: UObject, ResourceName: string): InstancedPlacemenClientSettings;
	static GetDefaultObject(): InstancedPlacemenClientSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InstancedPlacemenClientSettings;
	static C(Other: UObject | any): InstancedPlacemenClientSettings;
}

declare class EditorInstancedPlacementSettings extends InstancedPlacemenClientSettings { 
	static Load(ResourceName: string): EditorInstancedPlacementSettings;
	static Find(Outer: UObject, ResourceName: string): EditorInstancedPlacementSettings;
	static GetDefaultObject(): EditorInstancedPlacementSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorInstancedPlacementSettings;
	static C(Other: UObject | any): EditorInstancedPlacementSettings;
}

declare type EUnit = 'Micrometers' | 'Millimeters' | 'Centimeters' | 'Meters' | 'Kilometers' | 'Inches' | 'Feet' | 'Yards' | 'Miles' | 'Lightyears' | 'Degrees' | 'Radians' | 'CentimetersPerSecond' | 'MetersPerSecond' | 'KilometersPerHour' | 'MilesPerHour' | 'Celsius' | 'Farenheit' | 'Kelvin' | 'Micrograms' | 'Milligrams' | 'Grams' | 'Kilograms' | 'MetricTons' | 'Ounces' | 'Pounds' | 'Stones' | 'Newtons' | 'PoundsForce' | 'KilogramsForce' | 'Hertz' | 'Kilohertz' | 'Megahertz' | 'Gigahertz' | 'RevolutionsPerMinute' | 'Bytes' | 'Kilobytes' | 'Megabytes' | 'Gigabytes' | 'Terabytes' | 'Lumens' | 'Milliseconds' | 'Seconds' | 'Minutes' | 'Hours' | 'Days' | 'Months' | 'Years' | 'Multiplier' | 'Percentage' | 'Unspecified' | 'EUnit_MAX';
declare var EUnit : { Micrometers:'Micrometers',Millimeters:'Millimeters',Centimeters:'Centimeters',Meters:'Meters',Kilometers:'Kilometers',Inches:'Inches',Feet:'Feet',Yards:'Yards',Miles:'Miles',Lightyears:'Lightyears',Degrees:'Degrees',Radians:'Radians',CentimetersPerSecond:'CentimetersPerSecond',MetersPerSecond:'MetersPerSecond',KilometersPerHour:'KilometersPerHour',MilesPerHour:'MilesPerHour',Celsius:'Celsius',Farenheit:'Farenheit',Kelvin:'Kelvin',Micrograms:'Micrograms',Milligrams:'Milligrams',Grams:'Grams',Kilograms:'Kilograms',MetricTons:'MetricTons',Ounces:'Ounces',Pounds:'Pounds',Stones:'Stones',Newtons:'Newtons',PoundsForce:'PoundsForce',KilogramsForce:'KilogramsForce',Hertz:'Hertz',Kilohertz:'Kilohertz',Megahertz:'Megahertz',Gigahertz:'Gigahertz',RevolutionsPerMinute:'RevolutionsPerMinute',Bytes:'Bytes',Kilobytes:'Kilobytes',Megabytes:'Megabytes',Gigabytes:'Gigabytes',Terabytes:'Terabytes',Lumens:'Lumens',Milliseconds:'Milliseconds',Seconds:'Seconds',Minutes:'Minutes',Hours:'Hours',Days:'Days',Months:'Months',Years:'Years',Multiplier:'Multiplier',Percentage:'Percentage',Unspecified:'Unspecified',EUnit_MAX:'EUnit_MAX', };
declare type EReferenceViewerSettingMode = 'NoPreference' | 'ShowByDefault' | 'HideByDefault' | 'EReferenceViewerSettingMode_MAX';
declare var EReferenceViewerSettingMode : { NoPreference:'NoPreference',ShowByDefault:'ShowByDefault',HideByDefault:'HideByDefault',EReferenceViewerSettingMode_MAX:'EReferenceViewerSettingMode_MAX', };
declare type EUnitDisplay = 'None' | 'Metric' | 'Imperial' | 'Invalid' | 'EUnitDisplay_MAX';
declare var EUnitDisplay : { None:'None',Metric:'Metric',Imperial:'Imperial',Invalid:'Invalid',EUnitDisplay_MAX:'EUnitDisplay_MAX', };
declare type EDefaultLocationUnit = 'Micrometers' | 'Millimeters' | 'Centimeters' | 'Meters' | 'Kilometers' | 'Inches' | 'Feet' | 'Yards' | 'Miles' | 'Invalid' | 'EDefaultLocationUnit_MAX';
declare var EDefaultLocationUnit : { Micrometers:'Micrometers',Millimeters:'Millimeters',Centimeters:'Centimeters',Meters:'Meters',Kilometers:'Kilometers',Inches:'Inches',Feet:'Feet',Yards:'Yards',Miles:'Miles',Invalid:'Invalid',EDefaultLocationUnit_MAX:'EDefaultLocationUnit_MAX', };
declare class EditorProjectAppearanceSettings extends DeveloperSettings { 
	bDisplayUnits: boolean;
	bDisplayUnitsOnComponentTransforms: boolean;
	DistanceUnits: EUnit[];
	MassUnits: EUnit[];
	TimeUnits: EUnit[];
	AngleUnits: EUnit;
	SpeedUnits: EUnit;
	TemperatureUnits: EUnit;
	ForceUnits: EUnit;
	ShowSearchableNames: EReferenceViewerSettingMode;
	ReferenceViewerDefaultMaxSearchBreadth: number;
	UnitDisplay: EUnitDisplay;
	DefaultInputUnits: EDefaultLocationUnit;
	static Load(ResourceName: string): EditorProjectAppearanceSettings;
	static Find(Outer: UObject, ResourceName: string): EditorProjectAppearanceSettings;
	static GetDefaultObject(): EditorProjectAppearanceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorProjectAppearanceSettings;
	static C(Other: UObject | any): EditorProjectAppearanceSettings;
}

declare type ELevelEditor2DAxis = 'X' | 'Y' | 'Z' | 'ELevelEditor2DAxis_MAX';
declare var ELevelEditor2DAxis : { X:'X',Y:'Y',Z:'Z',ELevelEditor2DAxis_MAX:'ELevelEditor2DAxis_MAX', };
declare class Mode2DLayer { 
	Name: string;
	Depth: number;
	clone() : Mode2DLayer;
	static C(Other: UObject | any): Mode2DLayer;
}

declare class LevelEditor2DSettings extends DeveloperSettings { 
	bEnable2DWidget: boolean;
	bEnableSnapLayers: boolean;
	SnapAxis: ELevelEditor2DAxis;
	SnapLayers: Mode2DLayer[];
	static Load(ResourceName: string): LevelEditor2DSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditor2DSettings;
	static GetDefaultObject(): LevelEditor2DSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditor2DSettings;
	static C(Other: UObject | any): LevelEditor2DSettings;
}

declare type EScreenPercentageMode = 'Manual' | 'BasedOnDisplayResolution' | 'BasedOnDPIScale' | 'EScreenPercentageMode_MAX';
declare var EScreenPercentageMode : { Manual:'Manual',BasedOnDisplayResolution:'BasedOnDisplayResolution',BasedOnDPIScale:'BasedOnDPIScale',EScreenPercentageMode_MAX:'EScreenPercentageMode_MAX', };
declare class EditorPerformanceProjectSettings extends DeveloperSettings { 
	RealtimeScreenPercentageMode: EScreenPercentageMode;
	NonRealtimeScreenPercentageMode: EScreenPercentageMode;
	ManualScreenPercentage: number;
	MinViewportRenderingResolution: number;
	MaxViewportRenderingResolution: number;
	static Load(ResourceName: string): EditorPerformanceProjectSettings;
	static Find(Outer: UObject, ResourceName: string): EditorPerformanceProjectSettings;
	static GetDefaultObject(): EditorPerformanceProjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorPerformanceProjectSettings;
	static C(Other: UObject | any): EditorPerformanceProjectSettings;
}

declare class DDCProjectSettings extends DeveloperSettings { 
	EnableWarnings: boolean;
	RecommendEveryoneSetupAGlobalLocalDDCPath: boolean;
	RecommendEveryoneSetupAGlobalSharedDDCPath: boolean;
	RecommendEveryoneSetupAGlobalS3DDCPath: boolean;
	RecommendEveryoneEnableS3DDC: boolean;
	RecommendEveryoneUseHordeStorage: boolean;
	static Load(ResourceName: string): DDCProjectSettings;
	static Find(Outer: UObject, ResourceName: string): DDCProjectSettings;
	static GetDefaultObject(): DDCProjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DDCProjectSettings;
	static C(Other: UObject | any): DDCProjectSettings;
}

declare class RecentProjectFile { 
	ProjectName: string;
	LastOpenTime: DateTime;
	clone() : RecentProjectFile;
	static C(Other: UObject | any): RecentProjectFile;
}

declare class EditorSettings extends UObject { 
	GlobalLocalDDCPath: DirectoryPath;
	GlobalSharedDDCPath: DirectoryPath;
	LocalDerivedDataCache: DirectoryPath;
	SharedDerivedDataCache: DirectoryPath;
	bEnableDDCNotifications: boolean;
	bNotifyUseHordeStorage: boolean;
	bNotifySetupDDCPath: boolean;
	bNotifyEnableS3DD: boolean;
	bEnableS3DDC: boolean;
	GlobalS3DDCPath: DirectoryPath;
	bLoadTheMostRecentlyLoadedProjectAtStartup: boolean;
	bEditorAnalyticsEnabled: boolean;
	RecentlyOpenedProjectFiles: RecentProjectFile[];
	CreatedProjectPaths: string[];
	bCopyStarterContentPreference: boolean;
	CompletedSurveys: Guid[];
	InProgressSurveys: Guid[];
	AutoScalabilityWorkScaleAmount: number;
	static Load(ResourceName: string): EditorSettings;
	static Find(Outer: UObject, ResourceName: string): EditorSettings;
	static GetDefaultObject(): EditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSettings;
	static C(Other: UObject | any): EditorSettings;
}

declare class EditorSkeletonNotifyObj extends UObject { 
	Name: string;
	static Load(ResourceName: string): EditorSkeletonNotifyObj;
	static Find(Outer: UObject, ResourceName: string): EditorSkeletonNotifyObj;
	static GetDefaultObject(): EditorSkeletonNotifyObj;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSkeletonNotifyObj;
	static C(Other: UObject | any): EditorSkeletonNotifyObj;
}

declare class EditorStaticMeshFactory extends ActorFactoryStaticMesh { 
	static Load(ResourceName: string): EditorStaticMeshFactory;
	static Find(Outer: UObject, ResourceName: string): EditorStaticMeshFactory;
	static GetDefaultObject(): EditorStaticMeshFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorStaticMeshFactory;
	static C(Other: UObject | any): EditorStaticMeshFactory;
}

declare class EditorSubsystemBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): EditorSubsystemBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): EditorSubsystemBlueprintLibrary;
	static GetDefaultObject(): EditorSubsystemBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSubsystemBlueprintLibrary;
	static GetEditorSubsystem(Class: UnrealEngineClass): EditorSubsystem;
	static C(Other: UObject | any): EditorSubsystemBlueprintLibrary;
}

declare class EnumFactory extends Factory { 
	static Load(ResourceName: string): EnumFactory;
	static Find(Outer: UObject, ResourceName: string): EnumFactory;
	static GetDefaultObject(): EnumFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnumFactory;
	static C(Other: UObject | any): EnumFactory;
}

declare class GatherTextCommandletBase extends Commandlet { 
	static Load(ResourceName: string): GatherTextCommandletBase;
	static Find(Outer: UObject, ResourceName: string): GatherTextCommandletBase;
	static GetDefaultObject(): GatherTextCommandletBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextCommandletBase;
	static C(Other: UObject | any): GatherTextCommandletBase;
}

declare class ExportDialogueScriptCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): ExportDialogueScriptCommandlet;
	static Find(Outer: UObject, ResourceName: string): ExportDialogueScriptCommandlet;
	static GetDefaultObject(): ExportDialogueScriptCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExportDialogueScriptCommandlet;
	static C(Other: UObject | any): ExportDialogueScriptCommandlet;
}

declare class ExportPakDependenciesCommandlet extends Commandlet { 
	static Load(ResourceName: string): ExportPakDependenciesCommandlet;
	static Find(Outer: UObject, ResourceName: string): ExportPakDependenciesCommandlet;
	static GetDefaultObject(): ExportPakDependenciesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExportPakDependenciesCommandlet;
	static C(Other: UObject | any): ExportPakDependenciesCommandlet;
}

declare class ExportTextContainer extends UObject { 
	ExportText: string;
	static Load(ResourceName: string): ExportTextContainer;
	static Find(Outer: UObject, ResourceName: string): ExportTextContainer;
	static GetDefaultObject(): ExportTextContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExportTextContainer;
	static C(Other: UObject | any): ExportTextContainer;
}

declare class ExternalActorsCommandlet extends Commandlet { 
	static Load(ResourceName: string): ExternalActorsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ExternalActorsCommandlet;
	static GetDefaultObject(): ExternalActorsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExternalActorsCommandlet;
	static C(Other: UObject | any): ExternalActorsCommandlet;
}

declare class ExtractLocResCommandlet extends Commandlet { 
	static Load(ResourceName: string): ExtractLocResCommandlet;
	static Find(Outer: UObject, ResourceName: string): ExtractLocResCommandlet;
	static GetDefaultObject(): ExtractLocResCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExtractLocResCommandlet;
	static C(Other: UObject | any): ExtractLocResCommandlet;
}

declare class FbxSceneImportData extends UObject { 
	SourceFbxFile: string;
	static Load(ResourceName: string): FbxSceneImportData;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportData;
	static GetDefaultObject(): FbxSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportData;
	static C(Other: UObject | any): FbxSceneImportData;
}

declare class FbxAssetImportData extends AssetImportData { 
	ImportTranslation: Vector;
	ImportRotation: Rotator;
	ImportUniformScale: number;
	bConvertScene: boolean;
	bForceFrontXAxis: boolean;
	bConvertSceneUnit: boolean;
	bImportAsScene: boolean;
	FbxSceneImportDataReference: FbxSceneImportData;
	static Load(ResourceName: string): FbxAssetImportData;
	static Find(Outer: UObject, ResourceName: string): FbxAssetImportData;
	static GetDefaultObject(): FbxAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxAssetImportData;
	static C(Other: UObject | any): FbxAssetImportData;
}

declare type EFBXAnimationLengthImportType = 'FBXALIT_ExportedTime' | 'FBXALIT_AnimatedKey' | 'FBXALIT_SetRange' | 'FBXALIT_MAX';
declare var EFBXAnimationLengthImportType : { FBXALIT_ExportedTime:'FBXALIT_ExportedTime',FBXALIT_AnimatedKey:'FBXALIT_AnimatedKey',FBXALIT_SetRange:'FBXALIT_SetRange',FBXALIT_MAX:'FBXALIT_MAX', };
declare class FbxAnimSequenceImportData extends FbxAssetImportData { 
	bImportMeshesInBoneHierarchy: boolean;
	AnimationLength: EFBXAnimationLengthImportType;
	StartFrame: number;
	EndFrame: number;
	FrameImportRange: Int32Interval;
	bUseDefaultSampleRate: boolean;
	CustomSampleRate: number;
	SourceAnimationName: string;
	bImportCustomAttribute: boolean;
	bDeleteExistingCustomAttributeCurves: boolean;
	bDeleteExistingNonCurveCustomAttributes: boolean;
	bImportBoneTracks: boolean;
	bSetMaterialDriveParameterOnCustomAttribute: boolean;
	MaterialCurveSuffixes: string[];
	bRemoveRedundantKeys: boolean;
	bDeleteExistingMorphTargetCurves: boolean;
	bDoNotImportCurveWithZero: boolean;
	bPreserveLocalTransform: boolean;
	static Load(ResourceName: string): FbxAnimSequenceImportData;
	static Find(Outer: UObject, ResourceName: string): FbxAnimSequenceImportData;
	static GetDefaultObject(): FbxAnimSequenceImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxAnimSequenceImportData;
	static C(Other: UObject | any): FbxAnimSequenceImportData;
}

declare type EFBXTestPlanActionType = 'Import' | 'Reimport' | 'AddLOD' | 'ReimportLOD' | 'ImportReload' | 'AddAlternateSkinnig' | 'EFBXTestPlanActionType_MAX';
declare var EFBXTestPlanActionType : { Import:'Import',Reimport:'Reimport',AddLOD:'AddLOD',ReimportLOD:'ReimportLOD',ImportReload:'ImportReload',AddAlternateSkinnig:'AddAlternateSkinnig',EFBXTestPlanActionType_MAX:'EFBXTestPlanActionType_MAX', };
declare type EFBXExpectedResultPreset = 'Error_Number' | 'Warning_Number' | 'Created_Staticmesh_Number' | 'Created_Skeletalmesh_Number' | 'Materials_Created_Number' | 'Material_Slot_Imported_Name' | 'Vertex_Number' | 'Lod_Number' | 'Vertex_Number_Lod' | 'Mesh_Materials_Number' | 'Mesh_LOD_Section_Number' | 'Mesh_LOD_Section_Vertex_Number' | 'Mesh_LOD_Section_Triangle_Number' | 'Mesh_LOD_Section_Material_Name' | 'Mesh_LOD_Section_Material_Index' | 'Mesh_LOD_Section_Material_Imported_Name' | 'Mesh_LOD_Vertex_Position' | 'Mesh_LOD_Vertex_Normal' | 'LOD_UV_Channel_Number' | 'Bone_Number' | 'Bone_Position' | 'Animation_Frame_Number' | 'Animation_Length' | 'Animation_CustomCurve_KeyValue' | 'Animation_CustomCurve_KeyArriveTangent' | 'Animation_CustomCurve_KeyLeaveTangent' | 'Skin_By_Bone_Vertex_Number' | 'Animation_CustomCurve_KeyArriveTangentWeight' | 'Animation_CustomCurve_KeyLeaveTangentWeight' | 'EFBXExpectedResultPreset_MAX';
declare var EFBXExpectedResultPreset : { Error_Number:'Error_Number',Warning_Number:'Warning_Number',Created_Staticmesh_Number:'Created_Staticmesh_Number',Created_Skeletalmesh_Number:'Created_Skeletalmesh_Number',Materials_Created_Number:'Materials_Created_Number',Material_Slot_Imported_Name:'Material_Slot_Imported_Name',Vertex_Number:'Vertex_Number',Lod_Number:'Lod_Number',Vertex_Number_Lod:'Vertex_Number_Lod',Mesh_Materials_Number:'Mesh_Materials_Number',Mesh_LOD_Section_Number:'Mesh_LOD_Section_Number',Mesh_LOD_Section_Vertex_Number:'Mesh_LOD_Section_Vertex_Number',Mesh_LOD_Section_Triangle_Number:'Mesh_LOD_Section_Triangle_Number',Mesh_LOD_Section_Material_Name:'Mesh_LOD_Section_Material_Name',Mesh_LOD_Section_Material_Index:'Mesh_LOD_Section_Material_Index',Mesh_LOD_Section_Material_Imported_Name:'Mesh_LOD_Section_Material_Imported_Name',Mesh_LOD_Vertex_Position:'Mesh_LOD_Vertex_Position',Mesh_LOD_Vertex_Normal:'Mesh_LOD_Vertex_Normal',LOD_UV_Channel_Number:'LOD_UV_Channel_Number',Bone_Number:'Bone_Number',Bone_Position:'Bone_Position',Animation_Frame_Number:'Animation_Frame_Number',Animation_Length:'Animation_Length',Animation_CustomCurve_KeyValue:'Animation_CustomCurve_KeyValue',Animation_CustomCurve_KeyArriveTangent:'Animation_CustomCurve_KeyArriveTangent',Animation_CustomCurve_KeyLeaveTangent:'Animation_CustomCurve_KeyLeaveTangent',Skin_By_Bone_Vertex_Number:'Skin_By_Bone_Vertex_Number',Animation_CustomCurve_KeyArriveTangentWeight:'Animation_CustomCurve_KeyArriveTangentWeight',Animation_CustomCurve_KeyLeaveTangentWeight:'Animation_CustomCurve_KeyLeaveTangentWeight',EFBXExpectedResultPreset_MAX:'EFBXExpectedResultPreset_MAX', };
declare class FbxTestPlanExpectedResult { 
	ExpectedPresetsType: EFBXExpectedResultPreset;
	ExpectedPresetsDataInteger: number[];
	ExpectedPresetsDataFloat: number[];
	ExpectedPresetsDataDouble: any[];
	ExpectedPresetsDataString: string[];
	clone() : FbxTestPlanExpectedResult;
	static C(Other: UObject | any): FbxTestPlanExpectedResult;
}

declare type EFBXImportType = 'FBXIT_StaticMesh' | 'FBXIT_SkeletalMesh' | 'FBXIT_Animation' | 'FBXIT_MAX';
declare var EFBXImportType : { FBXIT_StaticMesh:'FBXIT_StaticMesh',FBXIT_SkeletalMesh:'FBXIT_SkeletalMesh',FBXIT_Animation:'FBXIT_Animation',FBXIT_MAX:'FBXIT_MAX', };
declare type EFBXNormalImportMethod = 'FBXNIM_ComputeNormals' | 'FBXNIM_ImportNormals' | 'FBXNIM_ImportNormalsAndTangents' | 'FBXNIM_MAX';
declare var EFBXNormalImportMethod : { FBXNIM_ComputeNormals:'FBXNIM_ComputeNormals',FBXNIM_ImportNormals:'FBXNIM_ImportNormals',FBXNIM_ImportNormalsAndTangents:'FBXNIM_ImportNormalsAndTangents',FBXNIM_MAX:'FBXNIM_MAX', };
declare type EFBXNormalGenerationMethod = 'BuiltIn' | 'MikkTSpace' | 'EFBXNormalGenerationMethod_MAX';
declare var EFBXNormalGenerationMethod : { BuiltIn:'BuiltIn',MikkTSpace:'MikkTSpace',EFBXNormalGenerationMethod_MAX:'EFBXNormalGenerationMethod_MAX', };
declare class ImportMeshLodSectionsData { 
	SectionOriginalMaterialName: string[];
	clone() : ImportMeshLodSectionsData;
	static C(Other: UObject | any): ImportMeshLodSectionsData;
}

declare class FbxMeshImportData extends FbxAssetImportData { 
	bTransformVertexToAbsolute: boolean;
	bBakePivotInVertex: boolean;
	bImportMeshLODs: boolean;
	NormalImportMethod: EFBXNormalImportMethod;
	NormalGenerationMethod: EFBXNormalGenerationMethod;
	bComputeWeightedNormals: boolean;
	bReorderMaterialToFbxOrder: boolean;
	ImportMaterialOriginalNameData: string[];
	ImportMeshLodData: ImportMeshLodSectionsData[];
	static Load(ResourceName: string): FbxMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxMeshImportData;
	static GetDefaultObject(): FbxMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxMeshImportData;
	static C(Other: UObject | any): FbxMeshImportData;
}

declare type EVertexColorImportOption = 'Replace' | 'Ignore' | 'Override' | 'EVertexColorImportOption_MAX';
declare var EVertexColorImportOption : { Replace:'Replace',Ignore:'Ignore',Override:'Override',EVertexColorImportOption_MAX:'EVertexColorImportOption_MAX', };
declare class FbxStaticMeshImportData extends FbxMeshImportData { 
	StaticMeshLODGroup: string;
	VertexColorImportOption: EVertexColorImportOption;
	VertexOverrideColor: Color;
	bRemoveDegenerates: boolean;
	bBuildReversedIndexBuffer: boolean;
	bBuildNanite: boolean;
	bGenerateLightmapUVs: boolean;
	bOneConvexHullPerUCX: boolean;
	bAutoGenerateCollision: boolean;
	bCombineMeshes: boolean;
	DistanceFieldResolutionScale: number;
	static Load(ResourceName: string): FbxStaticMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxStaticMeshImportData;
	static GetDefaultObject(): FbxStaticMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxStaticMeshImportData;
	static C(Other: UObject | any): FbxStaticMeshImportData;
}

declare type EFBXImportContentType = 'FBXICT_All' | 'FBXICT_Geometry' | 'FBXICT_SkinningWeights' | 'FBXICT_MAX';
declare var EFBXImportContentType : { FBXICT_All:'FBXICT_All',FBXICT_Geometry:'FBXICT_Geometry',FBXICT_SkinningWeights:'FBXICT_SkinningWeights',FBXICT_MAX:'FBXICT_MAX', };
declare class FbxSkeletalMeshImportData extends FbxMeshImportData { 
	ImportContentType: EFBXImportContentType;
	LastImportContentType: EFBXImportContentType;
	VertexColorImportOption: EVertexColorImportOption;
	VertexOverrideColor: Color;
	bUpdateSkeletonReferencePose: boolean;
	bUseT0AsRefPose: boolean;
	bPreserveSmoothingGroups: boolean;
	bImportMeshesInBoneHierarchy: boolean;
	bImportMorphTargets: boolean;
	ThresholdPosition: number;
	ThresholdTangentNormal: number;
	ThresholdUV: number;
	MorphThresholdPosition: number;
	static Load(ResourceName: string): FbxSkeletalMeshImportData;
	static Find(Outer: UObject, ResourceName: string): FbxSkeletalMeshImportData;
	static GetDefaultObject(): FbxSkeletalMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSkeletalMeshImportData;
	static C(Other: UObject | any): FbxSkeletalMeshImportData;
}

declare type EMaterialSearchLocation = 'Local' | 'UnderParent' | 'UnderRoot' | 'AllAssets' | 'DoNotSearch' | 'EMaterialSearchLocation_MAX';
declare var EMaterialSearchLocation : { Local:'Local',UnderParent:'UnderParent',UnderRoot:'UnderRoot',AllAssets:'AllAssets',DoNotSearch:'DoNotSearch',EMaterialSearchLocation_MAX:'EMaterialSearchLocation_MAX', };
declare class FbxTextureImportData extends FbxAssetImportData { 
	bInvertNormalMaps: boolean;
	MaterialSearchLocation: EMaterialSearchLocation;
	BaseMaterialName: SoftObjectPath;
	BaseColorName: string;
	BaseDiffuseTextureName: string;
	BaseNormalTextureName: string;
	BaseEmissiveColorName: string;
	BaseEmmisiveTextureName: string;
	BaseSpecularTextureName: string;
	BaseOpacityTextureName: string;
	static Load(ResourceName: string): FbxTextureImportData;
	static Find(Outer: UObject, ResourceName: string): FbxTextureImportData;
	static GetDefaultObject(): FbxTextureImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxTextureImportData;
	static C(Other: UObject | any): FbxTextureImportData;
}

declare class FbxImportUI extends UObject { 
	bIsObjImport: boolean;
	OriginalImportType: EFBXImportType;
	MeshTypeToImport: EFBXImportType;
	bOverrideFullName: boolean;
	bImportAsSkeletal: boolean;
	bImportMesh: boolean;
	Skeleton: Skeleton;
	bCreatePhysicsAsset: boolean;
	PhysicsAsset: PhysicsAsset;
	bAutoComputeLodDistances: boolean;
	LodDistance0: number;
	LodDistance1: number;
	LodDistance2: number;
	LodDistance3: number;
	LodDistance4: number;
	LodDistance5: number;
	LodDistance6: number;
	LodDistance7: number;
	MinimumLodNumber: number;
	LodNumber: number;
	bImportAnimations: boolean;
	OverrideAnimationName: string;
	bImportRigidMesh: boolean;
	bImportMaterials: boolean;
	bImportTextures: boolean;
	bResetToFbxOnMaterialConflict: boolean;
	StaticMeshImportData: FbxStaticMeshImportData;
	SkeletalMeshImportData: FbxSkeletalMeshImportData;
	AnimSequenceImportData: FbxAnimSequenceImportData;
	TextureImportData: FbxTextureImportData;
	bAutomatedImportShouldDetectType: boolean;
	FileVersion: string;
	FileCreator: string;
	FileCreatorApplication: string;
	FileUnits: string;
	FileAxisDirection: string;
	FileSampleRate: string;
	AnimStartFrame: string;
	AnimEndFrame: string;
	static Load(ResourceName: string): FbxImportUI;
	static Find(Outer: UObject, ResourceName: string): FbxImportUI;
	static GetDefaultObject(): FbxImportUI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxImportUI;
	ResetToDefault(): void;
	static C(Other: UObject | any): FbxImportUI;
}

declare class FbxTestPlan extends UObject { 
	TestPlanName: string;
	Action: EFBXTestPlanActionType;
	LODIndex: number;
	bDeleteFolderAssets: boolean;
	ExpectedResult: FbxTestPlanExpectedResult[];
	ImportUI: FbxImportUI;
	static Load(ResourceName: string): FbxTestPlan;
	static Find(Outer: UObject, ResourceName: string): FbxTestPlan;
	static GetDefaultObject(): FbxTestPlan;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxTestPlan;
	static C(Other: UObject | any): FbxTestPlan;
}

declare class FbxFactory extends Factory { 
	ImportUI: FbxImportUI;
	OriginalImportUI: FbxImportUI;
	static Load(ResourceName: string): FbxFactory;
	static Find(Outer: UObject, ResourceName: string): FbxFactory;
	static GetDefaultObject(): FbxFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxFactory;
	static C(Other: UObject | any): FbxFactory;
}

declare class SceneImportFactory extends Factory { 
	static Load(ResourceName: string): SceneImportFactory;
	static Find(Outer: UObject, ResourceName: string): SceneImportFactory;
	static GetDefaultObject(): SceneImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneImportFactory;
	static C(Other: UObject | any): SceneImportFactory;
}

declare type EFBXSceneOptionsCreateHierarchyType = 'FBXSOCHT_CreateLevelActors' | 'FBXSOCHT_CreateActorComponents' | 'FBXSOCHT_CreateBlueprint' | 'FBXSOCHT_MAX';
declare var EFBXSceneOptionsCreateHierarchyType : { FBXSOCHT_CreateLevelActors:'FBXSOCHT_CreateLevelActors',FBXSOCHT_CreateActorComponents:'FBXSOCHT_CreateActorComponents',FBXSOCHT_CreateBlueprint:'FBXSOCHT_CreateBlueprint',FBXSOCHT_MAX:'FBXSOCHT_MAX', };
declare class FbxSceneImportOptions extends UObject { 
	bCreateContentFolderHierarchy: boolean;
	bImportAsDynamic: boolean;
	HierarchyType: EFBXSceneOptionsCreateHierarchyType;
	bForceFrontXAxis: boolean;
	ImportTranslation: Vector;
	ImportRotation: Rotator;
	ImportUniformScale: number;
	bTransformVertexToAbsolute: boolean;
	bBakePivotInVertex: boolean;
	bImportStaticMeshLODs: boolean;
	bImportSkeletalMeshLODs: boolean;
	bInvertNormalMaps: boolean;
	static Load(ResourceName: string): FbxSceneImportOptions;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptions;
	static GetDefaultObject(): FbxSceneImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptions;
	static C(Other: UObject | any): FbxSceneImportOptions;
}

declare type EFbxSceneVertexColorImportOption = 'Replace' | 'Ignore' | 'Override' | 'EFbxSceneVertexColorImportOption_MAX';
declare var EFbxSceneVertexColorImportOption : { Replace:'Replace',Ignore:'Ignore',Override:'Override',EFbxSceneVertexColorImportOption_MAX:'EFbxSceneVertexColorImportOption_MAX', };
declare type EFBXSceneNormalImportMethod = 'FBXSceneNIM_ComputeNormals' | 'FBXSceneNIM_ImportNormals' | 'FBXSceneNIM_ImportNormalsAndTangents' | 'FBXSceneNIM_MAX';
declare var EFBXSceneNormalImportMethod : { FBXSceneNIM_ComputeNormals:'FBXSceneNIM_ComputeNormals',FBXSceneNIM_ImportNormals:'FBXSceneNIM_ImportNormals',FBXSceneNIM_ImportNormalsAndTangents:'FBXSceneNIM_ImportNormalsAndTangents',FBXSceneNIM_MAX:'FBXSceneNIM_MAX', };
declare type EFBXSceneNormalGenerationMethod = 'BuiltIn' | 'MikkTSpace' | 'EFBXSceneNormalGenerationMethod_MAX';
declare var EFBXSceneNormalGenerationMethod : { BuiltIn:'BuiltIn',MikkTSpace:'MikkTSpace',EFBXSceneNormalGenerationMethod_MAX:'EFBXSceneNormalGenerationMethod_MAX', };
declare class FbxSceneImportOptionsStaticMesh extends UObject { 
	StaticMeshLODGroup: string;
	bAutoGenerateCollision: boolean;
	VertexColorImportOption: EFbxSceneVertexColorImportOption;
	VertexOverrideColor: Color;
	bRemoveDegenerates: boolean;
	bBuildReversedIndexBuffer: boolean;
	bGenerateLightmapUVs: boolean;
	bOneConvexHullPerUCX: boolean;
	NormalImportMethod: EFBXSceneNormalImportMethod;
	NormalGenerationMethod: EFBXSceneNormalGenerationMethod;
	static Load(ResourceName: string): FbxSceneImportOptionsStaticMesh;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptionsStaticMesh;
	static GetDefaultObject(): FbxSceneImportOptionsStaticMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptionsStaticMesh;
	static C(Other: UObject | any): FbxSceneImportOptionsStaticMesh;
}

declare class FbxSceneImportOptionsSkeletalMesh extends UObject { 
	bUpdateSkeletonReferencePose: boolean;
	bCreatePhysicsAsset: boolean;
	bUseT0AsRefPose: boolean;
	bPreserveSmoothingGroups: boolean;
	bImportMeshesInBoneHierarchy: boolean;
	bImportMorphTargets: boolean;
	ThresholdPosition: number;
	ThresholdTangentNormal: number;
	ThresholdUV: number;
	MorphThresholdPosition: number;
	bImportAnimations: boolean;
	AnimationLength: EFBXAnimationLengthImportType;
	FrameImportRange: Int32Interval;
	bUseDefaultSampleRate: boolean;
	CustomSampleRate: number;
	bImportCustomAttribute: boolean;
	bDeleteExistingCustomAttributeCurves: boolean;
	bDeleteExistingNonCurveCustomAttributes: boolean;
	bPreserveLocalTransform: boolean;
	bDeleteExistingMorphTargetCurves: boolean;
	static Load(ResourceName: string): FbxSceneImportOptionsSkeletalMesh;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportOptionsSkeletalMesh;
	static GetDefaultObject(): FbxSceneImportOptionsSkeletalMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportOptionsSkeletalMesh;
	static C(Other: UObject | any): FbxSceneImportOptionsSkeletalMesh;
}

declare class FbxSceneImportFactory extends SceneImportFactory { 
	SceneImportOptions: FbxSceneImportOptions;
	SceneImportOptionsStaticMesh: FbxSceneImportOptionsStaticMesh;
	SceneImportOptionsSkeletalMesh: FbxSceneImportOptionsSkeletalMesh;
	StaticMeshImportData: FbxStaticMeshImportData;
	SkeletalMeshImportData: FbxSkeletalMeshImportData;
	AnimSequenceImportData: FbxAnimSequenceImportData;
	TextureImportData: FbxTextureImportData;
	ReimportData: FbxSceneImportData;
	static Load(ResourceName: string): FbxSceneImportFactory;
	static Find(Outer: UObject, ResourceName: string): FbxSceneImportFactory;
	static GetDefaultObject(): FbxSceneImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FbxSceneImportFactory;
	static C(Other: UObject | any): FbxSceneImportFactory;
}

declare type EReloadPackagesInteractionMode = 'Interactive' | 'AssumePositive' | 'AssumeNegative' | 'EReloadPackagesInteractionMode_MAX';
declare var EReloadPackagesInteractionMode : { Interactive:'Interactive',AssumePositive:'AssumePositive',AssumeNegative:'AssumeNegative',EReloadPackagesInteractionMode_MAX:'EReloadPackagesInteractionMode_MAX', };
declare class EditorLoadingAndSavingUtils extends UObject { 
	static Load(ResourceName: string): EditorLoadingAndSavingUtils;
	static Find(Outer: UObject, ResourceName: string): EditorLoadingAndSavingUtils;
	static GetDefaultObject(): EditorLoadingAndSavingUtils;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorLoadingAndSavingUtils;
	static UnloadPackages(PackagesToUnload: Package[],bOutAnyPackagesUnloaded?: boolean,OutErrorMessage?: string): {bOutAnyPackagesUnloaded: boolean, OutErrorMessage: string};
	static SavePackagesWithDialog(PackagesToSave: Package[],bOnlyDirty: boolean): boolean;
	static SavePackages(PackagesToSave: Package[],bOnlyDirty: boolean): boolean;
	static SaveMap(World: World,AssetPath: string): boolean;
	static SaveDirtyPackagesWithDialog(bSaveMapPackages: boolean,bSaveContentPackages: boolean): boolean;
	static SaveDirtyPackages(bSaveMapPackages: boolean,bSaveContentPackages: boolean): boolean;
	static SaveCurrentLevel(): boolean;
	static ReloadPackages(PackagesToReload: Package[],bOutAnyPackagesReloaded?: boolean,OutErrorMessage?: string,InteractionMode?: EReloadPackagesInteractionMode): {bOutAnyPackagesReloaded: boolean, OutErrorMessage: string};
	static NewMapFromTemplate(PathToTemplateLevel: string,bSaveExistingMap: boolean): World;
	static NewBlankMap(bSaveExistingMap: boolean): World;
	static LoadMapWithDialog(): World;
	static LoadMap(Filename: string): World;
	static ImportScene(Filename: string): void;
	static GetDirtyMapPackages(OutDirtyPackages?: Package[]): {OutDirtyPackages: Package[]};
	static GetDirtyContentPackages(OutDirtyPackages?: Package[]): {OutDirtyPackages: Package[]};
	static ExportScene(bExportSelectedActorsOnly: boolean): void;
	static C(Other: UObject | any): EditorLoadingAndSavingUtils;
}

declare class FileServerCommandlet extends Commandlet { 
	static Load(ResourceName: string): FileServerCommandlet;
	static Find(Outer: UObject, ResourceName: string): FileServerCommandlet;
	static GetDefaultObject(): FileServerCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FileServerCommandlet;
	static C(Other: UObject | any): FileServerCommandlet;
}

declare class FixConflictingLocalizationKeysCommandlet extends Commandlet { 
	static Load(ResourceName: string): FixConflictingLocalizationKeysCommandlet;
	static Find(Outer: UObject, ResourceName: string): FixConflictingLocalizationKeysCommandlet;
	static GetDefaultObject(): FixConflictingLocalizationKeysCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FixConflictingLocalizationKeysCommandlet;
	static C(Other: UObject | any): FixConflictingLocalizationKeysCommandlet;
}

declare class ResavePackagesCommandlet extends Commandlet { 
	static Load(ResourceName: string): ResavePackagesCommandlet;
	static Find(Outer: UObject, ResourceName: string): ResavePackagesCommandlet;
	static GetDefaultObject(): ResavePackagesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ResavePackagesCommandlet;
	static C(Other: UObject | any): ResavePackagesCommandlet;
}

declare class FixupNeedsLoadForEditorGameCommandlet extends ResavePackagesCommandlet { 
	static Load(ResourceName: string): FixupNeedsLoadForEditorGameCommandlet;
	static Find(Outer: UObject, ResourceName: string): FixupNeedsLoadForEditorGameCommandlet;
	static GetDefaultObject(): FixupNeedsLoadForEditorGameCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FixupNeedsLoadForEditorGameCommandlet;
	static C(Other: UObject | any): FixupNeedsLoadForEditorGameCommandlet;
}

declare class FontFactory extends Factory { 
	static Load(ResourceName: string): FontFactory;
	static Find(Outer: UObject, ResourceName: string): FontFactory;
	static GetDefaultObject(): FontFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFactory;
	static C(Other: UObject | any): FontFactory;
}

declare class FontFileImportFactory extends Factory { 
	static Load(ResourceName: string): FontFileImportFactory;
	static Find(Outer: UObject, ResourceName: string): FontFileImportFactory;
	static GetDefaultObject(): FontFileImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFileImportFactory;
	static C(Other: UObject | any): FontFileImportFactory;
}

declare class FontThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): FontThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): FontThumbnailRenderer;
	static GetDefaultObject(): FontThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontThumbnailRenderer;
	static C(Other: UObject | any): FontThumbnailRenderer;
}

declare class ForceFeedbackAttenuationFactory extends Factory { 
	static Load(ResourceName: string): ForceFeedbackAttenuationFactory;
	static Find(Outer: UObject, ResourceName: string): ForceFeedbackAttenuationFactory;
	static GetDefaultObject(): ForceFeedbackAttenuationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackAttenuationFactory;
	static C(Other: UObject | any): ForceFeedbackAttenuationFactory;
}

declare class ForceFeedbackEffectFactory extends Factory { 
	static Load(ResourceName: string): ForceFeedbackEffectFactory;
	static Find(Outer: UObject, ResourceName: string): ForceFeedbackEffectFactory;
	static GetDefaultObject(): ForceFeedbackEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackEffectFactory;
	static C(Other: UObject | any): ForceFeedbackEffectFactory;
}

declare class GatherTextCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextCommandlet;
	static GetDefaultObject(): GatherTextCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextCommandlet;
	static C(Other: UObject | any): GatherTextCommandlet;
}

declare class GatherTextFromAssetsCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextFromAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromAssetsCommandlet;
	static GetDefaultObject(): GatherTextFromAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromAssetsCommandlet;
	static C(Other: UObject | any): GatherTextFromAssetsCommandlet;
}

declare class GatherTextFromMetaDataCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextFromMetaDataCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromMetaDataCommandlet;
	static GetDefaultObject(): GatherTextFromMetaDataCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromMetaDataCommandlet;
	static C(Other: UObject | any): GatherTextFromMetaDataCommandlet;
}

declare class GatherTextFromSourceCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GatherTextFromSourceCommandlet;
	static Find(Outer: UObject, ResourceName: string): GatherTextFromSourceCommandlet;
	static GetDefaultObject(): GatherTextFromSourceCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GatherTextFromSourceCommandlet;
	static C(Other: UObject | any): GatherTextFromSourceCommandlet;
}

declare class GenerateAssetManifestCommandlet extends Commandlet { 
	static Load(ResourceName: string): GenerateAssetManifestCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateAssetManifestCommandlet;
	static GetDefaultObject(): GenerateAssetManifestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateAssetManifestCommandlet;
	static C(Other: UObject | any): GenerateAssetManifestCommandlet;
}

declare class GenerateBlueprintAPICommandlet extends Commandlet { 
	static Load(ResourceName: string): GenerateBlueprintAPICommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateBlueprintAPICommandlet;
	static GetDefaultObject(): GenerateBlueprintAPICommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateBlueprintAPICommandlet;
	static C(Other: UObject | any): GenerateBlueprintAPICommandlet;
}

declare class GenerateDistillFileSetsCommandlet extends Commandlet { 
	static Load(ResourceName: string): GenerateDistillFileSetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateDistillFileSetsCommandlet;
	static GetDefaultObject(): GenerateDistillFileSetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateDistillFileSetsCommandlet;
	static C(Other: UObject | any): GenerateDistillFileSetsCommandlet;
}

declare class GenerateGatherArchiveCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateGatherArchiveCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateGatherArchiveCommandlet;
	static GetDefaultObject(): GenerateGatherArchiveCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateGatherArchiveCommandlet;
	static C(Other: UObject | any): GenerateGatherArchiveCommandlet;
}

declare class GenerateGatherManifestCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateGatherManifestCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateGatherManifestCommandlet;
	static GetDefaultObject(): GenerateGatherManifestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateGatherManifestCommandlet;
	static C(Other: UObject | any): GenerateGatherManifestCommandlet;
}

declare class GenerateTextLocalizationReportCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateTextLocalizationReportCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateTextLocalizationReportCommandlet;
	static GetDefaultObject(): GenerateTextLocalizationReportCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateTextLocalizationReportCommandlet;
	static C(Other: UObject | any): GenerateTextLocalizationReportCommandlet;
}

declare class GenerateTextLocalizationResourceCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): GenerateTextLocalizationResourceCommandlet;
	static Find(Outer: UObject, ResourceName: string): GenerateTextLocalizationResourceCommandlet;
	static GetDefaultObject(): GenerateTextLocalizationResourceCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenerateTextLocalizationResourceCommandlet;
	static C(Other: UObject | any): GenerateTextLocalizationResourceCommandlet;
}

declare class HapticFeedbackEffectBufferFactory extends Factory { 
	static Load(ResourceName: string): HapticFeedbackEffectBufferFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectBufferFactory;
	static GetDefaultObject(): HapticFeedbackEffectBufferFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectBufferFactory;
	static C(Other: UObject | any): HapticFeedbackEffectBufferFactory;
}

declare class HapticFeedbackEffectCurveFactory extends Factory { 
	static Load(ResourceName: string): HapticFeedbackEffectCurveFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectCurveFactory;
	static GetDefaultObject(): HapticFeedbackEffectCurveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectCurveFactory;
	static C(Other: UObject | any): HapticFeedbackEffectCurveFactory;
}

declare class HapticFeedbackEffectSoundWaveFactory extends Factory { 
	static Load(ResourceName: string): HapticFeedbackEffectSoundWaveFactory;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffectSoundWaveFactory;
	static GetDefaultObject(): HapticFeedbackEffectSoundWaveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffectSoundWaveFactory;
	static C(Other: UObject | any): HapticFeedbackEffectSoundWaveFactory;
}

declare class HierarchicalLODSettings extends DeveloperSettings { 
	bForceSettingsInAllMaps: boolean;
	bSaveLODActorsToHLODPackages: boolean;
	DefaultSetup: Class;
	DirectoriesForHLODCommandlet: DirectoryPath[];
	MapsToBuild: FilePath[];
	BaseMaterial: MaterialInterface;
	static Load(ResourceName: string): HierarchicalLODSettings;
	static Find(Outer: UObject, ResourceName: string): HierarchicalLODSettings;
	static GetDefaultObject(): HierarchicalLODSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HierarchicalLODSettings;
	static C(Other: UObject | any): HierarchicalLODSettings;
}

declare class HierarchicalLODVolume extends Volume { 
	bIncludeOverlappingActors: boolean;
	ApplyOnlyToSpecificHLODLevels: number[];
	static GetDefaultObject(): HierarchicalLODVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HierarchicalLODVolume;
	static C(Other: UObject | any): HierarchicalLODVolume;
}

declare class ImportAssetsCommandlet extends Commandlet { 
	GlobalImportData: AutomatedAssetImportData;
	ImportDataList: AutomatedAssetImportData[];
	static Load(ResourceName: string): ImportAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportAssetsCommandlet;
	static GetDefaultObject(): ImportAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportAssetsCommandlet;
	static C(Other: UObject | any): ImportAssetsCommandlet;
}

declare class ImportDialogueScriptCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): ImportDialogueScriptCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportDialogueScriptCommandlet;
	static GetDefaultObject(): ImportDialogueScriptCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportDialogueScriptCommandlet;
	static C(Other: UObject | any): ImportDialogueScriptCommandlet;
}

declare class ImportLocalizedDialogueCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): ImportLocalizedDialogueCommandlet;
	static Find(Outer: UObject, ResourceName: string): ImportLocalizedDialogueCommandlet;
	static GetDefaultObject(): ImportLocalizedDialogueCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportLocalizedDialogueCommandlet;
	static C(Other: UObject | any): ImportLocalizedDialogueCommandlet;
}

declare class ImportSubsystem extends EditorSubsystem { 
	OnAssetPreImport_BP: UnrealEngineMulticastDelegate<(InFactory: Factory, InClass: UnrealEngineClass, InParent: UObject, Name: string, Type: string) => void>;
	OnAssetPostImport_BP: UnrealEngineMulticastDelegate<(InFactory: Factory, InCreatedObject: UObject) => void>;
	OnAssetReimport_BP: UnrealEngineMulticastDelegate<(InCreatedObject: UObject) => void>;
	OnAssetPostLODImport_BP: UnrealEngineMulticastDelegate<(InObject: UObject, InLODIndex: number) => void>;
	static Load(ResourceName: string): ImportSubsystem;
	static Find(Outer: UObject, ResourceName: string): ImportSubsystem;
	static GetDefaultObject(): ImportSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportSubsystem;
	static C(Other: UObject | any): ImportSubsystem;
}

declare class InternationalizationConditioningCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): InternationalizationConditioningCommandlet;
	static Find(Outer: UObject, ResourceName: string): InternationalizationConditioningCommandlet;
	static GetDefaultObject(): InternationalizationConditioningCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationConditioningCommandlet;
	static C(Other: UObject | any): InternationalizationConditioningCommandlet;
}

declare class InternationalizationExportCommandlet extends GatherTextCommandletBase { 
	static Load(ResourceName: string): InternationalizationExportCommandlet;
	static Find(Outer: UObject, ResourceName: string): InternationalizationExportCommandlet;
	static GetDefaultObject(): InternationalizationExportCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationExportCommandlet;
	static C(Other: UObject | any): InternationalizationExportCommandlet;
}

declare class IoStoreCommandlet extends Commandlet { 
	static Load(ResourceName: string): IoStoreCommandlet;
	static Find(Outer: UObject, ResourceName: string): IoStoreCommandlet;
	static GetDefaultObject(): IoStoreCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IoStoreCommandlet;
	static C(Other: UObject | any): IoStoreCommandlet;
}

declare class LayersSubsystem extends EditorSubsystem { 
	static Load(ResourceName: string): LayersSubsystem;
	static Find(Outer: UObject, ResourceName: string): LayersSubsystem;
	static GetDefaultObject(): LayersSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LayersSubsystem;
	UpdateAllViewVisibility(LayerThatChanged: string): void;
	UpdateAllActorsVisibility(bNotifySelectionChange: boolean,bRedrawViewports: boolean): boolean;
	UpdateActorVisibility(Actor: Actor,bOutSelectionChanged?: boolean,bOutActorModified?: boolean,bNotifySelectionChange?: boolean,bRedrawViewports?: boolean): {bOutSelectionChanged: boolean, bOutActorModified: boolean, $: boolean};
	UpdateActorAllViewsVisibility(Actor: Actor): void;
	TryGetLayer(LayerName: string,OutLayer?: Layer): {OutLayer: Layer, $: boolean};
	ToggleLayerVisibility(LayerName: string): void;
	ToggleLayersVisibility(LayerNames: string[]): void;
	SetLayerVisibility(LayerName: string,bIsVisible: boolean): void;
	SetLayersVisibility(LayerNames: string[],bIsVisible: boolean): void;
	SelectActorsInLayers(LayerNames: string[],bSelect: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): boolean;
	SelectActorsInLayer(LayerName: string,bSelect: boolean,bNotify: boolean,bSelectEvenIfHidden: boolean): boolean;
	RenameLayer(OriginalLayerName: string,NewLayerName: string): boolean;
	RemoveSelectedActorsFromLayers(LayerNames: string[]): boolean;
	RemoveSelectedActorsFromLayer(LayerName: string): boolean;
	RemoveLevelLayerInformation(Level: Level): void;
	RemoveActorsFromLayers(Actors: Actor[],LayerNames: string[],bUpdateStats: boolean): boolean;
	RemoveActorsFromLayer(Actors: Actor[],LayerName: string,bUpdateStats: boolean): boolean;
	RemoveActorFromLayers(Actor: Actor,LayerNames: string[],bUpdateStats: boolean): boolean;
	RemoveActorFromLayer(Actor: Actor,LayerToRemove: string,bUpdateStats: boolean): boolean;
	MakeAllLayersVisible(): void;
	IsLayer(LayerName: string): boolean;
	IsActorValidForLayer(Actor: Actor): boolean;
	InitializeNewActorLayers(Actor: Actor): boolean;
	GetWorld(): World;
	GetSelectedActors(): Actor[];
	GetLayer(LayerName: string): Layer;
	GetActorsFromLayers(LayerNames: string[]): Actor[];
	GetActorsFromLayer(LayerName: string): Actor[];
	EditorRefreshLayerBrowser(): void;
	EditorMapChange(): void;
	DisassociateActorsFromLayers(Actors: Actor[]): boolean;
	DisassociateActorFromLayers(Actor: Actor): boolean;
	DeleteLayers(LayersToDelete: string[]): void;
	DeleteLayer(LayerToDelete: string): void;
	CreateLayer(LayerName: string): Layer;
	AppendActorsFromLayers(LayerNames: string[],InOutActors?: Actor[]): {InOutActors: Actor[]};
	AppendActorsFromLayer(LayerName: string,InOutActors?: Actor[]): {InOutActors: Actor[]};
	AddSelectedActorsToLayers(LayerNames: string[]): boolean;
	AddSelectedActorsToLayer(LayerName: string): boolean;
	AddLevelLayerInformation(Level: Level): void;
	AddAllLayersTo(OutLayers?: Layer[]): {OutLayers: Layer[]};
	AddAllLayerNamesTo(OutLayerNames?: string[]): {OutLayerNames: string[]};
	AddActorToLayers(Actor: Actor,LayerNames: string[]): boolean;
	AddActorToLayer(Actor: Actor,LayerName: string): boolean;
	AddActorsToLayers(Actors: Actor[],LayerNames: string[]): boolean;
	AddActorsToLayer(Actors: Actor[],LayerName: string): boolean;
	static C(Other: UObject | any): LayersSubsystem;
}

declare class LegacyEdModeWrapper extends EdMode { 
	static Load(ResourceName: string): LegacyEdModeWrapper;
	static Find(Outer: UObject, ResourceName: string): LegacyEdModeWrapper;
	static GetDefaultObject(): LegacyEdModeWrapper;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LegacyEdModeWrapper;
	static C(Other: UObject | any): LegacyEdModeWrapper;
}

declare class LegacyEdModeSelectInterface extends Interface { 
	static Load(ResourceName: string): LegacyEdModeSelectInterface;
	static Find(Outer: UObject, ResourceName: string): LegacyEdModeSelectInterface;
	static GetDefaultObject(): LegacyEdModeSelectInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LegacyEdModeSelectInterface;
	static C(Other: UObject | any): LegacyEdModeSelectInterface;
}

declare class LegacyEdModeWidgetInterface extends Interface { 
	static Load(ResourceName: string): LegacyEdModeWidgetInterface;
	static Find(Outer: UObject, ResourceName: string): LegacyEdModeWidgetInterface;
	static GetDefaultObject(): LegacyEdModeWidgetInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LegacyEdModeWidgetInterface;
	static C(Other: UObject | any): LegacyEdModeWidgetInterface;
}

declare class LegacyEdModeToolInterface extends Interface { 
	static Load(ResourceName: string): LegacyEdModeToolInterface;
	static Find(Outer: UObject, ResourceName: string): LegacyEdModeToolInterface;
	static GetDefaultObject(): LegacyEdModeToolInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LegacyEdModeToolInterface;
	static C(Other: UObject | any): LegacyEdModeToolInterface;
}

declare class LegacyEdModeDrawHelperInterface extends Interface { 
	static Load(ResourceName: string): LegacyEdModeDrawHelperInterface;
	static Find(Outer: UObject, ResourceName: string): LegacyEdModeDrawHelperInterface;
	static GetDefaultObject(): LegacyEdModeDrawHelperInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LegacyEdModeDrawHelperInterface;
	static C(Other: UObject | any): LegacyEdModeDrawHelperInterface;
}

declare class LegacyEdModeViewportInterface extends Interface { 
	static Load(ResourceName: string): LegacyEdModeViewportInterface;
	static Find(Outer: UObject, ResourceName: string): LegacyEdModeViewportInterface;
	static GetDefaultObject(): LegacyEdModeViewportInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LegacyEdModeViewportInterface;
	static C(Other: UObject | any): LegacyEdModeViewportInterface;
}

declare class LevelEditorMiscSettings extends DeveloperSettings { 
	bAutoApplyLightingEnable: boolean;
	bBSPAutoUpdate: boolean;
	bAutoMoveBSPPivotOffset: boolean;
	bNavigationAutoUpdate: boolean;
	bReplaceRespectsScale: boolean;
	bEnableExperimentalLevelEditor: boolean;
	bAvoidRelabelOnPasteSelected: boolean;
	bAllowBackgroundAudio: boolean;
	bCreateNewAudioDeviceForPlayInEditor: boolean;
	bEnableRealTimeAudio: boolean;
	EditorVolumeLevel: number;
	bEnableEditorSounds: boolean;
	DefaultLevelStreamingClass: UnrealEngineClass;
	bPromptWhenAddingToLevelBeforeCheckout: boolean;
	bPromptWhenAddingToLevelOutsideBounds: boolean;
	PercentageThresholdForPrompt: number;
	MinimumBoundsForCheckingSize: Vector;
	EditorScreenshotSaveDirectory: DirectoryPath;
	static Load(ResourceName: string): LevelEditorMiscSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorMiscSettings;
	static GetDefaultObject(): LevelEditorMiscSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorMiscSettings;
	static C(Other: UObject | any): LevelEditorMiscSettings;
}

declare class CommonResolutionMenuContext extends ToolMenuContextBase { 
	static Load(ResourceName: string): CommonResolutionMenuContext;
	static Find(Outer: UObject, ResourceName: string): CommonResolutionMenuContext;
	static GetDefaultObject(): CommonResolutionMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CommonResolutionMenuContext;
	static C(Other: UObject | any): CommonResolutionMenuContext;
}

declare type ELabelAnchorMode = 'LabelAnchorMode_TopLeft' | 'LabelAnchorMode_TopCenter' | 'LabelAnchorMode_TopRight' | 'LabelAnchorMode_CenterLeft' | 'LabelAnchorMode_Centered' | 'LabelAnchorMode_CenterRight' | 'LabelAnchorMode_BottomLeft' | 'LabelAnchorMode_BottomCenter' | 'LabelAnchorMode_BottomRight' | 'LabelAnchorMode_MAX';
declare var ELabelAnchorMode : { LabelAnchorMode_TopLeft:'LabelAnchorMode_TopLeft',LabelAnchorMode_TopCenter:'LabelAnchorMode_TopCenter',LabelAnchorMode_TopRight:'LabelAnchorMode_TopRight',LabelAnchorMode_CenterLeft:'LabelAnchorMode_CenterLeft',LabelAnchorMode_Centered:'LabelAnchorMode_Centered',LabelAnchorMode_CenterRight:'LabelAnchorMode_CenterRight',LabelAnchorMode_BottomLeft:'LabelAnchorMode_BottomLeft',LabelAnchorMode_BottomCenter:'LabelAnchorMode_BottomCenter',LabelAnchorMode_BottomRight:'LabelAnchorMode_BottomRight',LabelAnchorMode_MAX:'LabelAnchorMode_MAX', };
declare type EPlayOnBuildMode = 'PlayOnBuild_Always' | 'PlayOnBuild_Never' | 'PlayOnBuild_Default' | 'PlayOnBuild_IfEditorBuiltLocally' | 'PlayOnBuild_MAX';
declare var EPlayOnBuildMode : { PlayOnBuild_Always:'PlayOnBuild_Always',PlayOnBuild_Never:'PlayOnBuild_Never',PlayOnBuild_Default:'PlayOnBuild_Default',PlayOnBuild_IfEditorBuiltLocally:'PlayOnBuild_IfEditorBuiltLocally',PlayOnBuild_MAX:'PlayOnBuild_MAX', };
declare type EPlayOnLaunchConfiguration = 'LaunchConfig_Default' | 'LaunchConfig_Debug' | 'LaunchConfig_Development' | 'LaunchConfig_Test' | 'LaunchConfig_Shipping' | 'LaunchConfig_MAX';
declare var EPlayOnLaunchConfiguration : { LaunchConfig_Default:'LaunchConfig_Default',LaunchConfig_Debug:'LaunchConfig_Debug',LaunchConfig_Development:'LaunchConfig_Development',LaunchConfig_Test:'LaunchConfig_Test',LaunchConfig_Shipping:'LaunchConfig_Shipping',LaunchConfig_MAX:'LaunchConfig_MAX', };
declare type EPlayOnPakFileMode = 'NoPak' | 'PakNoCompress' | 'PakCompress' | 'EPlayOnPakFileMode_MAX';
declare var EPlayOnPakFileMode : { NoPak:'NoPak',PakNoCompress:'PakNoCompress',PakCompress:'PakCompress',EPlayOnPakFileMode_MAX:'EPlayOnPakFileMode_MAX', };
declare type EPlayNetMode = 'PIE_Standalone' | 'PIE_ListenServer' | 'PIE_Client' | 'PIE_MAX';
declare var EPlayNetMode : { PIE_Standalone:'PIE_Standalone',PIE_ListenServer:'PIE_ListenServer',PIE_Client:'PIE_Client',PIE_MAX:'PIE_MAX', };
declare type NetworkEmulationTarget = 'Server' | 'Client' | 'Any' | 'NetworkEmulationTarget_MAX';
declare var NetworkEmulationTarget : { Server:'Server',Client:'Client',Any:'Any',NetworkEmulationTarget_MAX:'NetworkEmulationTarget_MAX', };
declare class NetworkEmulationPacketSettings { 
	MinLatency: number;
	MaxLatency: number;
	PacketLossPercentage: number;
	clone() : NetworkEmulationPacketSettings;
	static C(Other: UObject | any): NetworkEmulationPacketSettings;
}

declare class LevelEditorPlayNetworkEmulationSettings { 
	bIsNetworkEmulationEnabled: boolean;
	EmulationTarget: NetworkEmulationTarget;
	CurrentProfile: string;
	OutPackets: NetworkEmulationPacketSettings;
	InPackets: NetworkEmulationPacketSettings;
	clone() : LevelEditorPlayNetworkEmulationSettings;
	static C(Other: UObject | any): LevelEditorPlayNetworkEmulationSettings;
}

declare type ELaunchModeType = 'LaunchMode_OnDevice' | 'LaunchMode_MAX';
declare var ELaunchModeType : { LaunchMode_OnDevice:'LaunchMode_OnDevice',LaunchMode_MAX:'LaunchMode_MAX', };
declare type EPlayModeLocations = 'PlayLocation_CurrentCameraLocation' | 'PlayLocation_DefaultPlayerStart' | 'PlayLocation_MAX';
declare var EPlayModeLocations : { PlayLocation_CurrentCameraLocation:'PlayLocation_CurrentCameraLocation',PlayLocation_DefaultPlayerStart:'PlayLocation_DefaultPlayerStart',PlayLocation_MAX:'PlayLocation_MAX', };
declare type EPlayModeType = 'PlayMode_InViewPort' | 'PlayMode_InEditorFloating' | 'PlayMode_InMobilePreview' | 'PlayMode_InTargetedMobilePreview' | 'PlayMode_InVulkanPreview' | 'PlayMode_InNewProcess' | 'PlayMode_InVR' | 'PlayMode_Simulate' | 'PlayMode_QuickLaunch' | 'PlayMode_Count' | 'PlayMode_MAX';
declare var EPlayModeType : { PlayMode_InViewPort:'PlayMode_InViewPort',PlayMode_InEditorFloating:'PlayMode_InEditorFloating',PlayMode_InMobilePreview:'PlayMode_InMobilePreview',PlayMode_InTargetedMobilePreview:'PlayMode_InTargetedMobilePreview',PlayMode_InVulkanPreview:'PlayMode_InVulkanPreview',PlayMode_InNewProcess:'PlayMode_InNewProcess',PlayMode_InVR:'PlayMode_InVR',PlayMode_Simulate:'PlayMode_Simulate',PlayMode_QuickLaunch:'PlayMode_QuickLaunch',PlayMode_Count:'PlayMode_Count',PlayMode_MAX:'PlayMode_MAX', };
declare class PlayScreenResolution { 
	Description: string;
	Width: number;
	Height: number;
	AspectRatio: string;
	bCanSwapAspectRatio: boolean;
	ProfileName: string;
	ScaleFactor: number;
	LogicalHeight: number;
	LogicalWidth: number;
	clone() : PlayScreenResolution;
	static C(Other: UObject | any): PlayScreenResolution;
}

declare class LevelEditorPlaySettings extends UObject { 
	PlayFromHerePlayerStartClassName: string;
	GameGetsMouseControl: boolean;
	UseMouseForTouch: boolean;
	ShowMouseControlLabel: boolean;
	MouseControlLabelPosition: ELabelAnchorMode;
	ViewportGetsHMDControl: boolean;
	ShouldMinimizeEditorOnVRPIE: boolean;
	AutoRecompileBlueprints: boolean;
	EnableGameSound: boolean;
	SoloAudioInFirstPIEClient: boolean;
	EnablePIEEnterAndExitSounds: boolean;
	PlayInEditorSoundQualityLevel: number;
	bUseNonRealtimeAudioDevice: boolean;
	bOnlyLoadVisibleLevelsInPIE: boolean;
	bPreferToStreamLevelsInPIE: boolean;
	NewWindowWidth: number;
	NewWindowHeight: number;
	NewWindowPosition: IntPoint;
	CenterNewWindow: boolean;
	PIEAlwaysOnTop: boolean;
	DisableStandaloneSound: boolean;
	AdditionalLaunchParameters: string;
	BuildGameBeforeLaunch: EPlayOnBuildMode;
	LaunchConfiguration: EPlayOnLaunchConfiguration;
	PackFilesForLaunch: EPlayOnPakFileMode;
	bAutoCompileBlueprintsOnLaunch: boolean;
	bLaunchSeparateServer: boolean;
	PlayNetMode: EPlayNetMode;
	RunUnderOneProcess: boolean;
	PlayNetDedicated: boolean;
	PlayNumberOfClients: number;
	ServerPort: any;
	ClientWindowWidth: number;
	AutoConnectToServer: boolean;
	RouteGamepadToSecondWindow: boolean;
	CreateAudioDeviceForEveryPlayer: boolean;
	ClientWindowHeight: number;
	ServerMapNameOverride: string;
	AdditionalServerGameOptions: string;
	AdditionalLaunchOptions: string;
	bShowServerDebugDrawingByDefault: boolean;
	ServerDebugDrawingColorTintStrength: number;
	ServerDebugDrawingColorTint: LinearColor;
	AdditionalServerLaunchParameters: string;
	ServerFixedFPS: number;
	ClientFixedFPS: number[];
	NetworkEmulationSettings: LevelEditorPlayNetworkEmulationSettings;
	LastSize: IntPoint;
	MultipleInstancePositions: IntPoint[];
	LastExecutedLaunchDevice: string;
	LastExecutedLaunchName: string;
	LastExecutedLaunchModeType: ELaunchModeType;
	LastExecutedPlayModeLocation: EPlayModeLocations;
	LastExecutedPlayModeType: EPlayModeType;
	LastExecutedPIEPreviewDevice: string;
	LaptopScreenResolutions: PlayScreenResolution[];
	MonitorScreenResolutions: PlayScreenResolution[];
	PhoneScreenResolutions: PlayScreenResolution[];
	TabletScreenResolutions: PlayScreenResolution[];
	TelevisionScreenResolutions: PlayScreenResolution[];
	DeviceToEmulate: string;
	PIESafeZoneOverride: Margin;
	CustomUnsafeZoneStarts: Vector2D[];
	CustomUnsafeZoneDimensions: Vector2D[];
	static Load(ResourceName: string): LevelEditorPlaySettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorPlaySettings;
	static GetDefaultObject(): LevelEditorPlaySettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorPlaySettings;
	static C(Other: UObject | any): LevelEditorPlaySettings;
}

declare type EWASDType = 'WASD_Always' | 'WASD_RMBOnly' | 'WASD_Never' | 'WASD_MAX';
declare var EWASDType : { WASD_Always:'WASD_Always',WASD_RMBOnly:'WASD_RMBOnly',WASD_Never:'WASD_Never',WASD_MAX:'WASD_MAX', };
declare type ELandscapeFoliageEditorControlType = 'IgnoreCtrl' | 'RequireCtrl' | 'RequireNoCtrl' | 'ELandscapeFoliageEditorControlType_MAX';
declare var ELandscapeFoliageEditorControlType : { IgnoreCtrl:'IgnoreCtrl',RequireCtrl:'RequireCtrl',RequireNoCtrl:'RequireNoCtrl',ELandscapeFoliageEditorControlType_MAX:'ELandscapeFoliageEditorControlType_MAX', };
declare type EScrollGestureDirection = 'UseSystemSetting' | 'Standard' | 'Natural' | 'EScrollGestureDirection_MAX';
declare var EScrollGestureDirection : { UseSystemSetting:'UseSystemSetting',Standard:'Standard',Natural:'Natural',EScrollGestureDirection_MAX:'EScrollGestureDirection_MAX', };
declare class SnapToSurfaceSettings { 
	bEnabled: boolean;
	SnapOffsetExtent: number;
	bSnapRotation: boolean;
	clone() : SnapToSurfaceSettings;
	static C(Other: UObject | any): SnapToSurfaceSettings;
}

declare type ERotationGridMode = 'GridMode_DivisionsOf360' | 'GridMode_Common' | 'GridMode_MAX';
declare var ERotationGridMode : { GridMode_DivisionsOf360:'GridMode_DivisionsOf360',GridMode_Common:'GridMode_Common',GridMode_MAX:'GridMode_MAX', };
declare type EMeasuringToolUnits = 'MeasureUnits_Centimeters' | 'MeasureUnits_Meters' | 'MeasureUnits_Kilometers' | 'MeasureUnits_MAX';
declare var EMeasuringToolUnits : { MeasureUnits_Centimeters:'MeasureUnits_Centimeters',MeasureUnits_Meters:'MeasureUnits_Meters',MeasureUnits_Kilometers:'MeasureUnits_Kilometers',MeasureUnits_MAX:'MeasureUnits_MAX', };
declare type ELevelViewportType = 'LVT_OrthoXY' | 'LVT_OrthoXZ' | 'LVT_OrthoYZ' | 'LVT_Perspective' | 'LVT_OrthoFreelook' | 'LVT_OrthoNegativeXY' | 'LVT_OrthoNegativeXZ' | 'LVT_OrthoNegativeYZ' | 'LVT_MAX' | 'LVT_None';
declare var ELevelViewportType : { LVT_OrthoXY:'LVT_OrthoXY',LVT_OrthoXZ:'LVT_OrthoXZ',LVT_OrthoYZ:'LVT_OrthoYZ',LVT_Perspective:'LVT_Perspective',LVT_OrthoFreelook:'LVT_OrthoFreelook',LVT_OrthoNegativeXY:'LVT_OrthoNegativeXY',LVT_OrthoNegativeXZ:'LVT_OrthoNegativeXZ',LVT_OrthoNegativeYZ:'LVT_OrthoNegativeYZ',LVT_MAX:'LVT_MAX',LVT_None:'LVT_None', };
declare type EViewModeIndex = 'VMI_BrushWireframe' | 'VMI_Wireframe' | 'VMI_Unlit' | 'VMI_Lit' | 'VMI_Lit_DetailLighting' | 'VMI_LightingOnly' | 'VMI_LightComplexity' | 'VMI_ShaderComplexity' | 'VMI_LightmapDensity' | 'VMI_LitLightmapDensity' | 'VMI_ReflectionOverride' | 'VMI_VisualizeBuffer' | 'VMI_StationaryLightOverlap' | 'VMI_CollisionPawn' | 'VMI_CollisionVisibility' | 'VMI_LODColoration' | 'VMI_QuadOverdraw' | 'VMI_PrimitiveDistanceAccuracy' | 'VMI_MeshUVDensityAccuracy' | 'VMI_ShaderComplexityWithQuadOverdraw' | 'VMI_HLODColoration' | 'VMI_GroupLODColoration' | 'VMI_MaterialTextureScaleAccuracy' | 'VMI_RequiredTextureResolution' | 'VMI_PathTracing' | 'VMI_RayTracingDebug' | 'VMI_VisualizeNanite' | 'VMI_VirtualTexturePendingMips' | 'VMI_VisualizeLumen' | 'VMI_VisualizeVirtualShadowMap' | 'VMI_Max' | 'VMI_Unknown';
declare var EViewModeIndex : { VMI_BrushWireframe:'VMI_BrushWireframe',VMI_Wireframe:'VMI_Wireframe',VMI_Unlit:'VMI_Unlit',VMI_Lit:'VMI_Lit',VMI_Lit_DetailLighting:'VMI_Lit_DetailLighting',VMI_LightingOnly:'VMI_LightingOnly',VMI_LightComplexity:'VMI_LightComplexity',VMI_ShaderComplexity:'VMI_ShaderComplexity',VMI_LightmapDensity:'VMI_LightmapDensity',VMI_LitLightmapDensity:'VMI_LitLightmapDensity',VMI_ReflectionOverride:'VMI_ReflectionOverride',VMI_VisualizeBuffer:'VMI_VisualizeBuffer',VMI_StationaryLightOverlap:'VMI_StationaryLightOverlap',VMI_CollisionPawn:'VMI_CollisionPawn',VMI_CollisionVisibility:'VMI_CollisionVisibility',VMI_LODColoration:'VMI_LODColoration',VMI_QuadOverdraw:'VMI_QuadOverdraw',VMI_PrimitiveDistanceAccuracy:'VMI_PrimitiveDistanceAccuracy',VMI_MeshUVDensityAccuracy:'VMI_MeshUVDensityAccuracy',VMI_ShaderComplexityWithQuadOverdraw:'VMI_ShaderComplexityWithQuadOverdraw',VMI_HLODColoration:'VMI_HLODColoration',VMI_GroupLODColoration:'VMI_GroupLODColoration',VMI_MaterialTextureScaleAccuracy:'VMI_MaterialTextureScaleAccuracy',VMI_RequiredTextureResolution:'VMI_RequiredTextureResolution',VMI_PathTracing:'VMI_PathTracing',VMI_RayTracingDebug:'VMI_RayTracingDebug',VMI_VisualizeNanite:'VMI_VisualizeNanite',VMI_VirtualTexturePendingMips:'VMI_VirtualTexturePendingMips',VMI_VisualizeLumen:'VMI_VisualizeLumen',VMI_VisualizeVirtualShadowMap:'VMI_VisualizeVirtualShadowMap',VMI_Max:'VMI_Max',VMI_Unknown:'VMI_Unknown', };
declare class ExposureSettings { 
	FixedEV100: number;
	bFixed: boolean;
	clone() : ExposureSettings;
	static C(Other: UObject | any): ExposureSettings;
}

declare class LevelEditorViewportInstanceSettings { 
	ViewportType: ELevelViewportType;
	PerspViewModeIndex: EViewModeIndex;
	OrthoViewModeIndex: EViewModeIndex;
	EditorShowFlagsString: string;
	GameShowFlagsString: string;
	BufferVisualizationMode: string;
	NaniteVisualizationMode: string;
	LumenVisualizationMode: string;
	VirtualShadowMapVisualizationMode: string;
	RayTracingDebugVisualizationMode: string;
	ExposureSettings: ExposureSettings;
	FOVAngle: number;
	FarViewPlane: number;
	bIsRealtime: boolean;
	bShowFPS: boolean;
	bShowOnScreenStats: boolean;
	EnabledStats: string[];
	bShowFullToolbar: boolean;
	clone() : LevelEditorViewportInstanceSettings;
	static C(Other: UObject | any): LevelEditorViewportInstanceSettings;
}

declare class LevelEditorViewportInstanceSettingsKeyValuePair { 
	ConfigName: string;
	ConfigSettings: LevelEditorViewportInstanceSettings;
	clone() : LevelEditorViewportInstanceSettingsKeyValuePair;
	static C(Other: UObject | any): LevelEditorViewportInstanceSettingsKeyValuePair;
}

declare class LevelEditorViewportSettings extends UObject { 
	FlightCameraControlType: EWASDType;
	FlightCameraControlExperimentalNavigation: boolean;
	LandscapeEditorControlType: ELandscapeFoliageEditorControlType;
	FoliageEditorControlType: ELandscapeFoliageEditorControlType;
	bPanMovesCanvas: boolean;
	bCenterZoomAroundCursor: boolean;
	MinimumOrthographicZoom: number;
	bAllowTranslateRotateZWidget: boolean;
	bAllowArcballRotate: boolean;
	bAllowScreenRotate: boolean;
	bClickBSPSelectsBrush: boolean;
	CameraSpeed: number;
	CameraSpeedScalar: number;
	MouseScrollCameraSpeed: number;
	MouseSensitivty: number;
	bInvertMouseLookYAxis: boolean;
	bInvertOrbitYAxis: boolean;
	bInvertMiddleMousePan: boolean;
	bInvertRightMouseDollyYAxis: boolean;
	bUseAbsoluteTranslation: boolean;
	bLevelStreamingVolumePrevis: boolean;
	bUseUE3OrbitControls: boolean;
	ScrollGestureDirectionFor3DViewports: EScrollGestureDirection;
	ScrollGestureDirectionForOrthoViewports: EScrollGestureDirection;
	bLevelEditorJoystickControls: boolean;
	bUseDistanceScaledCameraSpeed: boolean;
	bOrbitCameraAroundSelection: boolean;
	bUsePowerOf2SnapSize: boolean;
	DecimalGridSizes: number[];
	DecimalGridIntervals: number[];
	Pow2GridSizes: number[];
	Pow2GridIntervals: number[];
	CommonRotGridSizes: number[];
	DivisionsOf360RotGridSizes: number[];
	ScalingGridSizes: number[];
	GridEnabled: boolean;
	RotGridEnabled: boolean;
	SnapScaleEnabled: boolean;
	SnapToSurface: SnapToSurfaceSettings;
	bUsePercentageBasedScaling: boolean;
	bEnableLayerSnap: boolean;
	ActiveSnapLayerIndex: number;
	bEnableActorSnap: boolean;
	ActorSnapScale: number;
	ActorSnapDistance: number;
	bSnapVertices: boolean;
	SnapDistance: number;
	CurrentPosGridSize: number;
	CurrentRotGridSize: number;
	CurrentScalingGridSize: number;
	PreserveNonUniformScale: boolean;
	CurrentRotGridMode: ERotationGridMode;
	AspectRatioAxisConstraint: EAspectRatioAxisConstraint;
	bEnableViewportHoverFeedback: boolean;
	bHighlightWithBrackets: boolean;
	bUseLinkedOrthographicViewports: boolean;
	bStrictBoxSelection: boolean;
	bTransparentBoxSelection: boolean;
	bUseSelectionOutline: boolean;
	SelectionHighlightIntensity: number;
	BSPSelectionHighlightIntensity: number;
	bEnableViewportCameraToUpdateFromPIV: boolean;
	bPreviewSelectedCameras: boolean;
	CameraPreviewSize: number;
	BackgroundDropDistance: number;
	PreviewMeshes: SoftObjectPath[];
	BillboardScale: number;
	TransformWidgetSizeAdjustment: number;
	bSaveEngineStats: boolean;
	MeasuringToolUnits: EMeasuringToolUnits;
	SelectedSplinePointSizeAdjustment: number;
	SplineLineThicknessAdjustment: number;
	SplineTangentHandleSizeAdjustment: number;
	SplineTangentScale: number;
	LastInViewportMenuLocation: Vector2D;
	PerInstanceSettings: LevelEditorViewportInstanceSettingsKeyValuePair[];
	static Load(ResourceName: string): LevelEditorViewportSettings;
	static Find(Outer: UObject, ResourceName: string): LevelEditorViewportSettings;
	static GetDefaultObject(): LevelEditorViewportSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelEditorViewportSettings;
	static C(Other: UObject | any): LevelEditorViewportSettings;
}

declare class LevelExporterFBX extends ExporterFBX { 
	static Load(ResourceName: string): LevelExporterFBX;
	static Find(Outer: UObject, ResourceName: string): LevelExporterFBX;
	static GetDefaultObject(): LevelExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterFBX;
	static C(Other: UObject | any): LevelExporterFBX;
}

declare class LevelExporterLOD extends Exporter { 
	static Load(ResourceName: string): LevelExporterLOD;
	static Find(Outer: UObject, ResourceName: string): LevelExporterLOD;
	static GetDefaultObject(): LevelExporterLOD;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterLOD;
	static C(Other: UObject | any): LevelExporterLOD;
}

declare class LevelExporterOBJ extends Exporter { 
	static Load(ResourceName: string): LevelExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): LevelExporterOBJ;
	static GetDefaultObject(): LevelExporterOBJ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterOBJ;
	static C(Other: UObject | any): LevelExporterOBJ;
}

declare class LevelExporterSTL extends Exporter { 
	static Load(ResourceName: string): LevelExporterSTL;
	static Find(Outer: UObject, ResourceName: string): LevelExporterSTL;
	static GetDefaultObject(): LevelExporterSTL;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterSTL;
	static C(Other: UObject | any): LevelExporterSTL;
}

declare class LevelExporterT3D extends Exporter { 
	static Load(ResourceName: string): LevelExporterT3D;
	static Find(Outer: UObject, ResourceName: string): LevelExporterT3D;
	static GetDefaultObject(): LevelExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelExporterT3D;
	static C(Other: UObject | any): LevelExporterT3D;
}

declare class LevelFactory extends Factory { 
	static Load(ResourceName: string): LevelFactory;
	static Find(Outer: UObject, ResourceName: string): LevelFactory;
	static GetDefaultObject(): LevelFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelFactory;
	static C(Other: UObject | any): LevelFactory;
}

declare class LevelThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): LevelThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): LevelThumbnailRenderer;
	static GetDefaultObject(): LevelThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelThumbnailRenderer;
	static C(Other: UObject | any): LevelThumbnailRenderer;
}

declare class LightmassDebugOptions { 
	bDebugMode: boolean;
	bStatsEnabled: boolean;
	bGatherBSPSurfacesAcrossComponents: boolean;
	CoplanarTolerance: number;
	bUseImmediateImport: boolean;
	bImmediateProcessMappings: boolean;
	bSortMappings: boolean;
	bDumpBinaryFiles: boolean;
	bDebugMaterials: boolean;
	bPadMappings: boolean;
	bDebugPaddings: boolean;
	bOnlyCalcDebugTexelMappings: boolean;
	bUseRandomColors: boolean;
	bColorBordersGreen: boolean;
	bColorByExecutionTime: boolean;
	ExecutionTimeDivisor: number;
	clone() : LightmassDebugOptions;
	static C(Other: UObject | any): LightmassDebugOptions;
}

declare class SwarmDebugOptions { 
	bDistributionEnabled: boolean;
	bForceContentExport: boolean;
	bInitialized: boolean;
	clone() : SwarmDebugOptions;
	static C(Other: UObject | any): SwarmDebugOptions;
}

declare class LightmassOptionsObject extends UObject { 
	DebugSettings: LightmassDebugOptions;
	SwarmSettings: SwarmDebugOptions;
	static Load(ResourceName: string): LightmassOptionsObject;
	static Find(Outer: UObject, ResourceName: string): LightmassOptionsObject;
	static GetDefaultObject(): LightmassOptionsObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightmassOptionsObject;
	static C(Other: UObject | any): LightmassOptionsObject;
}

declare class LightWeightInstanceFactory extends Factory { 
	ParentClass: UnrealEngineClass;
	static Load(ResourceName: string): LightWeightInstanceFactory;
	static Find(Outer: UObject, ResourceName: string): LightWeightInstanceFactory;
	static GetDefaultObject(): LightWeightInstanceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightWeightInstanceFactory;
	static C(Other: UObject | any): LightWeightInstanceFactory;
}

declare class LinearStairBuilder extends EditorBrushBuilder { 
	StepLength: number;
	StepHeight: number;
	StepWidth: number;
	NumSteps: number;
	AddToFirstStep: number;
	GroupName: string;
	static Load(ResourceName: string): LinearStairBuilder;
	static Find(Outer: UObject, ResourceName: string): LinearStairBuilder;
	static GetDefaultObject(): LinearStairBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinearStairBuilder;
	static C(Other: UObject | any): LinearStairBuilder;
}

declare class ListMaterialsUsedWithMeshEmittersCommandlet extends Commandlet { 
	static Load(ResourceName: string): ListMaterialsUsedWithMeshEmittersCommandlet;
	static Find(Outer: UObject, ResourceName: string): ListMaterialsUsedWithMeshEmittersCommandlet;
	static GetDefaultObject(): ListMaterialsUsedWithMeshEmittersCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListMaterialsUsedWithMeshEmittersCommandlet;
	static C(Other: UObject | any): ListMaterialsUsedWithMeshEmittersCommandlet;
}

declare class ListStaticMeshesImportedFromSpeedTreesCommandlet extends Commandlet { 
	static Load(ResourceName: string): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static Find(Outer: UObject, ResourceName: string): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static GetDefaultObject(): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListStaticMeshesImportedFromSpeedTreesCommandlet;
	static C(Other: UObject | any): ListStaticMeshesImportedFromSpeedTreesCommandlet;
}

declare class LoadPackageCommandlet extends Commandlet { 
	static Load(ResourceName: string): LoadPackageCommandlet;
	static Find(Outer: UObject, ResourceName: string): LoadPackageCommandlet;
	static GetDefaultObject(): LoadPackageCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LoadPackageCommandlet;
	static C(Other: UObject | any): LoadPackageCommandlet;
}

declare class MakeBinaryConfigCommandlet extends Commandlet { 
	static Load(ResourceName: string): MakeBinaryConfigCommandlet;
	static Find(Outer: UObject, ResourceName: string): MakeBinaryConfigCommandlet;
	static GetDefaultObject(): MakeBinaryConfigCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MakeBinaryConfigCommandlet;
	static C(Other: UObject | any): MakeBinaryConfigCommandlet;
}

declare class EditorParameterGroup { 
	GroupName: string;
	GroupAssociation: EMaterialParameterAssociation;
	Parameters: DEditorParameterValue[];
	GroupSortPriority: number;
	clone() : EditorParameterGroup;
	static C(Other: UObject | any): EditorParameterGroup;
}

declare class MaterialFunctionInstance extends MaterialFunctionInterface { 
	Parent: MaterialFunctionInterface;
	Base: MaterialFunctionInterface;
	ScalarParameterValues: ScalarParameterValue[];
	VectorParameterValues: VectorParameterValue[];
	DoubleVectorParameterValues: DoubleVectorParameterValue[];
	TextureParameterValues: TextureParameterValue[];
	FontParameterValues: FontParameterValue[];
	StaticSwitchParameterValues: StaticSwitchParameter[];
	StaticComponentMaskParameterValues: StaticComponentMaskParameter[];
	RuntimeVirtualTextureParameterValues: RuntimeVirtualTextureParameterValue[];
	PreviewMaterial: MaterialInstanceConstant;
	static Load(ResourceName: string): MaterialFunctionInstance;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionInstance;
	static GetDefaultObject(): MaterialFunctionInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionInstance;
	static C(Other: UObject | any): MaterialFunctionInstance;
}

declare class LightmassParameterValue { 
	bOverride: boolean;
	clone() : LightmassParameterValue;
	static C(Other: UObject | any): LightmassParameterValue;
}

declare class LightmassBooleanParameterValue extends LightmassParameterValue { 
	ParameterValue: boolean;
	clone() : LightmassBooleanParameterValue;
	static C(Other: UObject | any): LightmassBooleanParameterValue;
}

declare class LightmassScalarParameterValue extends LightmassParameterValue { 
	ParameterValue: number;
	clone() : LightmassScalarParameterValue;
	static C(Other: UObject | any): LightmassScalarParameterValue;
}

declare class LightmassParameterizedMaterialSettings { 
	CastShadowAsMasked: LightmassBooleanParameterValue;
	EmissiveBoost: LightmassScalarParameterValue;
	DiffuseBoost: LightmassScalarParameterValue;
	ExportResolutionScale: LightmassScalarParameterValue;
	clone() : LightmassParameterizedMaterialSettings;
	static C(Other: UObject | any): LightmassParameterizedMaterialSettings;
}

declare class MaterialEditorInstanceConstant extends UObject { 
	PhysMaterial: PhysicalMaterial;
	Parent: MaterialInterface;
	ParameterGroups: EditorParameterGroup[];
	RefractionDepthBias: number;
	SubsurfaceProfile: SubsurfaceProfile;
	bOverrideSubsurfaceProfile: boolean;
	bOverrideBaseProperties: boolean;
	bIsFunctionPreviewMaterial: boolean;
	bIsFunctionInstanceDirty: boolean;
	BasePropertyOverrides: MaterialInstanceBasePropertyOverrides;
	SourceInstance: MaterialInstanceConstant;
	SourceFunction: MaterialFunctionInstance;
	VisibleExpressions: MaterialParameterInfo[];
	LightmassSettings: LightmassParameterizedMaterialSettings;
	bUseOldStyleMICEditorGroups: boolean;
	StoredLayerPreviews: MaterialInstanceConstant[];
	StoredBlendPreviews: MaterialInstanceConstant[];
	static Load(ResourceName: string): MaterialEditorInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorInstanceConstant;
	static GetDefaultObject(): MaterialEditorInstanceConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorInstanceConstant;
	static C(Other: UObject | any): MaterialEditorInstanceConstant;
}

declare class MaterialEditorMeshComponent extends StaticMeshComponent { 
	static Load(ResourceName: string): MaterialEditorMeshComponent;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorMeshComponent;
	static GetDefaultObject(): MaterialEditorMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorMeshComponent;
	static C(Other: UObject | any): MaterialEditorMeshComponent;
}

declare class MaterialEditorOptions extends UObject { 
	bShowGrid: boolean;
	bHideUnusedConnectorsSetting: boolean;
	bRealtimeMaterialViewport: boolean;
	bRealtimeExpressionViewport: boolean;
	bLivePreviewUpdate: boolean;
	bHideUnrelatedNodes: boolean;
	bAlwaysRefreshAllPreviews: boolean;
	bUseUnsortedMenus: boolean;
	FavoriteExpressions: string[];
	static Load(ResourceName: string): MaterialEditorOptions;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorOptions;
	static GetDefaultObject(): MaterialEditorOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorOptions;
	static C(Other: UObject | any): MaterialEditorOptions;
}

declare class MaterialEditorPreviewParameters extends UObject { 
	ParameterGroups: EditorParameterGroup[];
	PreviewMaterial: Material;
	OriginalFunction: MaterialFunction;
	OriginalMaterial: Material;
	StoredLayerPreviews: MaterialInstanceConstant[];
	StoredBlendPreviews: MaterialInstanceConstant[];
	static Load(ResourceName: string): MaterialEditorPreviewParameters;
	static Find(Outer: UObject, ResourceName: string): MaterialEditorPreviewParameters;
	static GetDefaultObject(): MaterialEditorPreviewParameters;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorPreviewParameters;
	static C(Other: UObject | any): MaterialEditorPreviewParameters;
}

declare class MaterialFactoryNew extends Factory { 
	InitialTexture: Texture;
	static Load(ResourceName: string): MaterialFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialFactoryNew;
	static GetDefaultObject(): MaterialFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFactoryNew;
	static C(Other: UObject | any): MaterialFactoryNew;
}

declare class MaterialFunctionFactoryNew extends Factory { 
	static Load(ResourceName: string): MaterialFunctionFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionFactoryNew;
	static GetDefaultObject(): MaterialFunctionFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionFactoryNew;
	static C(Other: UObject | any): MaterialFunctionFactoryNew;
}

declare class MaterialFunctionInstanceFactory extends Factory { 
	InitialParent: MaterialFunctionInterface;
	static Load(ResourceName: string): MaterialFunctionInstanceFactory;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionInstanceFactory;
	static GetDefaultObject(): MaterialFunctionInstanceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionInstanceFactory;
	static C(Other: UObject | any): MaterialFunctionInstanceFactory;
}

declare class MaterialFunctionMaterialLayerInstanceFactory extends MaterialFunctionInstanceFactory { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerInstanceFactory;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerInstanceFactory;
	static GetDefaultObject(): MaterialFunctionMaterialLayerInstanceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerInstanceFactory;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerInstanceFactory;
}

declare class MaterialFunctionMaterialLayerBlendInstanceFactory extends MaterialFunctionInstanceFactory { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlendInstanceFactory;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlendInstanceFactory;
	static GetDefaultObject(): MaterialFunctionMaterialLayerBlendInstanceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlendInstanceFactory;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlendInstanceFactory;
}

declare class MaterialFunctionMaterialLayerBlendFactory extends Factory { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlendFactory;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlendFactory;
	static GetDefaultObject(): MaterialFunctionMaterialLayerBlendFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlendFactory;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlendFactory;
}

declare class MaterialFunctionMaterialLayerFactory extends Factory { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerFactory;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerFactory;
	static GetDefaultObject(): MaterialFunctionMaterialLayerFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerFactory;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerFactory;
}

declare class MaterialFunctionThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): MaterialFunctionThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionThumbnailRenderer;
	static GetDefaultObject(): MaterialFunctionThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionThumbnailRenderer;
	static C(Other: UObject | any): MaterialFunctionThumbnailRenderer;
}

declare class MaterialGraphNode_Base extends EdGraphNode { 
	static Load(ResourceName: string): MaterialGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Base;
	static GetDefaultObject(): MaterialGraphNode_Base;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Base;
	static C(Other: UObject | any): MaterialGraphNode_Base;
}

declare class MaterialGraphNode_Root extends MaterialGraphNode_Base { 
	Material: Material;
	static Load(ResourceName: string): MaterialGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Root;
	static GetDefaultObject(): MaterialGraphNode_Root;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Root;
	static C(Other: UObject | any): MaterialGraphNode_Root;
}

declare class MaterialGraph extends EdGraph { 
	Material: Material;
	MaterialFunction: MaterialFunction;
	RootNode: MaterialGraphNode_Root;
	SubgraphExpression: MaterialExpression;
	OriginalMaterialFullName: string;
	static Load(ResourceName: string): MaterialGraph;
	static Find(Outer: UObject, ResourceName: string): MaterialGraph;
	static GetDefaultObject(): MaterialGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraph;
	static C(Other: UObject | any): MaterialGraph;
}

declare class MaterialGraphNode extends MaterialGraphNode_Base { 
	MaterialExpression: MaterialExpression;
	static Load(ResourceName: string): MaterialGraphNode;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode;
	static GetDefaultObject(): MaterialGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode;
	static C(Other: UObject | any): MaterialGraphNode;
}

declare class MaterialGraphNode_Comment extends EdGraphNode_Comment { 
	MaterialExpressionComment: MaterialExpressionComment;
	static Load(ResourceName: string): MaterialGraphNode_Comment;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Comment;
	static GetDefaultObject(): MaterialGraphNode_Comment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Comment;
	static C(Other: UObject | any): MaterialGraphNode_Comment;
}

declare class MaterialGraphNode_Composite extends MaterialGraphNode { 
	BoundGraph: MaterialGraph;
	static Load(ResourceName: string): MaterialGraphNode_Composite;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Composite;
	static GetDefaultObject(): MaterialGraphNode_Composite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Composite;
	static C(Other: UObject | any): MaterialGraphNode_Composite;
}

declare class MaterialGraphNode_Knot extends MaterialGraphNode { 
	static Load(ResourceName: string): MaterialGraphNode_Knot;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_Knot;
	static GetDefaultObject(): MaterialGraphNode_Knot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_Knot;
	static C(Other: UObject | any): MaterialGraphNode_Knot;
}

declare class MaterialGraphNode_PinBase extends MaterialGraphNode { 
	static Load(ResourceName: string): MaterialGraphNode_PinBase;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphNode_PinBase;
	static GetDefaultObject(): MaterialGraphNode_PinBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphNode_PinBase;
	static C(Other: UObject | any): MaterialGraphNode_PinBase;
}

declare class MaterialGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): MaterialGraphSchema;
	static Find(Outer: UObject, ResourceName: string): MaterialGraphSchema;
	static GetDefaultObject(): MaterialGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialGraphSchema;
	static C(Other: UObject | any): MaterialGraphSchema;
}

declare class MaterialImportHelpers extends UObject { 
	static Load(ResourceName: string): MaterialImportHelpers;
	static Find(Outer: UObject, ResourceName: string): MaterialImportHelpers;
	static GetDefaultObject(): MaterialImportHelpers;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialImportHelpers;
	static FindExistingMaterialFromSearchLocation(MaterialFullName: string,BasePackagePath: string,SearchLocation: EMaterialSearchLocation,OutError?: string): {OutError: string, $: MaterialInterface};
	static FindExistingMaterial(BasePath: string,MaterialFullName: string,bRecursivePaths: boolean,OutError?: string): {OutError: string, $: MaterialInterface};
	static C(Other: UObject | any): MaterialImportHelpers;
}

declare class MaterialInstanceConstantFactoryNew extends Factory { 
	InitialParent: MaterialInterface;
	static Load(ResourceName: string): MaterialInstanceConstantFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceConstantFactoryNew;
	static GetDefaultObject(): MaterialInstanceConstantFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceConstantFactoryNew;
	static C(Other: UObject | any): MaterialInstanceConstantFactoryNew;
}

declare class MaterialInstanceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): MaterialInstanceThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): MaterialInstanceThumbnailRenderer;
	static GetDefaultObject(): MaterialInstanceThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceThumbnailRenderer;
	static C(Other: UObject | any): MaterialInstanceThumbnailRenderer;
}

declare class MaterialParameterCollectionFactoryNew extends Factory { 
	static Load(ResourceName: string): MaterialParameterCollectionFactoryNew;
	static Find(Outer: UObject, ResourceName: string): MaterialParameterCollectionFactoryNew;
	static GetDefaultObject(): MaterialParameterCollectionFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialParameterCollectionFactoryNew;
	static C(Other: UObject | any): MaterialParameterCollectionFactoryNew;
}

declare class MaterialStatsOptions extends UObject { 
	bPlatformUsed: number;
	bMaterialQualityUsed: number;
	static Load(ResourceName: string): MaterialStatsOptions;
	static Find(Outer: UObject, ResourceName: string): MaterialStatsOptions;
	static GetDefaultObject(): MaterialStatsOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialStatsOptions;
	static C(Other: UObject | any): MaterialStatsOptions;
}

declare class MergeShaderPipelineCachesCommandlet extends Commandlet { 
	static Load(ResourceName: string): MergeShaderPipelineCachesCommandlet;
	static Find(Outer: UObject, ResourceName: string): MergeShaderPipelineCachesCommandlet;
	static GetDefaultObject(): MergeShaderPipelineCachesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MergeShaderPipelineCachesCommandlet;
	static C(Other: UObject | any): MergeShaderPipelineCachesCommandlet;
}

declare class MirrorTableFindReplaceExpressions extends UObject { 
	FindReplaceExpressions: MirrorFindReplaceExpression[];
	static Load(ResourceName: string): MirrorTableFindReplaceExpressions;
	static Find(Outer: UObject, ResourceName: string): MirrorTableFindReplaceExpressions;
	static GetDefaultObject(): MirrorTableFindReplaceExpressions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MirrorTableFindReplaceExpressions;
	static C(Other: UObject | any): MirrorTableFindReplaceExpressions;
}

declare class MirrorDataTableFactory extends Factory { 
	struct: ScriptStruct;
	Skeleton: Skeleton;
	MirrorFindReplaceExpressions: MirrorTableFindReplaceExpressions;
	static Load(ResourceName: string): MirrorDataTableFactory;
	static Find(Outer: UObject, ResourceName: string): MirrorDataTableFactory;
	static GetDefaultObject(): MirrorDataTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MirrorDataTableFactory;
	static C(Other: UObject | any): MirrorDataTableFactory;
}

declare class ModelExporterT3D extends Exporter { 
	static Load(ResourceName: string): ModelExporterT3D;
	static Find(Outer: UObject, ResourceName: string): ModelExporterT3D;
	static GetDefaultObject(): ModelExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModelExporterT3D;
	static C(Other: UObject | any): ModelExporterT3D;
}

declare class ModelFactory extends Factory { 
	static Load(ResourceName: string): ModelFactory;
	static Find(Outer: UObject, ResourceName: string): ModelFactory;
	static GetDefaultObject(): ModelFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModelFactory;
	static C(Other: UObject | any): ModelFactory;
}

declare class ObjectElementDetailsInterface extends UObject { 
	static Load(ResourceName: string): ObjectElementDetailsInterface;
	static Find(Outer: UObject, ResourceName: string): ObjectElementDetailsInterface;
	static GetDefaultObject(): ObjectElementDetailsInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectElementDetailsInterface;
	static C(Other: UObject | any): ObjectElementDetailsInterface;
}

declare class ObjectElementSelectionInterface extends UObject { 
	static Load(ResourceName: string): ObjectElementSelectionInterface;
	static Find(Outer: UObject, ResourceName: string): ObjectElementSelectionInterface;
	static GetDefaultObject(): ObjectElementSelectionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectElementSelectionInterface;
	static C(Other: UObject | any): ObjectElementSelectionInterface;
}

declare class ObjectElementEditorSelectionInterface extends ObjectElementSelectionInterface { 
	static Load(ResourceName: string): ObjectElementEditorSelectionInterface;
	static Find(Outer: UObject, ResourceName: string): ObjectElementEditorSelectionInterface;
	static GetDefaultObject(): ObjectElementEditorSelectionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectElementEditorSelectionInterface;
	static C(Other: UObject | any): ObjectElementEditorSelectionInterface;
}

declare class ObjectExporterT3D extends Exporter { 
	static Load(ResourceName: string): ObjectExporterT3D;
	static Find(Outer: UObject, ResourceName: string): ObjectExporterT3D;
	static GetDefaultObject(): ObjectExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectExporterT3D;
	static C(Other: UObject | any): ObjectExporterT3D;
}

declare class ObjectLibraryFactory extends Factory { 
	static Load(ResourceName: string): ObjectLibraryFactory;
	static Find(Outer: UObject, ResourceName: string): ObjectLibraryFactory;
	static GetDefaultObject(): ObjectLibraryFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectLibraryFactory;
	static C(Other: UObject | any): ObjectLibraryFactory;
}

declare class PackageFactory extends Factory { 
	static Load(ResourceName: string): PackageFactory;
	static Find(Outer: UObject, ResourceName: string): PackageFactory;
	static GetDefaultObject(): PackageFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageFactory;
	static C(Other: UObject | any): PackageFactory;
}

declare class PackageTools extends UObject { 
	static Load(ResourceName: string): PackageTools;
	static Find(Outer: UObject, ResourceName: string): PackageTools;
	static GetDefaultObject(): PackageTools;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageTools;
	static SanitizePackageName(InPackageName: string): string;
	static C(Other: UObject | any): PackageTools;
}

declare class PackFactory extends Factory { 
	static Load(ResourceName: string): PackFactory;
	static Find(Outer: UObject, ResourceName: string): PackFactory;
	static GetDefaultObject(): PackFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackFactory;
	static C(Other: UObject | any): PackFactory;
}

declare class PanelExtensionSubsystem extends EditorSubsystem { 
	static Load(ResourceName: string): PanelExtensionSubsystem;
	static Find(Outer: UObject, ResourceName: string): PanelExtensionSubsystem;
	static GetDefaultObject(): PanelExtensionSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PanelExtensionSubsystem;
	static C(Other: UObject | any): PanelExtensionSubsystem;
}

declare class ParticleSystemAuditCommandlet extends Commandlet { 
	HighSpawnRateOrBurstThreshold: number;
	FarLODDistanceTheshold: number;
	static Load(ResourceName: string): ParticleSystemAuditCommandlet;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemAuditCommandlet;
	static GetDefaultObject(): ParticleSystemAuditCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemAuditCommandlet;
	static C(Other: UObject | any): ParticleSystemAuditCommandlet;
}

declare class ParticleSystemFactoryNew extends Factory { 
	static Load(ResourceName: string): ParticleSystemFactoryNew;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemFactoryNew;
	static GetDefaultObject(): ParticleSystemFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemFactoryNew;
	static C(Other: UObject | any): ParticleSystemFactoryNew;
}

declare class ParticleSystemThumbnailRenderer extends TextureThumbnailRenderer { 
	NoImage: Texture2D;
	OutOfDate: Texture2D;
	static Load(ResourceName: string): ParticleSystemThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): ParticleSystemThumbnailRenderer;
	static GetDefaultObject(): ParticleSystemThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemThumbnailRenderer;
	static C(Other: UObject | any): ParticleSystemThumbnailRenderer;
}

declare type EAnimationViewportCameraFollowMode = 'None' | 'Bounds' | 'Bone' | 'EAnimationViewportCameraFollowMode_MAX';
declare var EAnimationViewportCameraFollowMode : { None:'None',Bounds:'Bounds',Bone:'Bone',EAnimationViewportCameraFollowMode_MAX:'EAnimationViewportCameraFollowMode_MAX', };
declare class ViewportConfigOptions { 
	ViewModeIndex: EViewModeIndex;
	ViewFOV: number;
	CameraSpeedSetting: number;
	CameraSpeedScalar: number;
	CameraFollowMode: EAnimationViewportCameraFollowMode;
	CameraFollowBoneName: string;
	clone() : ViewportConfigOptions;
	static C(Other: UObject | any): ViewportConfigOptions;
}

declare class AssetEditorOptions { 
	Context: string;
	ViewportConfigs: ViewportConfigOptions;
	clone() : AssetEditorOptions;
	static C(Other: UObject | any): AssetEditorOptions;
}

declare class PersonaOptions extends UObject { 
	bAutoAlignFloorToMesh: boolean;
	bAlwaysOpenAnimationAssetsInNewTab: boolean;
	bShowGrid: boolean;
	bHighlightOrigin: boolean;
	bMuteAudio: boolean;
	bUseAudioAttenuation: boolean;
	ShowMeshStats: number;
	DefaultLocalAxesSelection: any;
	DefaultBoneDrawSelection: any;
	SectionTimingNodeColor: LinearColor;
	NotifyTimingNodeColor: LinearColor;
	BranchingPointTimingNodeColor: LinearColor;
	bUseInlineSocketEditor: boolean;
	bFlattenSkeletonHierarchyWhenFiltering: boolean;
	bHideParentsWhenFiltering: boolean;
	bExpandTreeOnSelection: boolean;
	bAllowPreviewMeshCollectionsToSelectFromDifferentSkeletons: boolean;
	bAllowPreviewMeshCollectionsToUseCustomAnimBP: boolean;
	bAllowMeshSectionSelection: boolean;
	NumFolderFiltersInAssetBrowser: any;
	AssetEditorOptions: AssetEditorOptions[];
	CurveEditorSnapInterval: number;
	TimelineScrubSnapValue: number;
	TimelineDisplayFormat: EFrameNumberDisplayFormats;
	bTimelineDisplayPercentage: boolean;
	bTimelineDisplayFormatSecondary: boolean;
	bTimelineDisplayCurveKeys: boolean;
	TimelineEnabledSnaps: string[];
	static Load(ResourceName: string): PersonaOptions;
	static Find(Outer: UObject, ResourceName: string): PersonaOptions;
	static GetDefaultObject(): PersonaOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaOptions;
	static C(Other: UObject | any): PersonaOptions;
}

declare class PhysicalMaterialFactoryNew extends Factory { 
	PhysicalMaterialClass: UnrealEngineClass;
	static Load(ResourceName: string): PhysicalMaterialFactoryNew;
	static Find(Outer: UObject, ResourceName: string): PhysicalMaterialFactoryNew;
	static GetDefaultObject(): PhysicalMaterialFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterialFactoryNew;
	static C(Other: UObject | any): PhysicalMaterialFactoryNew;
}

declare class PhysicalMaterialMaskFactory extends Factory { 
	PhysicalMaterialMaskClass: UnrealEngineClass;
	static Load(ResourceName: string): PhysicalMaterialMaskFactory;
	static Find(Outer: UObject, ResourceName: string): PhysicalMaterialMaskFactory;
	static GetDefaultObject(): PhysicalMaterialMaskFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterialMaskFactory;
	static C(Other: UObject | any): PhysicalMaterialMaskFactory;
}

declare class PhysicalMaterialMaskThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): PhysicalMaterialMaskThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): PhysicalMaterialMaskThumbnailRenderer;
	static GetDefaultObject(): PhysicalMaterialMaskThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterialMaskThumbnailRenderer;
	static C(Other: UObject | any): PhysicalMaterialMaskThumbnailRenderer;
}

declare type EPhysicsAssetEditorRenderMode = 'Solid' | 'Wireframe' | 'None' | 'EPhysicsAssetEditorRenderMode_MAX';
declare var EPhysicsAssetEditorRenderMode : { Solid:'Solid',Wireframe:'Wireframe',None:'None',EPhysicsAssetEditorRenderMode_MAX:'EPhysicsAssetEditorRenderMode_MAX', };
declare type EPhysicsAssetEditorConstraintViewMode = 'None' | 'AllPositions' | 'AllLimits' | 'EPhysicsAssetEditorConstraintViewMode_MAX';
declare var EPhysicsAssetEditorConstraintViewMode : { None:'None',AllPositions:'AllPositions',AllLimits:'AllLimits',EPhysicsAssetEditorConstraintViewMode_MAX:'EPhysicsAssetEditorConstraintViewMode_MAX', };
declare class PhysicsAssetEditorOptions extends UObject { 
	PhysicsBlend: number;
	bUpdateJointsFromAnimation: boolean;
	PhysicsUpdateMode: EPhysicsTransformUpdateMode;
	PokePauseTime: number;
	PokeBlendTime: number;
	GravScale: number;
	GravityOverrideZ: number;
	bUseGravityOverride: boolean;
	MaxFPS: number;
	HandleLinearDamping: number;
	HandleLinearStiffness: number;
	HandleAngularDamping: number;
	HandleAngularStiffness: number;
	InterpolationSpeed: number;
	PokeStrength: number;
	InteractionDistance: number;
	bShowConstraintsAsPoints: boolean;
	bRenderOnlySelectedConstraints: boolean;
	ConstraintDrawSize: number;
	MeshViewMode: EPhysicsAssetEditorRenderMode;
	CollisionViewMode: EPhysicsAssetEditorRenderMode;
	ConstraintViewMode: EPhysicsAssetEditorConstraintViewMode;
	SimulationMeshViewMode: EPhysicsAssetEditorRenderMode;
	SimulationCollisionViewMode: EPhysicsAssetEditorRenderMode;
	SimulationConstraintViewMode: EPhysicsAssetEditorConstraintViewMode;
	CollisionOpacity: number;
	bSolidRenderingForSelectedOnly: boolean;
	bHideSimulatedBodies: boolean;
	bHideKinematicBodies: boolean;
	bResetClothWhenSimulating: boolean;
	static Load(ResourceName: string): PhysicsAssetEditorOptions;
	static Find(Outer: UObject, ResourceName: string): PhysicsAssetEditorOptions;
	static GetDefaultObject(): PhysicsAssetEditorOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsAssetEditorOptions;
	static C(Other: UObject | any): PhysicsAssetEditorOptions;
}

declare class PhysicsAssetFactory extends Factory { 
	TargetSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): PhysicsAssetFactory;
	static Find(Outer: UObject, ResourceName: string): PhysicsAssetFactory;
	static GetDefaultObject(): PhysicsAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsAssetFactory;
	static C(Other: UObject | any): PhysicsAssetFactory;
}

declare type EPhysAssetFitGeomType = 'EFG_Box' | 'EFG_Sphyl' | 'EFG_Sphere' | 'EFG_TaperedCapsule' | 'EFG_SingleConvexHull' | 'EFG_MultiConvexHull' | 'EFG_MAX';
declare var EPhysAssetFitGeomType : { EFG_Box:'EFG_Box',EFG_Sphyl:'EFG_Sphyl',EFG_Sphere:'EFG_Sphere',EFG_TaperedCapsule:'EFG_TaperedCapsule',EFG_SingleConvexHull:'EFG_SingleConvexHull',EFG_MultiConvexHull:'EFG_MultiConvexHull',EFG_MAX:'EFG_MAX', };
declare type EPhysAssetFitVertWeight = 'EVW_AnyWeight' | 'EVW_DominantWeight' | 'EVW_MAX';
declare var EPhysAssetFitVertWeight : { EVW_AnyWeight:'EVW_AnyWeight',EVW_DominantWeight:'EVW_DominantWeight',EVW_MAX:'EVW_MAX', };
declare class PhysAssetCreateParams { 
	MinBoneSize: number;
	MinWeldSize: number;
	GeomType: EPhysAssetFitGeomType;
	VertWeight: EPhysAssetFitVertWeight;
	bAutoOrientToBone: boolean;
	bCreateConstraints: boolean;
	bWalkPastSmall: boolean;
	bBodyForAll: boolean;
	bDisableCollisionsByDefault: boolean;
	AngularConstraintMode: EAngularConstraintMotion;
	HullCount: number;
	MaxHullVerts: number;
	clone() : PhysAssetCreateParams;
	static C(Other: UObject | any): PhysAssetCreateParams;
}

declare class PhysicsAssetGenerationSettings extends UObject { 
	CreateParams: PhysAssetCreateParams;
	static Load(ResourceName: string): PhysicsAssetGenerationSettings;
	static Find(Outer: UObject, ResourceName: string): PhysicsAssetGenerationSettings;
	static GetDefaultObject(): PhysicsAssetGenerationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsAssetGenerationSettings;
	static C(Other: UObject | any): PhysicsAssetGenerationSettings;
}

declare class PhysicsAssetThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): PhysicsAssetThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): PhysicsAssetThumbnailRenderer;
	static GetDefaultObject(): PhysicsAssetThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsAssetThumbnailRenderer;
	static C(Other: UObject | any): PhysicsAssetThumbnailRenderer;
}

declare class PkgInfoCommandlet extends Commandlet { 
	static Load(ResourceName: string): PkgInfoCommandlet;
	static Find(Outer: UObject, ResourceName: string): PkgInfoCommandlet;
	static GetDefaultObject(): PkgInfoCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PkgInfoCommandlet;
	static C(Other: UObject | any): PkgInfoCommandlet;
}

declare class PolysExporterOBJ extends Exporter { 
	static Load(ResourceName: string): PolysExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): PolysExporterOBJ;
	static GetDefaultObject(): PolysExporterOBJ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysExporterOBJ;
	static C(Other: UObject | any): PolysExporterOBJ;
}

declare class PolysExporterT3D extends Exporter { 
	static Load(ResourceName: string): PolysExporterT3D;
	static Find(Outer: UObject, ResourceName: string): PolysExporterT3D;
	static GetDefaultObject(): PolysExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysExporterT3D;
	static C(Other: UObject | any): PolysExporterT3D;
}

declare class PolysFactory extends Factory { 
	static Load(ResourceName: string): PolysFactory;
	static Find(Outer: UObject, ResourceName: string): PolysFactory;
	static GetDefaultObject(): PolysFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PolysFactory;
	static C(Other: UObject | any): PolysFactory;
}

declare class PopulateDialogueWaveFromCharacterSheetCommandlet extends Commandlet { 
	static Load(ResourceName: string): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static Find(Outer: UObject, ResourceName: string): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static GetDefaultObject(): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PopulateDialogueWaveFromCharacterSheetCommandlet;
	static C(Other: UObject | any): PopulateDialogueWaveFromCharacterSheetCommandlet;
}

declare class PoseAssetFactory extends Factory { 
	SourceAnimation: AnimSequence;
	PoseNames: string[];
	TargetSkeleton: Skeleton;
	PreviewSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): PoseAssetFactory;
	static Find(Outer: UObject, ResourceName: string): PoseAssetFactory;
	static GetDefaultObject(): PoseAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PoseAssetFactory;
	static C(Other: UObject | any): PoseAssetFactory;
}

declare class PreviewMaterial extends Material { 
	static Load(ResourceName: string): PreviewMaterial;
	static Find(Outer: UObject, ResourceName: string): PreviewMaterial;
	static GetDefaultObject(): PreviewMaterial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMaterial;
	static C(Other: UObject | any): PreviewMaterial;
}

declare class PreviewMeshCollectionFactory extends Factory { 
	CurrentSkeleton: any;
	static Load(ResourceName: string): PreviewMeshCollectionFactory;
	static Find(Outer: UObject, ResourceName: string): PreviewMeshCollectionFactory;
	static GetDefaultObject(): PreviewMeshCollectionFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMeshCollectionFactory;
	static C(Other: UObject | any): PreviewMeshCollectionFactory;
}

declare class PropertyEditorTestInstancedObject extends UObject { 
	Number: number;
	static Load(ResourceName: string): PropertyEditorTestInstancedObject;
	static Find(Outer: UObject, ResourceName: string): PropertyEditorTestInstancedObject;
	static GetDefaultObject(): PropertyEditorTestInstancedObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyEditorTestInstancedObject;
	static C(Other: UObject | any): PropertyEditorTestInstancedObject;
}

declare type EPropertyEditorTestEnum = 'PropertyEditorTest_Enum1' | 'PropertyEditorTest_Enum2' | 'PropertyEditorTest_Enum3' | 'PropertyEditorTest_Enum4' | 'PropertyEditorTest_Enum5' | 'PropertyEditorTest_Enum6' | 'PropertyEditorTest_MAX';
declare var EPropertyEditorTestEnum : { PropertyEditorTest_Enum1:'PropertyEditorTest_Enum1',PropertyEditorTest_Enum2:'PropertyEditorTest_Enum2',PropertyEditorTest_Enum3:'PropertyEditorTest_Enum3',PropertyEditorTest_Enum4:'PropertyEditorTest_Enum4',PropertyEditorTest_Enum5:'PropertyEditorTest_Enum5',PropertyEditorTest_Enum6:'PropertyEditorTest_Enum6',PropertyEditorTest_MAX:'PropertyEditorTest_MAX', };
declare type EPropertyEditorTestEditColor = 'Red' | 'Orange' | 'Yellow' | 'Green' | 'Blue' | 'Indigo' | 'Violet' | 'Pink' | 'Magenta' | 'Cyan' | 'EPropertyEditorTestEditColor_MAX';
declare var EPropertyEditorTestEditColor : { Red:'Red',Orange:'Orange',Yellow:'Yellow',Green:'Green',Blue:'Blue',Indigo:'Indigo',Violet:'Violet',Pink:'Pink',Magenta:'Magenta',Cyan:'Cyan',EPropertyEditorTestEditColor_MAX:'EPropertyEditorTestEditColor_MAX', };
declare type EPropertyEditorTestUnderscores = '_One' | '_Two' | '_Three' | 'NotUnderscore' | 'EPropertyEditorTestUnderscores_MAX';
declare var EPropertyEditorTestUnderscores : { _One:'_One',_Two:'_Two',_Three:'_Three',NotUnderscore:'NotUnderscore',EPropertyEditorTestUnderscores_MAX:'EPropertyEditorTestUnderscores_MAX', };
declare class PropertyEditorTestSubStruct { 
	FirstProperty: number;
	SecondProperty: number;
	CustomizedStructInsideUncustomizedStruct: LinearColor;
	CustomizedStructInsideUncustomizedStruct2: SoftObjectPath;
	clone() : PropertyEditorTestSubStruct;
	static C(Other: UObject | any): PropertyEditorTestSubStruct;
}

declare class PropertyEditorTestBasicStruct { 
	IntPropertyInsideAStruct: number;
	FloatPropertyInsideAStruct: number;
	ObjectPropertyInsideAStruct: UObject;
	InnerStruct: PropertyEditorTestSubStruct;
	clone() : PropertyEditorTestBasicStruct;
	static C(Other: UObject | any): PropertyEditorTestBasicStruct;
}

declare class PropertyEditorTestInstancedStruct { 
	UObject: PropertyEditorTestInstancedObject;
	clone() : PropertyEditorTestInstancedStruct;
	static C(Other: UObject | any): PropertyEditorTestInstancedStruct;
}

declare class PropertyEditTestTextStruct { 
	NormalProperty: string;
	clone() : PropertyEditTestTextStruct;
	static C(Other: UObject | any): PropertyEditTestTextStruct;
}

declare type ETestEnumFlags = 'None' | 'One' | 'Two' | 'Four' | 'ETestEnumFlags_MAX';
declare var ETestEnumFlags : { None:'None',One:'One',Two:'Two',Four:'Four',ETestEnumFlags_MAX:'ETestEnumFlags_MAX', };
declare class PropertyEditorTestEditCondition { 
	InlineEditCondition: boolean;
	HasInlineEditCondition: number;
	Flags: ETestEnumFlags;
	EnabledAndVisibleWhenOne: number;
	clone() : PropertyEditorTestEditCondition;
	static C(Other: UObject | any): PropertyEditorTestEditCondition;
}

declare class PropertyEditorTestObject extends UObject { 
	Int8Property: any;
	Int16Property: any;
	Int32Property: number;
	Int64Property: any;
	ByteProperty: number;
	UnsignedInt16Property: any;
	UnsignedInt32Property: any;
	UnsignedInt64Property: any;
	FloatProperty: number;
	DoubleProperty: any;
	NameProperty: string;
	BoolProperty: boolean;
	StringProperty: string;
	TextProperty: string;
	IntPointProperty: IntPoint;
	Vector3Property: Vector;
	Vector2Property: Vector2D;
	Vector4Property: Vector4;
	RotatorProperty: Rotator;
	ObjectProperty: UObject;
	LinearColorProperty: LinearColor;
	ColorProperty: Color;
	EnumByteProperty: EPropertyEditorTestEnum;
	EnumProperty: EPropertyEditorTestEditColor;
	EnumUnderscores: EPropertyEditorTestUnderscores;
	MatrixProperty: Matrix;
	TransformProperty: Transform;
	ClassProperty: UnrealEngineClass;
	ClassPropertyWithAllowed: UnrealEngineClass;
	ClassPropertyWithDisallowed: UnrealEngineClass;
	SubclassOfTexture: UnrealEngineClass;
	SubclassOfWithAllowed: UnrealEngineClass;
	SubclassOfWithDisallowed: UnrealEngineClass;
	AssetPointerWithAllowedAndWhitespace: UObject;
	IntProperty32Array: number[];
	BytePropertyArray: number[];
	FloatPropertyArray: number[];
	NamePropertyArray: string[];
	BoolPropertyArray: boolean[];
	StringPropertyArray: string[];
	TextPropertyArray: string[];
	Vector3PropertyArray: Vector[];
	Vector2PropertyArray: Vector2D[];
	Vector4PropertyArray: Vector4[];
	RotatorPropertyArray: Rotator[];
	ObjectPropertyArray: UObject[];
	ActorPropertyArray: Actor[];
	LinearColorPropertyArray: LinearColor[];
	ColorPropertyArray: Color[];
	EnumPropertyArray: EPropertyEditorTestEnum[];
	StructPropertyArray: PropertyEditorTestBasicStruct[];
	StructPropertyArrayWithTitle: PropertyEditorTestBasicStruct[];
	StructPropertyArrayWithFormattedTitle: PropertyEditorTestBasicStruct[];
	StructPropertyArrayWithTitleError: PropertyEditorTestBasicStruct[];
	StructPropertyArrayWithFormattedTitleError: PropertyEditorTestBasicStruct[];
	InstancedStructArray: PropertyEditorTestInstancedStruct[];
	InstancedUObjectArray: PropertyEditorTestInstancedObject[];
	FixedArrayOfInts: number[];
	StaticArrayOfInts: number;
	StaticArrayOfIntsWithEnumLabels: number;
	FloatRange: FloatRange;
	FloatPropertyWithClampedRange: number;
	IntPropertyWithClampedRange: number;
	IntThatCannotBeChanged: number;
	StringThatCannotBeChanged: string;
	ObjectThatCannotBeChanged: PrimitiveComponent;
	EnumBitflags: number;
	StringPasswordProperty: string;
	TextPasswordProperty: string;
	ThisIsBrokenIfItsVisibleInADetailsView: PropertyEditorTestBasicStruct;
	StructWithMultipleInstances1: PropertyEditorTestBasicStruct;
	bEditConditionStructWithMultipleInstances2: boolean;
	StructWithMultipleInstances2: PropertyEditorTestBasicStruct;
	RichCurve: RichCurve;
	AssetReferenceCustomStruct: SoftObjectPath;
	AssetReferenceCustomStructWithThumbnail: SoftObjectPath;
	ExactlyPointLightActorReference: SoftObjectPath;
	LightActorReference: SoftObjectPath;
	ExactPointOrSpotLightActorReference: SoftObjectPath;
	LightOrStaticMeshActorReference: SoftObjectPath;
	NotLightActorReference: SoftObjectPath;
	MaterialOrTextureAssetReference: SoftObjectPath;
	ActorWithMetaClass: SoftObjectPath;
	DisabledByCanEditChange: SoftObjectPath;
	bEditCondition: boolean;
	SimplePropertyWithEditCondition: number;
	bEditConditionAssetReferenceCustomStructWithEditCondition: boolean;
	AssetReferenceCustomStructWithEditCondition: SoftObjectPath;
	ArrayOfStructs: PropertyEditorTestBasicStruct[];
	struct: PropertyEditTestTextStruct;
	EditInlineNewStaticMeshComponent: StaticMeshComponent;
	ArrayOfEditInlineNewSMCs: StaticMeshComponent[];
	TextureProp: Texture;
	StaticMeshProp: StaticMesh;
	AnyMaterialInterface: MaterialInterface;
	MaterialNoThumbnail: MaterialInterface;
	OnlyActorsAllowed: Actor;
	Int32Set: any;
	FloatSet: any;
	StringSet: any;
	ObjectSet: any;
	ActorSet: any;
	EditColorSet: any;
	NameSet: any;
	Int32ToStringMap: any;
	StringToColorMap: any;
	Int32ToStructMap: any;
	StringToFloatMap: any;
	StringToObjectMap: any;
	StringToActorMap: any;
	ObjectToInt32Map: any;
	ObjectToColorMap: any;
	IntToEnumMap: any;
	NameToNameMap: any;
	NameToObjectMap: any;
	NameToCustomMap: any;
	NameToColorMap: any;
	IntToCustomMap: any;
	IntToSubStructMap: any;
	LinearColorSet: any;
	VectorSet: any;
	LinearColorToStringMap: any;
	VectorToFloatMap: any;
	LinearColorToVectorMap: any;
	BlendableInterface: any;
	AnimClassInterface: any;
	LightPropagationVolumeBlendable: any;
	TextureOrBlendableInterface: UObject;
	bSubcategory: boolean;
	bSubcategoryAdvanced: boolean;
	bSubcategoryFooSimple: boolean;
	bSubcategoryFooAdvanced: boolean;
	bSubcategoryBarSimple: boolean;
	bSubcategoryBarAdvanced: boolean;
	bSubcategoryLast: boolean;
	bEnablesNext: boolean;
	bEnabledByPrevious: boolean;
	EnumEditCondition: EPropertyEditorTestEditColor;
	bEnabledWhenBlue: boolean;
	bEnabledWhenPink: boolean;
	EnumAsByteEditCondition: EPropertyEditorTestEnum;
	bEnabledWhenEnumIs2: boolean;
	bEnabledWhenEnumIs4: boolean;
	IntegerEditCondition: number;
	bEnabledWhenIntGreaterOrEqual5: boolean;
	bEnabledWhenIntLessOrEqual10: boolean;
	FloatEditCondition: number;
	bEnabledWhenFloatGreaterThan5: boolean;
	bEnabledWhenFloatLessThan10: boolean;
	bEditConditionForArrays: boolean;
	ArrayWithEditCondition: Texture2D[];
	ArrayOfStructsWithEditCondition: PropertyEditorTestBasicStruct[];
	bEditConditionForFixedArray: boolean;
	FixedArrayWithEditCondition: string;
	EditConditionFlags: any;
	bEnabledWhenFlagsHasTwoOrFour: boolean;
	bDisabledWhenFlagsIsOdd: boolean;
	InlineProperty: EComponentMobility;
	PropertyThatHides: EComponentMobility;
	bVisibleWhenStatic: boolean;
	VisibleWhenStationary: number;
	DateTime: DateTime;
	Timespan: Timespan;
	Guid: Guid;
	PerPlatformFloat: PerPlatformFloat;
	PerPlatformInt: PerPlatformInt;
	bInlineEditConditionWithoutMetaToggle: boolean;
	InlineEditConditionWithoutMeta: number;
	bInlineEditConditionWithMetaToggle: boolean;
	InlineEditConditionWithMeta: number;
	bInlineEditConditionNotEditable: boolean;
	HasNonEditableInlineCondition: number;
	bSharedEditCondition: boolean;
	UsesSharedEditCondition1: number;
	UsesSharedEditCondition2: number;
	StructWithInlineCondition: PropertyEditorTestEditCondition;
	ArrayOfStructsWithInlineCondition: PropertyEditorTestEditCondition[];
	static Load(ResourceName: string): PropertyEditorTestObject;
	static Find(Outer: UObject, ResourceName: string): PropertyEditorTestObject;
	static GetDefaultObject(): PropertyEditorTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyEditorTestObject;
	static C(Other: UObject | any): PropertyEditorTestObject;
}

declare class BlueprintPropertyTestObject extends UObject { 
	ShouldBeHidden: number;
	ShouldBeVisible: number;
	static Load(ResourceName: string): BlueprintPropertyTestObject;
	static Find(Outer: UObject, ResourceName: string): BlueprintPropertyTestObject;
	static GetDefaultObject(): BlueprintPropertyTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPropertyTestObject;
	static C(Other: UObject | any): BlueprintPropertyTestObject;
}

declare class BlueprintPropertyContainerTestObject extends UObject { 
	Array: BlueprintPropertyTestObject[];
	static Load(ResourceName: string): BlueprintPropertyContainerTestObject;
	static Find(Outer: UObject, ResourceName: string): BlueprintPropertyContainerTestObject;
	static GetDefaultObject(): BlueprintPropertyContainerTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPropertyContainerTestObject;
	static C(Other: UObject | any): BlueprintPropertyContainerTestObject;
}

declare class TestSparseClassDataBase extends UObject { 
	static Load(ResourceName: string): TestSparseClassDataBase;
	static Find(Outer: UObject, ResourceName: string): TestSparseClassDataBase;
	static GetDefaultObject(): TestSparseClassDataBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestSparseClassDataBase;
	static C(Other: UObject | any): TestSparseClassDataBase;
}

declare class TestSparseClassData extends TestSparseClassDataBase { 
	static Load(ResourceName: string): TestSparseClassData;
	static Find(Outer: UObject, ResourceName: string): TestSparseClassData;
	static GetDefaultObject(): TestSparseClassData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestSparseClassData;
	static C(Other: UObject | any): TestSparseClassData;
}

declare class PropertyEditorTestActor extends Actor { 
	GetOptionsValue: string;
	static GetDefaultObject(): PropertyEditorTestActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyEditorTestActor;
	GetOptionsFunc(): string[];
	static C(Other: UObject | any): PropertyEditorTestActor;
}

declare class ReimportCurveFactory extends CSVImportFactory { 
	static Load(ResourceName: string): ReimportCurveFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportCurveFactory;
	static GetDefaultObject(): ReimportCurveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportCurveFactory;
	static C(Other: UObject | any): ReimportCurveFactory;
}

declare class ReimportCurveTableFactory extends CSVImportFactory { 
	static Load(ResourceName: string): ReimportCurveTableFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportCurveTableFactory;
	static GetDefaultObject(): ReimportCurveTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportCurveTableFactory;
	static C(Other: UObject | any): ReimportCurveTableFactory;
}

declare class ReimportDataTableFactory extends CSVImportFactory { 
	static Load(ResourceName: string): ReimportDataTableFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportDataTableFactory;
	static GetDefaultObject(): ReimportDataTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportDataTableFactory;
	static C(Other: UObject | any): ReimportDataTableFactory;
}

declare class ReimportFbxAnimSequenceFactory extends FbxFactory { 
	static Load(ResourceName: string): ReimportFbxAnimSequenceFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxAnimSequenceFactory;
	static GetDefaultObject(): ReimportFbxAnimSequenceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxAnimSequenceFactory;
	static C(Other: UObject | any): ReimportFbxAnimSequenceFactory;
}

declare class ReimportFbxSceneFactory extends FbxSceneImportFactory { 
	static Load(ResourceName: string): ReimportFbxSceneFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxSceneFactory;
	static GetDefaultObject(): ReimportFbxSceneFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxSceneFactory;
	ScriptReimportHelper(Obj: UObject): void;
	static C(Other: UObject | any): ReimportFbxSceneFactory;
}

declare class ReimportFbxSkeletalMeshFactory extends FbxFactory { 
	static Load(ResourceName: string): ReimportFbxSkeletalMeshFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxSkeletalMeshFactory;
	static GetDefaultObject(): ReimportFbxSkeletalMeshFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxSkeletalMeshFactory;
	static C(Other: UObject | any): ReimportFbxSkeletalMeshFactory;
}

declare class ReimportFbxStaticMeshFactory extends FbxFactory { 
	static Load(ResourceName: string): ReimportFbxStaticMeshFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportFbxStaticMeshFactory;
	static GetDefaultObject(): ReimportFbxStaticMeshFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportFbxStaticMeshFactory;
	static C(Other: UObject | any): ReimportFbxStaticMeshFactory;
}

declare type ETextureSourceColorSpace = 'Auto' | 'Linear' | 'SRGB' | 'ETextureSourceColorSpace_MAX';
declare var ETextureSourceColorSpace : { Auto:'Auto',Linear:'Linear',SRGB:'SRGB',ETextureSourceColorSpace_MAX:'ETextureSourceColorSpace_MAX', };
declare class TextureFactory extends Factory { 
	NoCompression: boolean;
	NoAlpha: boolean;
	bDeferCompression: boolean;
	CompressionSettings: TextureCompressionSettings;
	bCreateMaterial: boolean;
	bRGBToBaseColor: boolean;
	bRGBToEmissive: boolean;
	bAlphaToRoughness: boolean;
	bAlphaToEmissive: boolean;
	bAlphaToOpacity: boolean;
	bAlphaToOpacityMask: boolean;
	bTwoSided: boolean;
	Blending: EBlendMode;
	ShadingModel: EMaterialShadingModel;
	MipGenSettings: TextureMipGenSettings;
	LODGroup: TextureGroup;
	bDitherMipMapAlpha: boolean;
	bDoScaleMipsForAlphaCoverage: boolean;
	AlphaCoverageThresholds: Vector4;
	bPreserveBorder: boolean;
	bFlipNormalMapGreenChannel: boolean;
	bUsingExistingSettings: boolean;
	bUseHashAsGuid: boolean;
	UdimRegexPattern: string;
	ColorSpaceMode: ETextureSourceColorSpace;
	static Load(ResourceName: string): TextureFactory;
	static Find(Outer: UObject, ResourceName: string): TextureFactory;
	static GetDefaultObject(): TextureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureFactory;
	static C(Other: UObject | any): TextureFactory;
}

declare class ReimportTextureFactory extends TextureFactory { 
	pOriginalTex: Texture;
	static Load(ResourceName: string): ReimportTextureFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportTextureFactory;
	static GetDefaultObject(): ReimportTextureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportTextureFactory;
	static C(Other: UObject | any): ReimportTextureFactory;
}

declare class VectorFieldStaticFactory extends Factory { 
	static Load(ResourceName: string): VectorFieldStaticFactory;
	static Find(Outer: UObject, ResourceName: string): VectorFieldStaticFactory;
	static GetDefaultObject(): VectorFieldStaticFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldStaticFactory;
	static C(Other: UObject | any): VectorFieldStaticFactory;
}

declare class ReimportVectorFieldStaticFactory extends VectorFieldStaticFactory { 
	static Load(ResourceName: string): ReimportVectorFieldStaticFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportVectorFieldStaticFactory;
	static GetDefaultObject(): ReimportVectorFieldStaticFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportVectorFieldStaticFactory;
	static C(Other: UObject | any): ReimportVectorFieldStaticFactory;
}

declare class RenderTargetExporterHDR extends Exporter { 
	static Load(ResourceName: string): RenderTargetExporterHDR;
	static Find(Outer: UObject, ResourceName: string): RenderTargetExporterHDR;
	static GetDefaultObject(): RenderTargetExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RenderTargetExporterHDR;
	static C(Other: UObject | any): RenderTargetExporterHDR;
}

declare class ReplaceActorCommandlet extends Commandlet { 
	static Load(ResourceName: string): ReplaceActorCommandlet;
	static Find(Outer: UObject, ResourceName: string): ReplaceActorCommandlet;
	static GetDefaultObject(): ReplaceActorCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplaceActorCommandlet;
	static C(Other: UObject | any): ReplaceActorCommandlet;
}

declare class ReplaceAssetsCommandlet extends Commandlet { 
	static Load(ResourceName: string): ReplaceAssetsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ReplaceAssetsCommandlet;
	static GetDefaultObject(): ReplaceAssetsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplaceAssetsCommandlet;
	static C(Other: UObject | any): ReplaceAssetsCommandlet;
}

declare class SavePackageUtilitiesCommandlet extends Commandlet { 
	static Load(ResourceName: string): SavePackageUtilitiesCommandlet;
	static Find(Outer: UObject, ResourceName: string): SavePackageUtilitiesCommandlet;
	static GetDefaultObject(): SavePackageUtilitiesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SavePackageUtilitiesCommandlet;
	static C(Other: UObject | any): SavePackageUtilitiesCommandlet;
}

declare class SceneThumbnailInfo extends ThumbnailInfo { 
	OrbitPitch: number;
	OrbitYaw: number;
	OrbitZoom: number;
	static Load(ResourceName: string): SceneThumbnailInfo;
	static Find(Outer: UObject, ResourceName: string): SceneThumbnailInfo;
	static GetDefaultObject(): SceneThumbnailInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneThumbnailInfo;
	static C(Other: UObject | any): SceneThumbnailInfo;
}

declare type EThumbnailPrimType = 'TPT_None' | 'TPT_Sphere' | 'TPT_Cube' | 'TPT_Plane' | 'TPT_Cylinder' | 'TPT_MAX';
declare var EThumbnailPrimType : { TPT_None:'TPT_None',TPT_Sphere:'TPT_Sphere',TPT_Cube:'TPT_Cube',TPT_Plane:'TPT_Plane',TPT_Cylinder:'TPT_Cylinder',TPT_MAX:'TPT_MAX', };
declare class SceneThumbnailInfoWithPrimitive extends SceneThumbnailInfo { 
	PrimitiveType: EThumbnailPrimType;
	PreviewMesh: SoftObjectPath;
	bUserModifiedShape: boolean;
	static Load(ResourceName: string): SceneThumbnailInfoWithPrimitive;
	static Find(Outer: UObject, ResourceName: string): SceneThumbnailInfoWithPrimitive;
	static GetDefaultObject(): SceneThumbnailInfoWithPrimitive;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneThumbnailInfoWithPrimitive;
	static C(Other: UObject | any): SceneThumbnailInfoWithPrimitive;
}

declare class EditorViewportViewMenuContext extends UObject { 
	static Load(ResourceName: string): EditorViewportViewMenuContext;
	static Find(Outer: UObject, ResourceName: string): EditorViewportViewMenuContext;
	static GetDefaultObject(): EditorViewportViewMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorViewportViewMenuContext;
	static C(Other: UObject | any): EditorViewportViewMenuContext;
}

declare class SequenceExporterT3D extends Exporter { 
	static Load(ResourceName: string): SequenceExporterT3D;
	static Find(Outer: UObject, ResourceName: string): SequenceExporterT3D;
	static GetDefaultObject(): SequenceExporterT3D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceExporterT3D;
	static C(Other: UObject | any): SequenceExporterT3D;
}

declare class ShaderCodeLibraryToolsCommandlet extends Commandlet { 
	static Load(ResourceName: string): ShaderCodeLibraryToolsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ShaderCodeLibraryToolsCommandlet;
	static GetDefaultObject(): ShaderCodeLibraryToolsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShaderCodeLibraryToolsCommandlet;
	static C(Other: UObject | any): ShaderCodeLibraryToolsCommandlet;
}

declare class ShaderPipelineCacheToolsCommandlet extends Commandlet { 
	static Load(ResourceName: string): ShaderPipelineCacheToolsCommandlet;
	static Find(Outer: UObject, ResourceName: string): ShaderPipelineCacheToolsCommandlet;
	static GetDefaultObject(): ShaderPipelineCacheToolsCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShaderPipelineCacheToolsCommandlet;
	static C(Other: UObject | any): ShaderPipelineCacheToolsCommandlet;
}

declare type ESheetAxis = 'AX_Horizontal' | 'AX_XAxis' | 'AX_YAxis' | 'AX_MAX';
declare var ESheetAxis : { AX_Horizontal:'AX_Horizontal',AX_XAxis:'AX_XAxis',AX_YAxis:'AX_YAxis',AX_MAX:'AX_MAX', };
declare class SheetBuilder extends EditorBrushBuilder { 
	X: number;
	Y: number;
	XSegments: number;
	YSegments: number;
	Axis: ESheetAxis;
	GroupName: string;
	static Load(ResourceName: string): SheetBuilder;
	static Find(Outer: UObject, ResourceName: string): SheetBuilder;
	static GetDefaultObject(): SheetBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SheetBuilder;
	static C(Other: UObject | any): SheetBuilder;
}

declare class SkeletalMeshEditorSettings extends UObject { 
	AnimPreviewFloorColor: Color;
	AnimPreviewSkyColor: Color;
	AnimPreviewSkyBrightness: number;
	AnimPreviewLightBrightness: number;
	AnimPreviewLightingDirection: Rotator;
	AnimPreviewDirectionalColor: Color;
	static Load(ResourceName: string): SkeletalMeshEditorSettings;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshEditorSettings;
	static GetDefaultObject(): SkeletalMeshEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshEditorSettings;
	static C(Other: UObject | any): SkeletalMeshEditorSettings;
}

declare class SkeletalMeshExporterFBX extends ExporterFBX { 
	static Load(ResourceName: string): SkeletalMeshExporterFBX;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshExporterFBX;
	static GetDefaultObject(): SkeletalMeshExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshExporterFBX;
	static C(Other: UObject | any): SkeletalMeshExporterFBX;
}

declare class SkeletalMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SkeletalMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshThumbnailRenderer;
	static GetDefaultObject(): SkeletalMeshThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshThumbnailRenderer;
	static C(Other: UObject | any): SkeletalMeshThumbnailRenderer;
}

declare class SkeletalMeshToolMenuContext extends UObject { 
	static Load(ResourceName: string): SkeletalMeshToolMenuContext;
	static Find(Outer: UObject, ResourceName: string): SkeletalMeshToolMenuContext;
	static GetDefaultObject(): SkeletalMeshToolMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshToolMenuContext;
	static C(Other: UObject | any): SkeletalMeshToolMenuContext;
}

declare class SkeletonFactory extends Factory { 
	TargetSkeletalMesh: SkeletalMesh;
	static Load(ResourceName: string): SkeletonFactory;
	static Find(Outer: UObject, ResourceName: string): SkeletonFactory;
	static GetDefaultObject(): SkeletonFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletonFactory;
	static C(Other: UObject | any): SkeletonFactory;
}

declare class SkeletonThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SkeletonThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SkeletonThumbnailRenderer;
	static GetDefaultObject(): SkeletonThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletonThumbnailRenderer;
	static C(Other: UObject | any): SkeletonThumbnailRenderer;
}

declare class SlateBrushAssetFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): SlateBrushAssetFactory;
	static Find(Outer: UObject, ResourceName: string): SlateBrushAssetFactory;
	static GetDefaultObject(): SlateBrushAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushAssetFactory;
	static C(Other: UObject | any): SlateBrushAssetFactory;
}

declare class SlateBrushThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SlateBrushThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SlateBrushThumbnailRenderer;
	static GetDefaultObject(): SlateBrushThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushThumbnailRenderer;
	static C(Other: UObject | any): SlateBrushThumbnailRenderer;
}

declare class SlateWidgetStyleAssetFactory extends Factory { 
	StyleType: UnrealEngineClass;
	static Load(ResourceName: string): SlateWidgetStyleAssetFactory;
	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleAssetFactory;
	static GetDefaultObject(): SlateWidgetStyleAssetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleAssetFactory;
	static C(Other: UObject | any): SlateWidgetStyleAssetFactory;
}

declare class SMInstanceElementDetailsInterface extends UObject { 
	static Load(ResourceName: string): SMInstanceElementDetailsInterface;
	static Find(Outer: UObject, ResourceName: string): SMInstanceElementDetailsInterface;
	static GetDefaultObject(): SMInstanceElementDetailsInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SMInstanceElementDetailsInterface;
	static C(Other: UObject | any): SMInstanceElementDetailsInterface;
}

declare class SMInstanceElementDetailsProxyObject extends UObject { 
	Transform: Transform;
	static Load(ResourceName: string): SMInstanceElementDetailsProxyObject;
	static Find(Outer: UObject, ResourceName: string): SMInstanceElementDetailsProxyObject;
	static GetDefaultObject(): SMInstanceElementDetailsProxyObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SMInstanceElementDetailsProxyObject;
	static C(Other: UObject | any): SMInstanceElementDetailsProxyObject;
}

declare class SMInstanceElementSelectionInterface extends UObject { 
	static Load(ResourceName: string): SMInstanceElementSelectionInterface;
	static Find(Outer: UObject, ResourceName: string): SMInstanceElementSelectionInterface;
	static GetDefaultObject(): SMInstanceElementSelectionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SMInstanceElementSelectionInterface;
	static C(Other: UObject | any): SMInstanceElementSelectionInterface;
}

declare class SMInstanceElementEditorSelectionInterface extends SMInstanceElementSelectionInterface { 
	static Load(ResourceName: string): SMInstanceElementEditorSelectionInterface;
	static Find(Outer: UObject, ResourceName: string): SMInstanceElementEditorSelectionInterface;
	static GetDefaultObject(): SMInstanceElementEditorSelectionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SMInstanceElementEditorSelectionInterface;
	static C(Other: UObject | any): SMInstanceElementEditorSelectionInterface;
}

declare class SMInstanceElementWorldInterface extends UObject { 
	static Load(ResourceName: string): SMInstanceElementWorldInterface;
	static Find(Outer: UObject, ResourceName: string): SMInstanceElementWorldInterface;
	static GetDefaultObject(): SMInstanceElementWorldInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SMInstanceElementWorldInterface;
	static C(Other: UObject | any): SMInstanceElementWorldInterface;
}

declare class SMInstanceElementEditorWorldInterface extends SMInstanceElementWorldInterface { 
	static Load(ResourceName: string): SMInstanceElementEditorWorldInterface;
	static Find(Outer: UObject, ResourceName: string): SMInstanceElementEditorWorldInterface;
	static GetDefaultObject(): SMInstanceElementEditorWorldInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SMInstanceElementEditorWorldInterface;
	static C(Other: UObject | any): SMInstanceElementEditorWorldInterface;
}

declare class SoundExporterOGG extends Exporter { 
	static Load(ResourceName: string): SoundExporterOGG;
	static Find(Outer: UObject, ResourceName: string): SoundExporterOGG;
	static GetDefaultObject(): SoundExporterOGG;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundExporterOGG;
	static C(Other: UObject | any): SoundExporterOGG;
}

declare class SoundExporterWAV extends Exporter { 
	static Load(ResourceName: string): SoundExporterWAV;
	static Find(Outer: UObject, ResourceName: string): SoundExporterWAV;
	static GetDefaultObject(): SoundExporterWAV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundExporterWAV;
	static C(Other: UObject | any): SoundExporterWAV;
}

declare class SoundSurroundExporterWAV extends Exporter { 
	static Load(ResourceName: string): SoundSurroundExporterWAV;
	static Find(Outer: UObject, ResourceName: string): SoundSurroundExporterWAV;
	static GetDefaultObject(): SoundSurroundExporterWAV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSurroundExporterWAV;
	static C(Other: UObject | any): SoundSurroundExporterWAV;
}

declare class SoundWaveThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): SoundWaveThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): SoundWaveThumbnailRenderer;
	static GetDefaultObject(): SoundWaveThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundWaveThumbnailRenderer;
	static C(Other: UObject | any): SoundWaveThumbnailRenderer;
}

declare class SpiralStairBuilder extends EditorBrushBuilder { 
	InnerRadius: number;
	StepWidth: number;
	StepHeight: number;
	StepThickness: number;
	NumStepsPer360: number;
	NumSteps: number;
	GroupName: string;
	SlopedCeiling: boolean;
	SlopedFloor: boolean;
	CounterClockwise: boolean;
	static Load(ResourceName: string): SpiralStairBuilder;
	static Find(Outer: UObject, ResourceName: string): SpiralStairBuilder;
	static GetDefaultObject(): SpiralStairBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpiralStairBuilder;
	static C(Other: UObject | any): SpiralStairBuilder;
}

declare class StabilizeLocalizationKeysCommandlet extends Commandlet { 
	static Load(ResourceName: string): StabilizeLocalizationKeysCommandlet;
	static Find(Outer: UObject, ResourceName: string): StabilizeLocalizationKeysCommandlet;
	static GetDefaultObject(): StabilizeLocalizationKeysCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StabilizeLocalizationKeysCommandlet;
	static C(Other: UObject | any): StabilizeLocalizationKeysCommandlet;
}

declare class StaticMeshExporterFBX extends ExporterFBX { 
	static Load(ResourceName: string): StaticMeshExporterFBX;
	static Find(Outer: UObject, ResourceName: string): StaticMeshExporterFBX;
	static GetDefaultObject(): StaticMeshExporterFBX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshExporterFBX;
	static C(Other: UObject | any): StaticMeshExporterFBX;
}

declare class StaticMeshExporterOBJ extends Exporter { 
	static Load(ResourceName: string): StaticMeshExporterOBJ;
	static Find(Outer: UObject, ResourceName: string): StaticMeshExporterOBJ;
	static GetDefaultObject(): StaticMeshExporterOBJ;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshExporterOBJ;
	static C(Other: UObject | any): StaticMeshExporterOBJ;
}

declare class StaticMeshMinLodCommandlet extends Commandlet { 
	static Load(ResourceName: string): StaticMeshMinLodCommandlet;
	static Find(Outer: UObject, ResourceName: string): StaticMeshMinLodCommandlet;
	static GetDefaultObject(): StaticMeshMinLodCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshMinLodCommandlet;
	static C(Other: UObject | any): StaticMeshMinLodCommandlet;
}

declare class StaticMeshThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): StaticMeshThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): StaticMeshThumbnailRenderer;
	static GetDefaultObject(): StaticMeshThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshThumbnailRenderer;
	static C(Other: UObject | any): StaticMeshThumbnailRenderer;
}

declare class StringTableFactory extends Factory { 
	static Load(ResourceName: string): StringTableFactory;
	static Find(Outer: UObject, ResourceName: string): StringTableFactory;
	static GetDefaultObject(): StringTableFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StringTableFactory;
	static C(Other: UObject | any): StringTableFactory;
}

declare class StructureFactory extends Factory { 
	static Load(ResourceName: string): StructureFactory;
	static Find(Outer: UObject, ResourceName: string): StructureFactory;
	static GetDefaultObject(): StructureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructureFactory;
	static C(Other: UObject | any): StructureFactory;
}

declare type EStructViewerDeveloperType = 'SVDT_None' | 'SVDT_CurrentUser' | 'SVDT_All' | 'SVDT_Max';
declare var EStructViewerDeveloperType : { SVDT_None:'SVDT_None',SVDT_CurrentUser:'SVDT_CurrentUser',SVDT_All:'SVDT_All',SVDT_Max:'SVDT_Max', };
declare class StructViewerSettings extends UObject { 
	DisplayInternalStructs: boolean;
	DeveloperFolderType: EStructViewerDeveloperType;
	static Load(ResourceName: string): StructViewerSettings;
	static Find(Outer: UObject, ResourceName: string): StructViewerSettings;
	static GetDefaultObject(): StructViewerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructViewerSettings;
	static C(Other: UObject | any): StructViewerSettings;
}

declare class SubsurfaceProfileFactory extends Factory { 
	static Load(ResourceName: string): SubsurfaceProfileFactory;
	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileFactory;
	static GetDefaultObject(): SubsurfaceProfileFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfileFactory;
	static C(Other: UObject | any): SubsurfaceProfileFactory;
}

declare class SubsurfaceProfileRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): SubsurfaceProfileRenderer;
	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileRenderer;
	static GetDefaultObject(): SubsurfaceProfileRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfileRenderer;
	static C(Other: UObject | any): SubsurfaceProfileRenderer;
}

declare class SubUVAnimationFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): SubUVAnimationFactory;
	static Find(Outer: UObject, ResourceName: string): SubUVAnimationFactory;
	static GetDefaultObject(): SubUVAnimationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubUVAnimationFactory;
	static C(Other: UObject | any): SubUVAnimationFactory;
}

declare class SummarizeTraceCommandlet extends Commandlet { 
	static Load(ResourceName: string): SummarizeTraceCommandlet;
	static Find(Outer: UObject, ResourceName: string): SummarizeTraceCommandlet;
	static GetDefaultObject(): SummarizeTraceCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SummarizeTraceCommandlet;
	static C(Other: UObject | any): SummarizeTraceCommandlet;
}

declare class SwapSoundForDialogueInCuesCommandlet extends Commandlet { 
	static Load(ResourceName: string): SwapSoundForDialogueInCuesCommandlet;
	static Find(Outer: UObject, ResourceName: string): SwapSoundForDialogueInCuesCommandlet;
	static GetDefaultObject(): SwapSoundForDialogueInCuesCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SwapSoundForDialogueInCuesCommandlet;
	static C(Other: UObject | any): SwapSoundForDialogueInCuesCommandlet;
}

declare class TemplateMapMetadata extends UObject { 
	static Load(ResourceName: string): TemplateMapMetadata;
	static Find(Outer: UObject, ResourceName: string): TemplateMapMetadata;
	static GetDefaultObject(): TemplateMapMetadata;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TemplateMapMetadata;
	static C(Other: UObject | any): TemplateMapMetadata;
}

declare class TetrahedronBuilder extends EditorBrushBuilder { 
	Radius: number;
	SphereExtrapolation: number;
	GroupName: string;
	static Load(ResourceName: string): TetrahedronBuilder;
	static Find(Outer: UObject, ResourceName: string): TetrahedronBuilder;
	static GetDefaultObject(): TetrahedronBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TetrahedronBuilder;
	static C(Other: UObject | any): TetrahedronBuilder;
}

declare type ETexAlign = 'TEXALIGN_None' | 'TEXALIGN_Default' | 'TEXALIGN_Box' | 'TEXALIGN_Planar' | 'TEXALIGN_Fit' | 'TEXALIGN_PlanarAuto' | 'TEXALIGN_PlanarWall' | 'TEXALIGN_PlanarFloor' | 'TEXALIGN_MAX';
declare var ETexAlign : { TEXALIGN_None:'TEXALIGN_None',TEXALIGN_Default:'TEXALIGN_Default',TEXALIGN_Box:'TEXALIGN_Box',TEXALIGN_Planar:'TEXALIGN_Planar',TEXALIGN_Fit:'TEXALIGN_Fit',TEXALIGN_PlanarAuto:'TEXALIGN_PlanarAuto',TEXALIGN_PlanarWall:'TEXALIGN_PlanarWall',TEXALIGN_PlanarFloor:'TEXALIGN_PlanarFloor',TEXALIGN_MAX:'TEXALIGN_MAX', };
declare class TexAligner extends UObject { 
	DefTexAlign: ETexAlign;
	TAxis: number;
	UTile: number;
	VTile: number;
	Desc: string;
	static Load(ResourceName: string): TexAligner;
	static Find(Outer: UObject, ResourceName: string): TexAligner;
	static GetDefaultObject(): TexAligner;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAligner;
	static C(Other: UObject | any): TexAligner;
}

declare class TexAlignerBox extends TexAligner { 
	static Load(ResourceName: string): TexAlignerBox;
	static Find(Outer: UObject, ResourceName: string): TexAlignerBox;
	static GetDefaultObject(): TexAlignerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerBox;
	static C(Other: UObject | any): TexAlignerBox;
}

declare class TexAlignerDefault extends TexAligner { 
	static Load(ResourceName: string): TexAlignerDefault;
	static Find(Outer: UObject, ResourceName: string): TexAlignerDefault;
	static GetDefaultObject(): TexAlignerDefault;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerDefault;
	static C(Other: UObject | any): TexAlignerDefault;
}

declare class TexAlignerFit extends TexAligner { 
	static Load(ResourceName: string): TexAlignerFit;
	static Find(Outer: UObject, ResourceName: string): TexAlignerFit;
	static GetDefaultObject(): TexAlignerFit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerFit;
	static C(Other: UObject | any): TexAlignerFit;
}

declare class TexAlignerPlanar extends TexAligner { 
	static Load(ResourceName: string): TexAlignerPlanar;
	static Find(Outer: UObject, ResourceName: string): TexAlignerPlanar;
	static GetDefaultObject(): TexAlignerPlanar;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TexAlignerPlanar;
	static C(Other: UObject | any): TexAlignerPlanar;
}

declare class TextAssetCommandlet extends Commandlet { 
	static Load(ResourceName: string): TextAssetCommandlet;
	static Find(Outer: UObject, ResourceName: string): TextAssetCommandlet;
	static GetDefaultObject(): TextAssetCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextAssetCommandlet;
	static C(Other: UObject | any): TextAssetCommandlet;
}

declare class TextBufferExporterTXT extends Exporter { 
	static Load(ResourceName: string): TextBufferExporterTXT;
	static Find(Outer: UObject, ResourceName: string): TextBufferExporterTXT;
	static GetDefaultObject(): TextBufferExporterTXT;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBufferExporterTXT;
	static C(Other: UObject | any): TextBufferExporterTXT;
}

declare class Texture2DArrayFactory extends Factory { 
	InitialTextures: Texture2D[];
	static Load(ResourceName: string): Texture2DArrayFactory;
	static Find(Outer: UObject, ResourceName: string): Texture2DArrayFactory;
	static GetDefaultObject(): Texture2DArrayFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DArrayFactory;
	static C(Other: UObject | any): Texture2DArrayFactory;
}

declare class Texture2DArrayThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): Texture2DArrayThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): Texture2DArrayThumbnailRenderer;
	static GetDefaultObject(): Texture2DArrayThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DArrayThumbnailRenderer;
	static C(Other: UObject | any): Texture2DArrayThumbnailRenderer;
}

declare class Texture2DFactoryNew extends Factory { 
	Width: number;
	Height: number;
	static Load(ResourceName: string): Texture2DFactoryNew;
	static Find(Outer: UObject, ResourceName: string): Texture2DFactoryNew;
	static GetDefaultObject(): Texture2DFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2DFactoryNew;
	static C(Other: UObject | any): Texture2DFactoryNew;
}

declare class TextureCubeArrayFactory extends Factory { 
	InitialTextures: TextureCube[];
	static Load(ResourceName: string): TextureCubeArrayFactory;
	static Find(Outer: UObject, ResourceName: string): TextureCubeArrayFactory;
	static GetDefaultObject(): TextureCubeArrayFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeArrayFactory;
	static C(Other: UObject | any): TextureCubeArrayFactory;
}

declare class TextureCubeArrayThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): TextureCubeArrayThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): TextureCubeArrayThumbnailRenderer;
	static GetDefaultObject(): TextureCubeArrayThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeArrayThumbnailRenderer;
	static C(Other: UObject | any): TextureCubeArrayThumbnailRenderer;
}

declare class TextureCubeExporterHDR extends Exporter { 
	static Load(ResourceName: string): TextureCubeExporterHDR;
	static Find(Outer: UObject, ResourceName: string): TextureCubeExporterHDR;
	static GetDefaultObject(): TextureCubeExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeExporterHDR;
	static C(Other: UObject | any): TextureCubeExporterHDR;
}

declare class TextureCubeThumbnailRenderer extends TextureThumbnailRenderer { 
	static Load(ResourceName: string): TextureCubeThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): TextureCubeThumbnailRenderer;
	static GetDefaultObject(): TextureCubeThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCubeThumbnailRenderer;
	static C(Other: UObject | any): TextureCubeThumbnailRenderer;
}

declare class TextureExporterBMP extends Exporter { 
	static Load(ResourceName: string): TextureExporterBMP;
	static Find(Outer: UObject, ResourceName: string): TextureExporterBMP;
	static GetDefaultObject(): TextureExporterBMP;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterBMP;
	static C(Other: UObject | any): TextureExporterBMP;
}

declare class VirtualTextureBuilderExporterBMP extends TextureExporterBMP { 
	static Load(ResourceName: string): VirtualTextureBuilderExporterBMP;
	static Find(Outer: UObject, ResourceName: string): VirtualTextureBuilderExporterBMP;
	static GetDefaultObject(): VirtualTextureBuilderExporterBMP;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTextureBuilderExporterBMP;
	static C(Other: UObject | any): VirtualTextureBuilderExporterBMP;
}

declare class TextureExporterHDR extends Exporter { 
	static Load(ResourceName: string): TextureExporterHDR;
	static Find(Outer: UObject, ResourceName: string): TextureExporterHDR;
	static GetDefaultObject(): TextureExporterHDR;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterHDR;
	static C(Other: UObject | any): TextureExporterHDR;
}

declare class TextureExporterPCX extends Exporter { 
	static Load(ResourceName: string): TextureExporterPCX;
	static Find(Outer: UObject, ResourceName: string): TextureExporterPCX;
	static GetDefaultObject(): TextureExporterPCX;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterPCX;
	static C(Other: UObject | any): TextureExporterPCX;
}

declare class TextureExporterTGA extends Exporter { 
	static Load(ResourceName: string): TextureExporterTGA;
	static Find(Outer: UObject, ResourceName: string): TextureExporterTGA;
	static GetDefaultObject(): TextureExporterTGA;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureExporterTGA;
	static C(Other: UObject | any): TextureExporterTGA;
}

declare class TextureRenderTarget2DArrayFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Slices: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTarget2DArrayFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTarget2DArrayFactoryNew;
	static GetDefaultObject(): TextureRenderTarget2DArrayFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTarget2DArrayFactoryNew;
	static C(Other: UObject | any): TextureRenderTarget2DArrayFactoryNew;
}

declare class TextureRenderTargetCubeFactoryNew extends Factory { 
	Width: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetCubeFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetCubeFactoryNew;
	static GetDefaultObject(): TextureRenderTargetCubeFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetCubeFactoryNew;
	static C(Other: UObject | any): TextureRenderTargetCubeFactoryNew;
}

declare class TextureRenderTargetFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetFactoryNew;
	static GetDefaultObject(): TextureRenderTargetFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetFactoryNew;
	static C(Other: UObject | any): TextureRenderTargetFactoryNew;
}

declare class TextureRenderTargetVolumeFactoryNew extends Factory { 
	Width: number;
	Height: number;
	Depth: number;
	Format: number;
	static Load(ResourceName: string): TextureRenderTargetVolumeFactoryNew;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetVolumeFactoryNew;
	static GetDefaultObject(): TextureRenderTargetVolumeFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetVolumeFactoryNew;
	static C(Other: UObject | any): TextureRenderTargetVolumeFactoryNew;
}

declare class SkeletalMeshActor extends Actor { 
	bShouldDoAnimNotifies: boolean;
	bWakeOnLevelStart: boolean;
	SkeletalMeshComponent: SkeletalMeshComponent;
	ReplicatedMesh: SkeletalMesh;
	ReplicatedPhysAsset: PhysicsAsset;
	ReplicatedMaterial0: MaterialInterface;
	ReplicatedMaterial1: MaterialInterface;
	static GetDefaultObject(): SkeletalMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshActor;
	OnRep_ReplicatedPhysAsset(): void;
	OnRep_ReplicatedMesh(): void;
	OnRep_ReplicatedMaterial1(): void;
	OnRep_ReplicatedMaterial0(): void;
	static C(Other: UObject | any): SkeletalMeshActor;
}

declare class AnimationThumbnailSkeletalMeshActor extends SkeletalMeshActor { 
	static GetDefaultObject(): AnimationThumbnailSkeletalMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationThumbnailSkeletalMeshActor;
	static C(Other: UObject | any): AnimationThumbnailSkeletalMeshActor;
}

declare class ThumbnailRenderingInfo { 
	ClassNeedingThumbnailName: string;
	ClassNeedingThumbnail: UnrealEngineClass;
	RendererClassName: string;
	Renderer: ThumbnailRenderer;
	clone() : ThumbnailRenderingInfo;
	static C(Other: UObject | any): ThumbnailRenderingInfo;
}

declare class ThumbnailManager extends UObject { 
	NotSupported: ThumbnailRenderingInfo;
	EditorCube: StaticMesh;
	EditorSphere: StaticMesh;
	EditorCylinder: StaticMesh;
	EditorPlane: StaticMesh;
	EditorSkySphere: StaticMesh;
	FloorPlaneMaterial: Material;
	AmbientCubemap: TextureCube;
	CheckerboardTexture: Texture2D;
	RenderableThumbnailTypes: ThumbnailRenderingInfo[];
	ThumbnailManagerClassName: string;
	static Load(ResourceName: string): ThumbnailManager;
	static Find(Outer: UObject, ResourceName: string): ThumbnailManager;
	static GetDefaultObject(): ThumbnailManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailManager;
	static C(Other: UObject | any): ThumbnailManager;
}

declare class TouchInterfaceFactory extends Factory { 
	static Load(ResourceName: string): TouchInterfaceFactory;
	static Find(Outer: UObject, ResourceName: string): TouchInterfaceFactory;
	static GetDefaultObject(): TouchInterfaceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TouchInterfaceFactory;
	static C(Other: UObject | any): TouchInterfaceFactory;
}

declare class TransBuffer extends Transactor { 
	static Load(ResourceName: string): TransBuffer;
	static Find(Outer: UObject, ResourceName: string): TransBuffer;
	static GetDefaultObject(): TransBuffer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TransBuffer;
	static C(Other: UObject | any): TransBuffer;
}

declare class FontImportOptions extends UObject { 
	Data: FontImportOptionsData;
	static Load(ResourceName: string): FontImportOptions;
	static Find(Outer: UObject, ResourceName: string): FontImportOptions;
	static GetDefaultObject(): FontImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontImportOptions;
	static C(Other: UObject | any): FontImportOptions;
}

declare class TrueTypeFontFactory extends TextureFactory { 
	ImportOptions: FontImportOptions;
	bPropertiesConfigured: boolean;
	bFontSelected: boolean;
	static Load(ResourceName: string): TrueTypeFontFactory;
	static Find(Outer: UObject, ResourceName: string): TrueTypeFontFactory;
	static GetDefaultObject(): TrueTypeFontFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TrueTypeFontFactory;
	static C(Other: UObject | any): TrueTypeFontFactory;
}

declare class EditorCommandCategory { 
	Parent: string;
	Name: string;
	clone() : EditorCommandCategory;
	static C(Other: UObject | any): EditorCommandCategory;
}

declare class EditorCommand { 
	Parent: string;
	CommandName: string;
	ExecCommand: string;
	Description: string;
	clone() : EditorCommand;
	static C(Other: UObject | any): EditorCommand;
}

declare class EditorKeyBinding { 
	bCtrlDown: boolean;
	bAltDown: boolean;
	bShiftDown: boolean;
	Key: Key;
	CommandName: string;
	clone() : EditorKeyBinding;
	static C(Other: UObject | any): EditorKeyBinding;
}

declare class UnrealEdKeyBindings extends UObject { 
	KeyBindings: EditorKeyBinding[];
	static Load(ResourceName: string): UnrealEdKeyBindings;
	static Find(Outer: UObject, ResourceName: string): UnrealEdKeyBindings;
	static GetDefaultObject(): UnrealEdKeyBindings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdKeyBindings;
	static C(Other: UObject | any): UnrealEdKeyBindings;
}

declare class ClassPickerDefaults { 
	ClassName: string;
	AssetClass: string;
	clone() : ClassPickerDefaults;
	static C(Other: UObject | any): ClassPickerDefaults;
}

declare class UnrealEdOptions extends UObject { 
	EditorCategories: EditorCommandCategory[];
	EditorCommands: EditorCommand[];
	EditorKeyBindings: UnrealEdKeyBindings;
	bExpandClassPickerClassList: boolean;
	NewAssetDefaultClasses: ClassPickerDefaults[];
	static Load(ResourceName: string): UnrealEdOptions;
	static Find(Outer: UObject, ResourceName: string): UnrealEdOptions;
	static GetDefaultObject(): UnrealEdOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdOptions;
	static C(Other: UObject | any): UnrealEdOptions;
}

declare type AnimationCompressionFormat = 'ACF_None' | 'ACF_Float96NoW' | 'ACF_Fixed48NoW' | 'ACF_IntervalFixed32NoW' | 'ACF_Fixed32NoW' | 'ACF_Float32NoW' | 'ACF_Identity' | 'ACF_MAX';
declare var AnimationCompressionFormat : { ACF_None:'ACF_None',ACF_Float96NoW:'ACF_Float96NoW',ACF_Fixed48NoW:'ACF_Fixed48NoW',ACF_IntervalFixed32NoW:'ACF_IntervalFixed32NoW',ACF_Fixed32NoW:'ACF_Fixed32NoW',ACF_Float32NoW:'ACF_Float32NoW',ACF_Identity:'ACF_Identity',ACF_MAX:'ACF_MAX', };
declare class AnimCompress extends AnimBoneCompressionCodec { 
	bNeedsSkeleton: boolean;
	TranslationCompressionFormat: AnimationCompressionFormat;
	RotationCompressionFormat: AnimationCompressionFormat;
	ScaleCompressionFormat: AnimationCompressionFormat;
	static Load(ResourceName: string): AnimCompress;
	static Find(Outer: UObject, ResourceName: string): AnimCompress;
	static GetDefaultObject(): AnimCompress;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress;
	static C(Other: UObject | any): AnimCompress;
}

declare class TemplateMapInfo { 
	ThumbnailTexture: Texture2D;
	Thumbnail: SoftObjectPath;
	Map: SoftObjectPath;
	DisplayName: string;
	Category: string;
	clone() : TemplateMapInfo;
	static C(Other: UObject | any): TemplateMapInfo;
}

declare class UnrealEdEngine extends EditorEngine { 
	EditorOptionsInst: UnrealEdOptions;
	AutoReimportManager: AutoReimportManager;
	MaterialCopyPasteBuffer: Material;
	SoundCueCopyPasteBuffer: SoundCue;
	AnimationCompressionAlgorithms: AnimCompress[];
	PackagesToBeFullyLoadedAtStartup: string[];
	CurrentLODParentActor: Actor;
	bNeedWarningForPkgEngineVer: boolean;
	SortedSpriteCategories: string[];
	TemplateMapInfos: TemplateMapInfo[];
	CookServer: CookOnTheFlyServer;
	static Load(ResourceName: string): UnrealEdEngine;
	static Find(Outer: UObject, ResourceName: string): UnrealEdEngine;
	static GetDefaultObject(): UnrealEdEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdEngine;
	static C(Other: UObject | any): UnrealEdEngine;
}

declare class UnrealEditorSubsystem extends EditorSubsystem { 
	static Load(ResourceName: string): UnrealEditorSubsystem;
	static Find(Outer: UObject, ResourceName: string): UnrealEditorSubsystem;
	static GetDefaultObject(): UnrealEditorSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEditorSubsystem;
	SetLevelViewportCameraInfo(CameraLocation: Vector,CameraRotation: Rotator): void;
	GetLevelViewportCameraInfo(CameraLocation?: Vector,CameraRotation?: Rotator): {CameraLocation: Vector, CameraRotation: Rotator, $: boolean};
	GetGameWorld(): World;
	GetEditorWorld(): World;
	static C(Other: UObject | any): UnrealEditorSubsystem;
}

declare class UnrealEdTypes extends UObject { 
	static Load(ResourceName: string): UnrealEdTypes;
	static Find(Outer: UObject, ResourceName: string): UnrealEdTypes;
	static GetDefaultObject(): UnrealEdTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealEdTypes;
	static C(Other: UObject | any): UnrealEdTypes;
}

declare class UnrealPakCommandlet extends Commandlet { 
	static Load(ResourceName: string): UnrealPakCommandlet;
	static Find(Outer: UObject, ResourceName: string): UnrealPakCommandlet;
	static GetDefaultObject(): UnrealPakCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnrealPakCommandlet;
	static C(Other: UObject | any): UnrealPakCommandlet;
}

declare class UpdateGameProjectCommandlet extends Commandlet { 
	static Load(ResourceName: string): UpdateGameProjectCommandlet;
	static Find(Outer: UObject, ResourceName: string): UpdateGameProjectCommandlet;
	static GetDefaultObject(): UpdateGameProjectCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UpdateGameProjectCommandlet;
	static C(Other: UObject | any): UpdateGameProjectCommandlet;
}

declare class StructVariableDescription { 
	VarName: string;
	VarGuid: Guid;
	FriendlyName: string;
	DefaultValue: string;
	Category: string;
	Subcategory: string;
	SubCategoryObject: UObject;
	PinValueType: EdGraphTerminalType;
	ContainerType: EPinContainerType;
	bIsArray: boolean;
	bIsSet: boolean;
	bIsMap: boolean;
	bInvalidMember: boolean;
	bDontEditOnInstance: boolean;
	bEnableSaveGame: boolean;
	bEnableMultiLineText: boolean;
	bEnable3dWidget: boolean;
	CurrentDefaultValue: string;
	Tooltip: string;
	clone() : StructVariableDescription;
	static C(Other: UObject | any): StructVariableDescription;
}

declare class UserDefinedStructEditorData extends UObject { 
	UniqueNameId: any;
	VariablesDescriptions: StructVariableDescription[];
	Tooltip: string;
	static Load(ResourceName: string): UserDefinedStructEditorData;
	static Find(Outer: UObject, ResourceName: string): UserDefinedStructEditorData;
	static GetDefaultObject(): UserDefinedStructEditorData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedStructEditorData;
	static C(Other: UObject | any): UserDefinedStructEditorData;
}

declare class VectorFieldExporter extends Exporter { 
	static Load(ResourceName: string): VectorFieldExporter;
	static Find(Outer: UObject, ResourceName: string): VectorFieldExporter;
	static GetDefaultObject(): VectorFieldExporter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldExporter;
	static C(Other: UObject | any): VectorFieldExporter;
}

declare class VolumeTextureFactory extends Factory { 
	InitialTexture: Texture2D;
	static Load(ResourceName: string): VolumeTextureFactory;
	static Find(Outer: UObject, ResourceName: string): VolumeTextureFactory;
	static GetDefaultObject(): VolumeTextureFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumeTextureFactory;
	static C(Other: UObject | any): VolumeTextureFactory;
}

declare class VolumeTextureThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	MaterialInstance: MaterialInstanceConstant;
	static Load(ResourceName: string): VolumeTextureThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): VolumeTextureThumbnailRenderer;
	static GetDefaultObject(): VolumeTextureThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumeTextureThumbnailRenderer;
	static C(Other: UObject | any): VolumeTextureThumbnailRenderer;
}

declare class VolumetricBuilder extends EditorBrushBuilder { 
	Z: number;
	Radius: number;
	NumSheets: number;
	GroupName: string;
	static Load(ResourceName: string): VolumetricBuilder;
	static Find(Outer: UObject, ResourceName: string): VolumetricBuilder;
	static GetDefaultObject(): VolumetricBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumetricBuilder;
	static C(Other: UObject | any): VolumetricBuilder;
}

declare class WorldFactory extends Factory { 
	static Load(ResourceName: string): WorldFactory;
	static Find(Outer: UObject, ResourceName: string): WorldFactory;
	static GetDefaultObject(): WorldFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldFactory;
	static C(Other: UObject | any): WorldFactory;
}

declare class WorldFolders extends UObject { 
	static Load(ResourceName: string): WorldFolders;
	static Find(Outer: UObject, ResourceName: string): WorldFolders;
	static GetDefaultObject(): WorldFolders;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldFolders;
	static C(Other: UObject | any): WorldFolders;
}

declare class WorldPartitionBuilder extends UObject { 
	static Load(ResourceName: string): WorldPartitionBuilder;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionBuilder;
	static GetDefaultObject(): WorldPartitionBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionBuilder;
	static C(Other: UObject | any): WorldPartitionBuilder;
}

declare class WorldPartitionBuilderCommandlet extends Commandlet { 
	Builders: WorldPartitionBuilder[];
	static Load(ResourceName: string): WorldPartitionBuilderCommandlet;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionBuilderCommandlet;
	static GetDefaultObject(): WorldPartitionBuilderCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionBuilderCommandlet;
	static C(Other: UObject | any): WorldPartitionBuilderCommandlet;
}

declare class WorldPartitionBuildNavigationOptions extends UObject { 
	bVerbose: boolean;
	bCleanPackages: boolean;
	static Load(ResourceName: string): WorldPartitionBuildNavigationOptions;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionBuildNavigationOptions;
	static GetDefaultObject(): WorldPartitionBuildNavigationOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionBuildNavigationOptions;
	static C(Other: UObject | any): WorldPartitionBuildNavigationOptions;
}

declare class HLODLayerActorMapping { 
	ActorClass: Class;
	HLODLayer: string;
	clone() : HLODLayerActorMapping;
	static C(Other: UObject | any): HLODLayerActorMapping;
}

declare class WorldPartitionConvertCommandlet extends Commandlet { 
	EditorHashClass: UnrealEngineClass;
	RuntimeHashClass: UnrealEngineClass;
	ExcludedLevels: string[];
	bConvertActorsNotReferencedByLevelScript: boolean;
	WorldOrigin: Vector;
	WorldExtent: Vector;
	HLODLayerAssetsPath: string;
	DefaultHLODLayerName: string;
	FoliageTypePath: string;
	HLODLayersForActorClasses: HLODLayerActorMapping[];
	HLODLayers: any;
	LandscapeGridSize: any;
	static Load(ResourceName: string): WorldPartitionConvertCommandlet;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionConvertCommandlet;
	static GetDefaultObject(): WorldPartitionConvertCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionConvertCommandlet;
	static C(Other: UObject | any): WorldPartitionConvertCommandlet;
}

declare class WorldPartitionFoliageBuilder extends WorldPartitionBuilder { 
	static Load(ResourceName: string): WorldPartitionFoliageBuilder;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionFoliageBuilder;
	static GetDefaultObject(): WorldPartitionFoliageBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionFoliageBuilder;
	static C(Other: UObject | any): WorldPartitionFoliageBuilder;
}

declare class WorldPartitionHLODsBuilder extends WorldPartitionBuilder { 
	static Load(ResourceName: string): WorldPartitionHLODsBuilder;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionHLODsBuilder;
	static GetDefaultObject(): WorldPartitionHLODsBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionHLODsBuilder;
	static C(Other: UObject | any): WorldPartitionHLODsBuilder;
}

declare class WorldPartitionMiniMapBuilder extends WorldPartitionBuilder { 
	static Load(ResourceName: string): WorldPartitionMiniMapBuilder;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionMiniMapBuilder;
	static GetDefaultObject(): WorldPartitionMiniMapBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionMiniMapBuilder;
	static C(Other: UObject | any): WorldPartitionMiniMapBuilder;
}

declare class WorldPartitionNavigationDataBuilder extends WorldPartitionBuilder { 
	static Load(ResourceName: string): WorldPartitionNavigationDataBuilder;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionNavigationDataBuilder;
	static GetDefaultObject(): WorldPartitionNavigationDataBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionNavigationDataBuilder;
	static C(Other: UObject | any): WorldPartitionNavigationDataBuilder;
}

declare class WorldPartitionRenameDuplicateBuilder extends WorldPartitionBuilder { 
	DuplicatedObjects: any;
	static Load(ResourceName: string): WorldPartitionRenameDuplicateBuilder;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionRenameDuplicateBuilder;
	static GetDefaultObject(): WorldPartitionRenameDuplicateBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionRenameDuplicateBuilder;
	static C(Other: UObject | any): WorldPartitionRenameDuplicateBuilder;
}

declare class WorldPartitionResaveActorsBuilder extends WorldPartitionBuilder { 
	ActorClassName: string;
	bReportOnly: boolean;
	bResaveDirtyActorDescsOnly: boolean;
	bSwitchActorPackagingSchemeToReduced: boolean;
	bEnableActorFolders: boolean;
	static Load(ResourceName: string): WorldPartitionResaveActorsBuilder;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionResaveActorsBuilder;
	static GetDefaultObject(): WorldPartitionResaveActorsBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionResaveActorsBuilder;
	static C(Other: UObject | any): WorldPartitionResaveActorsBuilder;
}

declare type EOrthoThumbnailDirection = 'Top' | 'Bottom' | 'Left' | 'Right' | 'Front' | 'Back' | 'EOrthoThumbnailDirection_MAX';
declare var EOrthoThumbnailDirection : { Top:'Top',Bottom:'Bottom',Left:'Left',Right:'Right',Front:'Front',Back:'Back',EOrthoThumbnailDirection_MAX:'EOrthoThumbnailDirection_MAX', };
declare class WorldThumbnailInfo extends SceneThumbnailInfo { 
	CameraMode: ECameraProjectionMode;
	OrthoDirection: EOrthoThumbnailDirection;
	static Load(ResourceName: string): WorldThumbnailInfo;
	static Find(Outer: UObject, ResourceName: string): WorldThumbnailInfo;
	static GetDefaultObject(): WorldThumbnailInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldThumbnailInfo;
	static C(Other: UObject | any): WorldThumbnailInfo;
}

declare class WorldThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	GlobalOrbitPitchOffset: number;
	GlobalOrbitYawOffset: number;
	bUseUnlitScene: boolean;
	bAllowWorldThumbnails: boolean;
	static Load(ResourceName: string): WorldThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): WorldThumbnailRenderer;
	static GetDefaultObject(): WorldThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldThumbnailRenderer;
	static C(Other: UObject | any): WorldThumbnailRenderer;
}

declare class WrangleContentCommandlet extends Commandlet { 
	static Load(ResourceName: string): WrangleContentCommandlet;
	static Find(Outer: UObject, ResourceName: string): WrangleContentCommandlet;
	static GetDefaultObject(): WrangleContentCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WrangleContentCommandlet;
	static C(Other: UObject | any): WrangleContentCommandlet;
}

declare class DetailsConfig extends EditorConfigBase { 
	Views: any;
	static Load(ResourceName: string): DetailsConfig;
	static Find(Outer: UObject, ResourceName: string): DetailsConfig;
	static GetDefaultObject(): DetailsConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DetailsConfig;
	static C(Other: UObject | any): DetailsConfig;
}

declare type EditConditionTestEnum = 'First' | 'Second' | 'EditConditionTestEnum_MAX';
declare var EditConditionTestEnum : { First:'First',Second:'Second',EditConditionTestEnum_MAX:'EditConditionTestEnum_MAX', };
declare type EditConditionByteEnum = 'First' | 'Second' | 'EditConditionByteEnum_MAX';
declare var EditConditionByteEnum : { First:'First',Second:'Second',EditConditionByteEnum_MAX:'EditConditionByteEnum_MAX', };
declare class EditConditionTestObject extends UObject { 
	BoolProperty: boolean;
	EnumProperty: EditConditionTestEnum;
	ByteEnumProperty: EditConditionByteEnum;
	DoubleProperty: any;
	IntegerProperty: number;
	UintBitfieldProperty: boolean;
	UObjectPtr: UObject;
	SoftClassPtr: Class;
	WeakObjectPtr: any;
	static Load(ResourceName: string): EditConditionTestObject;
	static Find(Outer: UObject, ResourceName: string): EditConditionTestObject;
	static GetDefaultObject(): EditConditionTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditConditionTestObject;
	static C(Other: UObject | any): EditConditionTestObject;
}

declare class MaterialShaderQualitySettings extends UObject { 
	ForwardSettingMap: any;
	static Load(ResourceName: string): MaterialShaderQualitySettings;
	static Find(Outer: UObject, ResourceName: string): MaterialShaderQualitySettings;
	static GetDefaultObject(): MaterialShaderQualitySettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialShaderQualitySettings;
	static C(Other: UObject | any): MaterialShaderQualitySettings;
}

declare type EMobileShadowQuality = 'NoFiltering' | 'PCF_1x1' | 'PCF_3x3' | 'PCF_5x5' | 'EMobileShadowQuality_MAX';
declare var EMobileShadowQuality : { NoFiltering:'NoFiltering',PCF_1x1:'PCF_1x1',PCF_3x3:'PCF_3x3',PCF_5x5:'PCF_5x5',EMobileShadowQuality_MAX:'EMobileShadowQuality_MAX', };
declare class MaterialQualityOverrides { 
	bDiscardQualityDuringCook: boolean;
	bEnableOverride: boolean;
	bForceFullyRough: boolean;
	bForceNonMetal: boolean;
	bForceDisableLMDirectionality: boolean;
	bForceLQReflections: boolean;
	bForceDisablePreintegratedGF: boolean;
	bDisableMaterialNormalCalculation: boolean;
	MobileShadowQuality: EMobileShadowQuality;
	clone() : MaterialQualityOverrides;
	static C(Other: UObject | any): MaterialQualityOverrides;
}

declare class ShaderPlatformQualitySettings extends UObject { 
	QualityOverrides: MaterialQualityOverrides;
	static Load(ResourceName: string): ShaderPlatformQualitySettings;
	static Find(Outer: UObject, ResourceName: string): ShaderPlatformQualitySettings;
	static GetDefaultObject(): ShaderPlatformQualitySettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShaderPlatformQualitySettings;
	static C(Other: UObject | any): ShaderPlatformQualitySettings;
}

declare class ControlPointMeshActor extends Actor { 
	ControlPointMeshComponent: ControlPointMeshComponent;
	static GetDefaultObject(): ControlPointMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlPointMeshActor;
	static C(Other: UObject | any): ControlPointMeshActor;
}

declare class LandscapeSplineInterface extends Interface { 
	static Load(ResourceName: string): LandscapeSplineInterface;
	static Find(Outer: UObject, ResourceName: string): LandscapeSplineInterface;
	static GetDefaultObject(): LandscapeSplineInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineInterface;
	static C(Other: UObject | any): LandscapeSplineInterface;
}

declare class LandscapeGizmoActor extends Actor { 
	Width: number;
	Height: number;
	LengthZ: number;
	MarginZ: number;
	MinRelativeZ: number;
	RelativeScaleZ: number;
	TargetLandscapeInfo: LandscapeInfo;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): LandscapeGizmoActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoActor;
	static C(Other: UObject | any): LandscapeGizmoActor;
}

declare type ELandscapeGizmoType = 'LGT_None' | 'LGT_Height' | 'LGT_Weight' | 'LGT_MAX';
declare var ELandscapeGizmoType : { LGT_None:'LGT_None',LGT_Height:'LGT_Height',LGT_Weight:'LGT_Weight',LGT_MAX:'LGT_MAX', };
declare class LandscapeGizmoActiveActor extends LandscapeGizmoActor { 
	DataType: ELandscapeGizmoType;
	GizmoTexture: Texture2D;
	TextureScale: Vector2D;
	SampledHeight: Vector[];
	SampledNormal: Vector[];
	SampleSizeX: number;
	SampleSizeY: number;
	CachedWidth: number;
	CachedHeight: number;
	CachedScaleXY: number;
	FrustumVerts: Vector;
	GizmoMaterial: Material;
	GizmoDataMaterial: MaterialInstance;
	GizmoMeshMaterial: Material;
	LayerInfos: LandscapeLayerInfoObject[];
	bSnapToLandscapeGrid: boolean;
	UnsnappedRotation: Rotator;
	static GetDefaultObject(): LandscapeGizmoActiveActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoActiveActor;
	static C(Other: UObject | any): LandscapeGizmoActiveActor;
}

declare class LandscapeGizmoRenderComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): LandscapeGizmoRenderComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeGizmoRenderComponent;
	static GetDefaultObject(): LandscapeGizmoRenderComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGizmoRenderComponent;
	static C(Other: UObject | any): LandscapeGizmoRenderComponent;
}

declare type EGrassScaling = 'Uniform' | 'Free' | 'LockXY' | 'EGrassScaling_MAX';
declare var EGrassScaling : { Uniform:'Uniform',Free:'Free',LockXY:'LockXY',EGrassScaling_MAX:'EGrassScaling_MAX', };
declare class GrassVariety { 
	GrassMesh: StaticMesh;
	OverrideMaterials: MaterialInterface[];
	GrassDensity: PerPlatformFloat;
	bUseGrid: boolean;
	PlacementJitter: number;
	StartCullDistance: PerPlatformInt;
	EndCullDistance: PerPlatformInt;
	MinLOD: number;
	Scaling: EGrassScaling;
	ScaleX: FloatInterval;
	ScaleY: FloatInterval;
	ScaleZ: FloatInterval;
	RandomRotation: boolean;
	AlignToSurface: boolean;
	bUseLandscapeLightmap: boolean;
	LightingChannels: LightingChannels;
	bReceivesDecals: boolean;
	bCastDynamicShadow: boolean;
	bKeepInstanceBufferCPUCopy: boolean;
	clone() : GrassVariety;
	static C(Other: UObject | any): GrassVariety;
}

declare class LandscapeGrassType extends UObject { 
	GrassVarieties: GrassVariety[];
	bEnableDensityScaling: boolean;
	GrassMesh: StaticMesh;
	GrassDensity: number;
	PlacementJitter: number;
	StartCullDistance: number;
	EndCullDistance: number;
	RandomRotation: boolean;
	AlignToSurface: boolean;
	static Load(ResourceName: string): LandscapeGrassType;
	static Find(Outer: UObject, ResourceName: string): LandscapeGrassType;
	static GetDefaultObject(): LandscapeGrassType;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeGrassType;
	static C(Other: UObject | any): LandscapeGrassType;
}

declare class LandscapeHLODBuilder extends HLODBuilder { 
	static Load(ResourceName: string): LandscapeHLODBuilder;
	static Find(Outer: UObject, ResourceName: string): LandscapeHLODBuilder;
	static GetDefaultObject(): LandscapeHLODBuilder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeHLODBuilder;
	static C(Other: UObject | any): LandscapeHLODBuilder;
}

declare class LandscapeInfoMap extends UObject { 
	static Load(ResourceName: string): LandscapeInfoMap;
	static Find(Outer: UObject, ResourceName: string): LandscapeInfoMap;
	static GetDefaultObject(): LandscapeInfoMap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeInfoMap;
	static C(Other: UObject | any): LandscapeInfoMap;
}

declare class LandscapeMaterialTextureStreamingInfo { 
	TextureName: string;
	TexelFactor: number;
	clone() : LandscapeMaterialTextureStreamingInfo;
	static C(Other: UObject | any): LandscapeMaterialTextureStreamingInfo;
}

declare class LandscapeMaterialInstanceConstant extends MaterialInstanceConstant { 
	TextureStreamingInfo: LandscapeMaterialTextureStreamingInfo[];
	bIsLayerThumbnail: boolean;
	bDisableTessellation: boolean;
	bMobile: boolean;
	bEditorToolUsage: boolean;
	static Load(ResourceName: string): LandscapeMaterialInstanceConstant;
	static Find(Outer: UObject, ResourceName: string): LandscapeMaterialInstanceConstant;
	static GetDefaultObject(): LandscapeMaterialInstanceConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMaterialInstanceConstant;
	static C(Other: UObject | any): LandscapeMaterialInstanceConstant;
}

declare class LandscapeMeshCollisionComponent extends LandscapeHeightfieldCollisionComponent { 
	MeshGuid: Guid;
	static Load(ResourceName: string): LandscapeMeshCollisionComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeMeshCollisionComponent;
	static GetDefaultObject(): LandscapeMeshCollisionComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshCollisionComponent;
	static C(Other: UObject | any): LandscapeMeshCollisionComponent;
}

declare class LandscapeMeshProxyComponent extends StaticMeshComponent { 
	LandscapeGuid: Guid;
	ProxyComponentBases: IntPoint[];
	ProxyLOD: any;
	static Load(ResourceName: string): LandscapeMeshProxyComponent;
	static Find(Outer: UObject, ResourceName: string): LandscapeMeshProxyComponent;
	static GetDefaultObject(): LandscapeMeshProxyComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshProxyComponent;
	static C(Other: UObject | any): LandscapeMeshProxyComponent;
}

declare class LandscapeMeshProxyActor extends Actor { 
	LandscapeMeshProxyComponent: LandscapeMeshProxyComponent;
	static GetDefaultObject(): LandscapeMeshProxyActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeMeshProxyActor;
	static C(Other: UObject | any): LandscapeMeshProxyActor;
}

declare class LandscapeSettings extends DeveloperSettings { 
	MaxNumberOfLayers: number;
	static Load(ResourceName: string): LandscapeSettings;
	static Find(Outer: UObject, ResourceName: string): LandscapeSettings;
	static GetDefaultObject(): LandscapeSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSettings;
	static C(Other: UObject | any): LandscapeSettings;
}

declare class LandscapeSplineActor extends Actor { 
	LandscapeGuid: Guid;
	static GetDefaultObject(): LandscapeSplineActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSplineActor;
	static C(Other: UObject | any): LandscapeSplineActor;
}

declare class LandscapeSubsystem extends TickableWorldSubsystem { 
	static Load(ResourceName: string): LandscapeSubsystem;
	static Find(Outer: UObject, ResourceName: string): LandscapeSubsystem;
	static GetDefaultObject(): LandscapeSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSubsystem;
	static C(Other: UObject | any): LandscapeSubsystem;
}

declare class MaterialExpressionCustomOutput extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionCustomOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionCustomOutput;
	static GetDefaultObject(): MaterialExpressionCustomOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionCustomOutput;
	static C(Other: UObject | any): MaterialExpressionCustomOutput;
}

declare class GrassInput { 
	Name: string;
	GrassType: LandscapeGrassType;
	Input: ExpressionInput;
	clone() : GrassInput;
	static C(Other: UObject | any): GrassInput;
}

declare class MaterialExpressionLandscapeGrassOutput extends MaterialExpressionCustomOutput { 
	GrassTypes: GrassInput[];
	static Load(ResourceName: string): MaterialExpressionLandscapeGrassOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeGrassOutput;
	static GetDefaultObject(): MaterialExpressionLandscapeGrassOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeGrassOutput;
	static C(Other: UObject | any): MaterialExpressionLandscapeGrassOutput;
}

declare type ELandscapeLayerBlendType = 'LB_WeightBlend' | 'LB_AlphaBlend' | 'LB_HeightBlend' | 'LB_MAX';
declare var ELandscapeLayerBlendType : { LB_WeightBlend:'LB_WeightBlend',LB_AlphaBlend:'LB_AlphaBlend',LB_HeightBlend:'LB_HeightBlend',LB_MAX:'LB_MAX', };
declare class LayerBlendInput { 
	LayerName: string;
	BlendType: ELandscapeLayerBlendType;
	LayerInput: ExpressionInput;
	HeightInput: ExpressionInput;
	PreviewWeight: number;
	ConstLayerInput: Vector;
	ConstHeightInput: number;
	clone() : LayerBlendInput;
	static C(Other: UObject | any): LayerBlendInput;
}

declare class MaterialExpressionLandscapeLayerBlend extends MaterialExpression { 
	Layers: LayerBlendInput[];
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerBlend;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerBlend;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerBlend;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerBlend;
	static C(Other: UObject | any): MaterialExpressionLandscapeLayerBlend;
}

declare type ETerrainCoordMappingType = 'TCMT_Auto' | 'TCMT_XY' | 'TCMT_XZ' | 'TCMT_YZ' | 'TCMT_MAX';
declare var ETerrainCoordMappingType : { TCMT_Auto:'TCMT_Auto',TCMT_XY:'TCMT_XY',TCMT_XZ:'TCMT_XZ',TCMT_YZ:'TCMT_YZ',TCMT_MAX:'TCMT_MAX', };
declare type ELandscapeCustomizedCoordType = 'LCCT_None' | 'LCCT_CustomUV0' | 'LCCT_CustomUV1' | 'LCCT_CustomUV2' | 'LCCT_WeightMapUV' | 'LCCT_MAX';
declare var ELandscapeCustomizedCoordType : { LCCT_None:'LCCT_None',LCCT_CustomUV0:'LCCT_CustomUV0',LCCT_CustomUV1:'LCCT_CustomUV1',LCCT_CustomUV2:'LCCT_CustomUV2',LCCT_WeightMapUV:'LCCT_WeightMapUV',LCCT_MAX:'LCCT_MAX', };
declare class MaterialExpressionLandscapeLayerCoords extends MaterialExpression { 
	MappingType: ETerrainCoordMappingType;
	CustomUVType: ELandscapeCustomizedCoordType;
	MappingScale: number;
	MappingRotation: number;
	MappingPanU: number;
	MappingPanV: number;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerCoords;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerCoords;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerCoords;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerCoords;
	static C(Other: UObject | any): MaterialExpressionLandscapeLayerCoords;
}

declare class MaterialExpressionLandscapeLayerSample extends MaterialExpression { 
	ParameterName: string;
	PreviewWeight: number;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerSample;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerSample;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerSample;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerSample;
	static C(Other: UObject | any): MaterialExpressionLandscapeLayerSample;
}

declare class MaterialExpressionLandscapeLayerSwitch extends MaterialExpression { 
	LayerUsed: ExpressionInput;
	LayerNotUsed: ExpressionInput;
	ParameterName: string;
	PreviewUsed: boolean;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerSwitch;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerSwitch;
	static C(Other: UObject | any): MaterialExpressionLandscapeLayerSwitch;
}

declare class MaterialExpressionLandscapeLayerWeight extends MaterialExpression { 
	Base: ExpressionInput;
	Layer: ExpressionInput;
	ParameterName: string;
	PreviewWeight: number;
	ConstBase: Vector;
	static Load(ResourceName: string): MaterialExpressionLandscapeLayerWeight;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeLayerWeight;
	static GetDefaultObject(): MaterialExpressionLandscapeLayerWeight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeLayerWeight;
	static C(Other: UObject | any): MaterialExpressionLandscapeLayerWeight;
}

declare class PhysicalMaterialInput { 
	PhysicalMaterial: PhysicalMaterial;
	Input: ExpressionInput;
	clone() : PhysicalMaterialInput;
	static C(Other: UObject | any): PhysicalMaterialInput;
}

declare class MaterialExpressionLandscapePhysicalMaterialOutput extends MaterialExpressionCustomOutput { 
	Inputs: PhysicalMaterialInput[];
	static Load(ResourceName: string): MaterialExpressionLandscapePhysicalMaterialOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapePhysicalMaterialOutput;
	static GetDefaultObject(): MaterialExpressionLandscapePhysicalMaterialOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapePhysicalMaterialOutput;
	static C(Other: UObject | any): MaterialExpressionLandscapePhysicalMaterialOutput;
}

declare class MaterialExpressionLandscapeVisibilityMask extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionLandscapeVisibilityMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionLandscapeVisibilityMask;
	static GetDefaultObject(): MaterialExpressionLandscapeVisibilityMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionLandscapeVisibilityMask;
	static C(Other: UObject | any): MaterialExpressionLandscapeVisibilityMask;
}

declare class LogVisualizerSessionSettings extends UObject { 
	bEnableGraphsVisualization: boolean;
	static Load(ResourceName: string): LogVisualizerSessionSettings;
	static Find(Outer: UObject, ResourceName: string): LogVisualizerSessionSettings;
	static GetDefaultObject(): LogVisualizerSessionSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LogVisualizerSessionSettings;
	static C(Other: UObject | any): LogVisualizerSessionSettings;
}

declare class CategoryFilter { 
	CategoryName: string;
	LogVerbosity: number;
	Enabled: boolean;
	clone() : CategoryFilter;
	static C(Other: UObject | any): CategoryFilter;
}

declare class VisualLoggerFiltersData { 
	SearchBoxFilter: string;
	ObjectNameFilter: string;
	Categories: CategoryFilter[];
	SelectedClasses: string[];
	clone() : VisualLoggerFiltersData;
	static C(Other: UObject | any): VisualLoggerFiltersData;
}

declare class LogVisualizerSettings extends UObject { 
	bIgnoreTrivialLogs: boolean;
	TrivialLogsThreshold: number;
	bStickToRecentData: boolean;
	bResetDataWithNewSession: boolean;
	bShowHistogramLabelsOutside: boolean;
	DefaultCameraDistance: number;
	bSearchInsideLogs: boolean;
	bUseFilterVolumes: boolean;
	GraphsBackgroundColor: Color;
	bPersistentFilters: boolean;
	bDrawExtremesOnGraphs: boolean;
	bConstrainGraphToLocalMinMax: boolean;
	bUsePlayersOnlyForPause: boolean;
	bLogNavOctreeOnStop: boolean;
	bForceUniqueLogNames: boolean;
	PersistentFilters: VisualLoggerFiltersData;
	DebugMeshMaterialFakeLight: Material;
	DebugMeshMaterialFakeLightName: string;
	static Load(ResourceName: string): LogVisualizerSettings;
	static Find(Outer: UObject, ResourceName: string): LogVisualizerSettings;
	static GetDefaultObject(): LogVisualizerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LogVisualizerSettings;
	static C(Other: UObject | any): LogVisualizerSettings;
}

declare class VisualLoggerCameraController extends DebugCameraController { 
	PickedActor: Actor;
	static GetDefaultObject(): VisualLoggerCameraController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerCameraController;
	static C(Other: UObject | any): VisualLoggerCameraController;
}

declare class DebugCameraHUD extends HUD { 
	static GetDefaultObject(): DebugCameraHUD;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugCameraHUD;
	static C(Other: UObject | any): DebugCameraHUD;
}

declare class VisualLoggerHUD extends DebugCameraHUD { 
	static GetDefaultObject(): VisualLoggerHUD;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerHUD;
	static C(Other: UObject | any): VisualLoggerHUD;
}

declare class VisualLoggerRenderingActorBase extends Actor { 
	static GetDefaultObject(): VisualLoggerRenderingActorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerRenderingActorBase;
	static C(Other: UObject | any): VisualLoggerRenderingActorBase;
}

declare class VisualLoggerRenderingActor extends VisualLoggerRenderingActorBase { 
	static GetDefaultObject(): VisualLoggerRenderingActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerRenderingActor;
	static C(Other: UObject | any): VisualLoggerRenderingActor;
}

declare class VisualLoggerRenderingComponent extends DebugDrawComponent { 
	static Load(ResourceName: string): VisualLoggerRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerRenderingComponent;
	static GetDefaultObject(): VisualLoggerRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerRenderingComponent;
	static C(Other: UObject | any): VisualLoggerRenderingComponent;
}

declare class HandlerComponentFactory extends UObject { 
	static Load(ResourceName: string): HandlerComponentFactory;
	static Find(Outer: UObject, ResourceName: string): HandlerComponentFactory;
	static GetDefaultObject(): HandlerComponentFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HandlerComponentFactory;
	static C(Other: UObject | any): HandlerComponentFactory;
}

declare class PacketHandlerProfileConfig extends UObject { 
	Components: string[];
	static Load(ResourceName: string): PacketHandlerProfileConfig;
	static Find(Outer: UObject, ResourceName: string): PacketHandlerProfileConfig;
	static GetDefaultObject(): PacketHandlerProfileConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PacketHandlerProfileConfig;
	static C(Other: UObject | any): PacketHandlerProfileConfig;
}

declare class ActiveSoundUpdateInterface extends Interface { 
	static Load(ResourceName: string): ActiveSoundUpdateInterface;
	static Find(Outer: UObject, ResourceName: string): ActiveSoundUpdateInterface;
	static GetDefaultObject(): ActiveSoundUpdateInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActiveSoundUpdateInterface;
	static C(Other: UObject | any): ActiveSoundUpdateInterface;
}

declare class ActorChannel extends Channel { 
	Actor: Actor;
	CreateSubObjects: UObject[];
	static Load(ResourceName: string): ActorChannel;
	static Find(Outer: UObject, ResourceName: string): ActorChannel;
	static GetDefaultObject(): ActorChannel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorChannel;
	static C(Other: UObject | any): ActorChannel;
}

declare class ActorElementCounterInterface extends UObject { 
	static Load(ResourceName: string): ActorElementCounterInterface;
	static Find(Outer: UObject, ResourceName: string): ActorElementCounterInterface;
	static GetDefaultObject(): ActorElementCounterInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorElementCounterInterface;
	static C(Other: UObject | any): ActorElementCounterInterface;
}

declare class ActorElementHierarchyInterface extends UObject { 
	static Load(ResourceName: string): ActorElementHierarchyInterface;
	static Find(Outer: UObject, ResourceName: string): ActorElementHierarchyInterface;
	static GetDefaultObject(): ActorElementHierarchyInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorElementHierarchyInterface;
	static C(Other: UObject | any): ActorElementHierarchyInterface;
}

declare class ActorElementObjectInterface extends UObject { 
	static Load(ResourceName: string): ActorElementObjectInterface;
	static Find(Outer: UObject, ResourceName: string): ActorElementObjectInterface;
	static GetDefaultObject(): ActorElementObjectInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorElementObjectInterface;
	static C(Other: UObject | any): ActorElementObjectInterface;
}

declare class ActorPartitionSubsystem extends WorldSubsystem { 
	static Load(ResourceName: string): ActorPartitionSubsystem;
	static Find(Outer: UObject, ResourceName: string): ActorPartitionSubsystem;
	static GetDefaultObject(): ActorPartitionSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorPartitionSubsystem;
	static C(Other: UObject | any): ActorPartitionSubsystem;
}

declare class ActorSoundParameterInterface extends Interface { 
	static Load(ResourceName: string): ActorSoundParameterInterface;
	static Find(Outer: UObject, ResourceName: string): ActorSoundParameterInterface;
	static GetDefaultObject(): ActorSoundParameterInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorSoundParameterInterface;
	GetActorSoundParams(Params?: AudioParameter[]): {Params: AudioParameter[]};
	static C(Other: UObject | any): ActorSoundParameterInterface;
}

declare class StreamableTexture { 
	Name: string;
	Guid: Guid;
	clone() : StreamableTexture;
	static C(Other: UObject | any): StreamableTexture;
}

declare class ActorTextureStreamingBuildDataComponent extends ActorComponent { 
	StreamableTextures: StreamableTexture[];
	PackedTextureStreamingQualityLevelFeatureLevel: any;
	static Load(ResourceName: string): ActorTextureStreamingBuildDataComponent;
	static Find(Outer: UObject, ResourceName: string): ActorTextureStreamingBuildDataComponent;
	static GetDefaultObject(): ActorTextureStreamingBuildDataComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorTextureStreamingBuildDataComponent;
	static C(Other: UObject | any): ActorTextureStreamingBuildDataComponent;
}

declare class AimOffsetBlendSpace extends BlendSpace { 
	static Load(ResourceName: string): AimOffsetBlendSpace;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpace;
	static GetDefaultObject(): AimOffsetBlendSpace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpace;
	static C(Other: UObject | any): AimOffsetBlendSpace;
}

declare class BlendSpace1D extends BlendSpace { 
	bDisplayEditorVertically: boolean;
	bScaleAnimation: boolean;
	static Load(ResourceName: string): BlendSpace1D;
	static Find(Outer: UObject, ResourceName: string): BlendSpace1D;
	static GetDefaultObject(): BlendSpace1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendSpace1D;
	static C(Other: UObject | any): BlendSpace1D;
}

declare class AimOffsetBlendSpace1D extends BlendSpace1D { 
	static Load(ResourceName: string): AimOffsetBlendSpace1D;
	static Find(Outer: UObject, ResourceName: string): AimOffsetBlendSpace1D;
	static GetDefaultObject(): AimOffsetBlendSpace1D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AimOffsetBlendSpace1D;
	static C(Other: UObject | any): AimOffsetBlendSpace1D;
}

declare class AmbientSound extends Actor { 
	AudioComponent: AudioComponent;
	static GetDefaultObject(): AmbientSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AmbientSound;
	Stop(): void;
	Play(StartTime: number): void;
	FadeOut(FadeOutDuration: number,FadeVolumeLevel: number): void;
	FadeIn(FadeInDuration: number,FadeVolumeLevel: number): void;
	AdjustVolume(AdjustVolumeDuration: number,AdjustVolumeLevel: number): void;
	static C(Other: UObject | any): AmbientSound;
}

declare class AnimationAssetExtensions extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AnimationAssetExtensions;
	static Find(Outer: UObject, ResourceName: string): AnimationAssetExtensions;
	static GetDefaultObject(): AnimationAssetExtensions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationAssetExtensions;
	static GetSkeleton(InAsset: AnimationAsset): Skeleton;
	static C(Other: UObject | any): AnimationAssetExtensions;
}

declare class TimecodeCustomAttributeNameSettings { 
	HourAttributeName: string;
	MinuteAttributeName: string;
	SecondAttributeName: string;
	FrameAttributeName: string;
	SubframeAttributeName: string;
	RateAttributeName: string;
	TakenameAttributeName: string;
	clone() : TimecodeCustomAttributeNameSettings;
	static C(Other: UObject | any): TimecodeCustomAttributeNameSettings;
}

declare class CustomAttributeSetting { 
	Name: string;
	Meaning: string;
	clone() : CustomAttributeSetting;
	static C(Other: UObject | any): CustomAttributeSetting;
}

declare type ECustomAttributeBlendType = 'Override' | 'Blend' | 'ECustomAttributeBlendType_MAX';
declare var ECustomAttributeBlendType : { Override:'Override',Blend:'Blend',ECustomAttributeBlendType_MAX:'ECustomAttributeBlendType_MAX', };
declare class AnimationSettings extends DeveloperSettings { 
	CompressCommandletVersion: number;
	KeyEndEffectorsMatchNameArray: string[];
	ForceRecompression: boolean;
	bForceBelowThreshold: boolean;
	bFirstRecompressUsingCurrentOrDefault: boolean;
	bRaiseMaxErrorToExisting: boolean;
	bEnablePerformanceLog: boolean;
	bStripAnimationDataOnDedicatedServer: boolean;
	bTickAnimationOnSkeletalMeshInit: boolean;
	BoneTimecodeCustomAttributeNameSettings: TimecodeCustomAttributeNameSettings;
	BoneCustomAttributesNames: CustomAttributeSetting[];
	BoneNamesWithCustomAttributes: string[];
	AttributeBlendModes: any;
	DefaultAttributeBlendMode: ECustomAttributeBlendType;
	TransformAttributeNames: string[];
	MirrorFindReplaceExpressions: MirrorFindReplaceExpression[];
	static Load(ResourceName: string): AnimationSettings;
	static Find(Outer: UObject, ResourceName: string): AnimationSettings;
	static GetDefaultObject(): AnimationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationSettings;
	GetBoneCustomAttributeNamesToImport(): string[];
	static C(Other: UObject | any): AnimationSettings;
}

declare class AnimBlueprintClassSubsystem_PropertyAccess extends UObject { 
	static Load(ResourceName: string): AnimBlueprintClassSubsystem_PropertyAccess;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintClassSubsystem_PropertyAccess;
	static GetDefaultObject(): AnimBlueprintClassSubsystem_PropertyAccess;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintClassSubsystem_PropertyAccess;
	static C(Other: UObject | any): AnimBlueprintClassSubsystem_PropertyAccess;
}

declare class AnimBlueprintGeneratedStruct extends ScriptStruct { 
	static Load(ResourceName: string): AnimBlueprintGeneratedStruct;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintGeneratedStruct;
	static GetDefaultObject(): AnimBlueprintGeneratedStruct;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintGeneratedStruct;
	static C(Other: UObject | any): AnimBlueprintGeneratedStruct;
}

declare class BakedStateExitTransition { 
	CanTakeDelegateIndex: number;
	CustomResultNodeIndex: number;
	TransitionIndex: number;
	bDesiredTransitionReturnValue: boolean;
	bAutomaticRemainingTimeRule: boolean;
	SyncGroupNameToRequireValidMarkersRule: string;
	PoseEvaluatorLinks: number[];
	clone() : BakedStateExitTransition;
	static C(Other: UObject | any): BakedStateExitTransition;
}

declare class BakedAnimationState { 
	StateName: string;
	Transitions: BakedStateExitTransition[];
	StateRootNodeIndex: number;
	StartNotify: number;
	EndNotify: number;
	FullyBlendedNotify: number;
	bIsAConduit: boolean;
	EntryRuleNodeIndex: number;
	PlayerNodeIndices: number[];
	LayerNodeIndices: number[];
	bAlwaysResetOnEntry: boolean;
	clone() : BakedAnimationState;
	static C(Other: UObject | any): BakedAnimationState;
}

declare class AnimationStateBase { 
	StateName: string;
	clone() : AnimationStateBase;
	static C(Other: UObject | any): AnimationStateBase;
}

declare class AnimationTransitionBetweenStates extends AnimationStateBase { 
	PreviousState: number;
	NextState: number;
	CrossfadeDuration: number;
	StartNotify: number;
	EndNotify: number;
	InterruptNotify: number;
	BlendMode: EAlphaBlendOption;
	CustomCurve: CurveFloat;
	BlendProfile: BlendProfile;
	LogicType: ETransitionLogicType;
	clone() : AnimationTransitionBetweenStates;
	static C(Other: UObject | any): AnimationTransitionBetweenStates;
}

declare class BakedAnimationStateMachine { 
	MachineName: string;
	InitialState: number;
	States: BakedAnimationState[];
	Transitions: AnimationTransitionBetweenStates[];
	clone() : BakedAnimationStateMachine;
	static C(Other: UObject | any): BakedAnimationStateMachine;
}

declare type EAnimNodeDataFlags = 'None' | 'HasInitialUpdateFunction' | 'HasBecomeRelevantFunction' | 'HasUpdateFunction' | 'EAnimNodeDataFlags_MAX';
declare var EAnimNodeDataFlags : { None:'None',HasInitialUpdateFunction:'HasInitialUpdateFunction',HasBecomeRelevantFunction:'HasBecomeRelevantFunction',HasUpdateFunction:'HasUpdateFunction',EAnimNodeDataFlags_MAX:'EAnimNodeDataFlags_MAX', };
declare class AnimNodeData { 
	AnimClassInterface: any;
	Entries: any[];
	NodeIndex: number;
	Flags: EAnimNodeDataFlags;
	clone() : AnimNodeData;
	static C(Other: UObject | any): AnimNodeData;
}

declare class AnimBlueprintGeneratedClass extends BlueprintGeneratedClass { 
	BakedStateMachines: BakedAnimationStateMachine[];
	TargetSkeleton: Skeleton;
	AnimNotifies: AnimNotifyEvent[];
	OrderedSavedPoseIndicesMap: any;
	SyncGroupNames: string[];
	EvaluateGraphExposedInputs: ExposedValueHandler[];
	GraphAssetPlayerInformation: any;
	GraphBlendOptions: any;
	AnimNodeData: AnimNodeData[];
	NodeTypeMap: any;
	static Load(ResourceName: string): AnimBlueprintGeneratedClass;
	static Find(Outer: UObject, ResourceName: string): AnimBlueprintGeneratedClass;
	static GetDefaultObject(): AnimBlueprintGeneratedClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprintGeneratedClass;
	static C(Other: UObject | any): AnimBlueprintGeneratedClass;
}

declare class AnimBlueprintFunction { 
	Name: string;
	Group: string;
	OutputPoseNodeIndex: number;
	InputPoseNames: string[];
	InputPoseNodeIndices: number[];
	bImplemented: boolean;
	clone() : AnimBlueprintFunction;
	static C(Other: UObject | any): AnimBlueprintFunction;
}

declare class AnimBlueprintFunctionData { 
	OutputPoseNodeProperty: any;
	InputPoseNodeProperties: any[];
	InputProperties: any[];
	clone() : AnimBlueprintFunctionData;
	static C(Other: UObject | any): AnimBlueprintFunctionData;
}

declare class AnimClassData extends UObject { 
	BakedStateMachines: BakedAnimationStateMachine[];
	TargetSkeleton: Skeleton;
	AnimNotifies: AnimNotifyEvent[];
	OrderedSavedPoseIndicesMap: any;
	AnimBlueprintFunctions: AnimBlueprintFunction[];
	AnimBlueprintFunctionData: AnimBlueprintFunctionData[];
	AnimNodeProperties: any[];
	LinkedAnimGraphNodeProperties: any[];
	LinkedAnimLayerNodeProperties: any[];
	PreUpdateNodeProperties: any[];
	DynamicResetNodeProperties: any[];
	StateMachineNodeProperties: any[];
	InitializationNodeProperties: any[];
	GraphNameAssetPlayers: any;
	SyncGroupNames: string[];
	GraphBlendOptions: any;
	static Load(ResourceName: string): AnimClassData;
	static Find(Outer: UObject, ResourceName: string): AnimClassData;
	static GetDefaultObject(): AnimClassData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimClassData;
	static C(Other: UObject | any): AnimClassData;
}

declare class AnimClassInterface extends Interface { 
	static Load(ResourceName: string): AnimClassInterface;
	static Find(Outer: UObject, ResourceName: string): AnimClassInterface;
	static GetDefaultObject(): AnimClassInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimClassInterface;
	static C(Other: UObject | any): AnimClassInterface;
}

declare class AnimComposite extends AnimCompositeBase { 
	AnimationTrack: AnimTrack;
	PreviewBasePose: AnimSequence;
	static Load(ResourceName: string): AnimComposite;
	static Find(Outer: UObject, ResourceName: string): AnimComposite;
	static GetDefaultObject(): AnimComposite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimComposite;
	static C(Other: UObject | any): AnimComposite;
}

declare class AnimCompress_BitwiseCompressOnly extends AnimCompress { 
	static Load(ResourceName: string): AnimCompress_BitwiseCompressOnly;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_BitwiseCompressOnly;
	static GetDefaultObject(): AnimCompress_BitwiseCompressOnly;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_BitwiseCompressOnly;
	static C(Other: UObject | any): AnimCompress_BitwiseCompressOnly;
}

declare class AnimCompress_LeastDestructive extends AnimCompress_BitwiseCompressOnly { 
	static Load(ResourceName: string): AnimCompress_LeastDestructive;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_LeastDestructive;
	static GetDefaultObject(): AnimCompress_LeastDestructive;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_LeastDestructive;
	static C(Other: UObject | any): AnimCompress_LeastDestructive;
}

declare class AnimCompress_RemoveLinearKeys extends AnimCompress { 
	MaxPosDiff: number;
	MaxAngleDiff: number;
	MaxScaleDiff: number;
	MaxEffectorDiff: number;
	MinEffectorDiff: number;
	EffectorDiffSocket: number;
	ParentKeyScale: number;
	bRetarget: boolean;
	bActuallyFilterLinearKeys: boolean;
	static Load(ResourceName: string): AnimCompress_RemoveLinearKeys;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveLinearKeys;
	static GetDefaultObject(): AnimCompress_RemoveLinearKeys;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveLinearKeys;
	static C(Other: UObject | any): AnimCompress_RemoveLinearKeys;
}

declare class AnimCompress_PerTrackCompression extends AnimCompress_RemoveLinearKeys { 
	MaxZeroingThreshold: number;
	MaxPosDiffBitwise: number;
	MaxAngleDiffBitwise: number;
	MaxScaleDiffBitwise: number;
	AllowedRotationFormats: AnimationCompressionFormat[];
	AllowedTranslationFormats: AnimationCompressionFormat[];
	AllowedScaleFormats: AnimationCompressionFormat[];
	bResampleAnimation: boolean;
	ResampledFramerate: number;
	MinKeysForResampling: number;
	bUseAdaptiveError: boolean;
	bUseOverrideForEndEffectors: boolean;
	TrackHeightBias: number;
	ParentingDivisor: number;
	ParentingDivisorExponent: number;
	bUseAdaptiveError2: boolean;
	RotationErrorSourceRatio: number;
	TranslationErrorSourceRatio: number;
	ScaleErrorSourceRatio: number;
	MaxErrorPerTrackRatio: number;
	PerturbationProbeSize: number;
	static Load(ResourceName: string): AnimCompress_PerTrackCompression;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_PerTrackCompression;
	static GetDefaultObject(): AnimCompress_PerTrackCompression;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_PerTrackCompression;
	static C(Other: UObject | any): AnimCompress_PerTrackCompression;
}

declare class AnimCompress_RemoveEverySecondKey extends AnimCompress { 
	MinKeys: number;
	bStartAtSecondKey: boolean;
	static Load(ResourceName: string): AnimCompress_RemoveEverySecondKey;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveEverySecondKey;
	static GetDefaultObject(): AnimCompress_RemoveEverySecondKey;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveEverySecondKey;
	static C(Other: UObject | any): AnimCompress_RemoveEverySecondKey;
}

declare class AnimCompress_RemoveTrivialKeys extends AnimCompress { 
	MaxPosDiff: number;
	MaxAngleDiff: number;
	MaxScaleDiff: number;
	static Load(ResourceName: string): AnimCompress_RemoveTrivialKeys;
	static Find(Outer: UObject, ResourceName: string): AnimCompress_RemoveTrivialKeys;
	static GetDefaultObject(): AnimCompress_RemoveTrivialKeys;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCompress_RemoveTrivialKeys;
	static C(Other: UObject | any): AnimCompress_RemoveTrivialKeys;
}

declare class AnimCurveCompressionCodec_CompressedRichCurve extends AnimCurveCompressionCodec { 
	MaxCurveError: number;
	UseAnimSequenceSampleRate: boolean;
	ErrorSampleRate: number;
	static Load(ResourceName: string): AnimCurveCompressionCodec_CompressedRichCurve;
	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionCodec_CompressedRichCurve;
	static GetDefaultObject(): AnimCurveCompressionCodec_CompressedRichCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionCodec_CompressedRichCurve;
	static C(Other: UObject | any): AnimCurveCompressionCodec_CompressedRichCurve;
}

declare class AnimCurveCompressionCodec_UniformIndexable extends AnimCurveCompressionCodec { 
	static Load(ResourceName: string): AnimCurveCompressionCodec_UniformIndexable;
	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionCodec_UniformIndexable;
	static GetDefaultObject(): AnimCurveCompressionCodec_UniformIndexable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionCodec_UniformIndexable;
	static C(Other: UObject | any): AnimCurveCompressionCodec_UniformIndexable;
}

declare class AnimCurveCompressionCodec_UniformlySampled extends AnimCurveCompressionCodec { 
	UseAnimSequenceSampleRate: boolean;
	SampleRate: number;
	static Load(ResourceName: string): AnimCurveCompressionCodec_UniformlySampled;
	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionCodec_UniformlySampled;
	static GetDefaultObject(): AnimCurveCompressionCodec_UniformlySampled;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionCodec_UniformlySampled;
	static C(Other: UObject | any): AnimCurveCompressionCodec_UniformlySampled;
}

declare class AnimationDataModelNotifiesExtensions extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AnimationDataModelNotifiesExtensions;
	static Find(Outer: UObject, ResourceName: string): AnimationDataModelNotifiesExtensions;
	static GetDefaultObject(): AnimationDataModelNotifiesExtensions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationDataModelNotifiesExtensions;
	static GetPayload(Payload: AnimDataModelNotifPayload): EmptyPayload;
	static CopyPayload(Payload: AnimDataModelNotifPayload,ExpectedStruct: ScriptStruct,OutPayload?: EmptyPayload): {OutPayload: EmptyPayload};
	static C(Other: UObject | any): AnimationDataModelNotifiesExtensions;
}

declare class AnimNotifyMirrorInspectionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AnimNotifyMirrorInspectionLibrary;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyMirrorInspectionLibrary;
	static GetDefaultObject(): AnimNotifyMirrorInspectionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyMirrorInspectionLibrary;
	static IsTriggeredByMirroredAnimation(EventReference: AnimNotifyEventReference): boolean;
	static GetMirrorDataTable(EventReference: AnimNotifyEventReference): MirrorDataTable;
	static C(Other: UObject | any): AnimNotifyMirrorInspectionLibrary;
}

declare class AnimNotifyStateMachineInspectionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AnimNotifyStateMachineInspectionLibrary;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyStateMachineInspectionLibrary;
	static GetDefaultObject(): AnimNotifyStateMachineInspectionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyStateMachineInspectionLibrary;
	static IsTriggeredByStateMachine(EventReference: AnimNotifyEventReference,AnimInstance: AnimInstance,StateMachineName: string): boolean;
	static IsTriggeredByStateInStateMachine(EventReference: AnimNotifyEventReference,AnimInstance: AnimInstance,StateMachineName: string,StateName: string): boolean;
	static IsTriggeredByState(EventReference: AnimNotifyEventReference,AnimInstance: AnimInstance,StateName: string): boolean;
	static C(Other: UObject | any): AnimNotifyStateMachineInspectionLibrary;
}

declare class AnimNotifyState_DisableRootMotion extends AnimNotifyState { 
	static Load(ResourceName: string): AnimNotifyState_DisableRootMotion;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyState_DisableRootMotion;
	static GetDefaultObject(): AnimNotifyState_DisableRootMotion;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyState_DisableRootMotion;
	static C(Other: UObject | any): AnimNotifyState_DisableRootMotion;
}

declare class AnimNotifyState_TimedParticleEffect extends AnimNotifyState { 
	PSTemplate: ParticleSystem;
	SocketName: string;
	LocationOffset: Vector;
	RotationOffset: Rotator;
	bDestroyAtEnd: boolean;
	PreviousPSTemplates: ParticleSystem[];
	PreviousSocketNames: string[];
	static Load(ResourceName: string): AnimNotifyState_TimedParticleEffect;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyState_TimedParticleEffect;
	static GetDefaultObject(): AnimNotifyState_TimedParticleEffect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyState_TimedParticleEffect;
	static C(Other: UObject | any): AnimNotifyState_TimedParticleEffect;
}

declare class AnimNotifyState_Trail extends AnimNotifyState { 
	PSTemplate: ParticleSystem;
	FirstSocketName: string;
	SecondSocketName: string;
	WidthScaleMode: ETrailWidthMode;
	WidthScaleCurve: string;
	bRecycleSpawnedSystems: boolean;
	bRenderGeometry: boolean;
	bRenderSpawnPoints: boolean;
	bRenderTangents: boolean;
	bRenderTessellation: boolean;
	static Load(ResourceName: string): AnimNotifyState_Trail;
	static Find(Outer: UObject, ResourceName: string): AnimNotifyState_Trail;
	static GetDefaultObject(): AnimNotifyState_Trail;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotifyState_Trail;
	OverridePSTemplate(MeshComp: SkeletalMeshComponent,Animation: AnimSequenceBase): ParticleSystem;
	static C(Other: UObject | any): AnimNotifyState_Trail;
}

declare class AnimNotify_PauseClothingSimulation extends AnimNotify { 
	static Load(ResourceName: string): AnimNotify_PauseClothingSimulation;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PauseClothingSimulation;
	static GetDefaultObject(): AnimNotify_PauseClothingSimulation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PauseClothingSimulation;
	static C(Other: UObject | any): AnimNotify_PauseClothingSimulation;
}

declare class AnimNotify_PlayParticleEffect extends AnimNotify { 
	PSTemplate: ParticleSystem;
	LocationOffset: Vector;
	RotationOffset: Rotator;
	Scale: Vector;
	Attached: boolean;
	SocketName: string;
	static Load(ResourceName: string): AnimNotify_PlayParticleEffect;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PlayParticleEffect;
	static GetDefaultObject(): AnimNotify_PlayParticleEffect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PlayParticleEffect;
	static C(Other: UObject | any): AnimNotify_PlayParticleEffect;
}

declare class AnimNotify_PlaySound extends AnimNotify { 
	Sound: SoundBase;
	VolumeMultiplier: number;
	PitchMultiplier: number;
	bFollow: boolean;
	bPreviewIgnoreAttenuation: boolean;
	AttachName: string;
	static Load(ResourceName: string): AnimNotify_PlaySound;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_PlaySound;
	static GetDefaultObject(): AnimNotify_PlaySound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_PlaySound;
	static C(Other: UObject | any): AnimNotify_PlaySound;
}

declare class AnimNotify_ResetClothingSimulation extends AnimNotify { 
	static Load(ResourceName: string): AnimNotify_ResetClothingSimulation;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_ResetClothingSimulation;
	static GetDefaultObject(): AnimNotify_ResetClothingSimulation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_ResetClothingSimulation;
	static C(Other: UObject | any): AnimNotify_ResetClothingSimulation;
}

declare class AnimNotify_ResetDynamics extends AnimNotify { 
	static Load(ResourceName: string): AnimNotify_ResetDynamics;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_ResetDynamics;
	static GetDefaultObject(): AnimNotify_ResetDynamics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_ResetDynamics;
	static C(Other: UObject | any): AnimNotify_ResetDynamics;
}

declare class AnimNotify_ResumeClothingSimulation extends AnimNotify { 
	static Load(ResourceName: string): AnimNotify_ResumeClothingSimulation;
	static Find(Outer: UObject, ResourceName: string): AnimNotify_ResumeClothingSimulation;
	static GetDefaultObject(): AnimNotify_ResumeClothingSimulation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimNotify_ResumeClothingSimulation;
	static C(Other: UObject | any): AnimNotify_ResumeClothingSimulation;
}

declare class AnimSetMeshLinkup { 
	BoneToTrackTable: number[];
	clone() : AnimSetMeshLinkup;
	static C(Other: UObject | any): AnimSetMeshLinkup;
}

declare class AnimSet extends UObject { 
	bAnimRotationOnly: boolean;
	TrackBoneNames: string[];
	Sequences: AnimSequence[];
	LinkupCache: AnimSetMeshLinkup[];
	BoneUseAnimTranslation: number[];
	ForceUseMeshTranslation: number[];
	UseTranslationBoneNames: string[];
	ForceMeshTranslationBoneNames: string[];
	PreviewSkelMeshName: string;
	BestRatioSkelMeshName: string;
	static Load(ResourceName: string): AnimSet;
	static Find(Outer: UObject, ResourceName: string): AnimSet;
	static GetDefaultObject(): AnimSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSet;
	static C(Other: UObject | any): AnimSet;
}

declare class AnimStateMachineTypes extends UObject { 
	static Load(ResourceName: string): AnimStateMachineTypes;
	static Find(Outer: UObject, ResourceName: string): AnimStateMachineTypes;
	static GetDefaultObject(): AnimStateMachineTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStateMachineTypes;
	static C(Other: UObject | any): AnimStateMachineTypes;
}

declare class AnimStreamable extends AnimSequenceBase { 
	NumberOfKeys: number;
	Interpolation: EAnimInterpolationType;
	RetargetSource: string;
	SourceSequence: AnimSequence;
	RawDataGuid: Guid;
	NumFrames: number;
	RawAnimationData: RawAnimSequenceTrack[];
	TrackToSkeletonMapTable: TrackToSkeletonMap[];
	AnimationTrackNames: string[];
	BoneCompressionSettings: AnimBoneCompressionSettings;
	CurveCompressionSettings: AnimCurveCompressionSettings;
	bEnableRootMotion: boolean;
	RootMotionRootLock: ERootMotionRootLock;
	bForceRootLock: boolean;
	bUseNormalizedRootMotionScale: boolean;
	static Load(ResourceName: string): AnimStreamable;
	static Find(Outer: UObject, ResourceName: string): AnimStreamable;
	static GetDefaultObject(): AnimStreamable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStreamable;
	static C(Other: UObject | any): AnimStreamable;
}

declare class RawAnimSequenceTrackExtensions extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): RawAnimSequenceTrackExtensions;
	static Find(Outer: UObject, ResourceName: string): RawAnimSequenceTrackExtensions;
	static GetDefaultObject(): RawAnimSequenceTrackExtensions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RawAnimSequenceTrackExtensions;
	static GetScaleKeys(Track: RawAnimSequenceTrack): Vector[];
	static GetRotationalKeys(Track: RawAnimSequenceTrack): Quat[];
	static GetPositionalKeys(Track: RawAnimSequenceTrack): Vector[];
	static C(Other: UObject | any): RawAnimSequenceTrackExtensions;
}

declare type ETemperatureSeverityType = 'Unknown' | 'Good' | 'Bad' | 'Serious' | 'Critical' | 'NumSeverities' | 'ETemperatureSeverityType_MAX';
declare var ETemperatureSeverityType : { Unknown:'Unknown',Good:'Good',Bad:'Bad',Serious:'Serious',Critical:'Critical',NumSeverities:'NumSeverities',ETemperatureSeverityType_MAX:'ETemperatureSeverityType_MAX', };
declare class ApplicationLifecycleComponent extends ActorComponent { 
	ApplicationWillDeactivateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasReactivatedDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillEnterBackgroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasEnteredForegroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillTerminateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationShouldUnloadResourcesDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationReceivedStartupArgumentsDelegate: UnrealEngineMulticastDelegate<(StartupArguments: string[]) => void>;
	OnTemperatureChangeDelegate: UnrealEngineMulticastDelegate<(Severity: ETemperatureSeverityType) => void>;
	OnLowPowerModeDelegate: UnrealEngineMulticastDelegate<(bInLowPowerMode: boolean) => void>;
	static Load(ResourceName: string): ApplicationLifecycleComponent;
	static Find(Outer: UObject, ResourceName: string): ApplicationLifecycleComponent;
	static GetDefaultObject(): ApplicationLifecycleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ApplicationLifecycleComponent;
	static C(Other: UObject | any): ApplicationLifecycleComponent;
}

declare type EPrimaryAssetCookRule = 'Unknown' | 'NeverCook' | 'DevelopmentCook' | 'DevelopmentAlwaysCook' | 'AlwaysCook' | 'EPrimaryAssetCookRule_MAX';
declare var EPrimaryAssetCookRule : { Unknown:'Unknown',NeverCook:'NeverCook',DevelopmentCook:'DevelopmentCook',DevelopmentAlwaysCook:'DevelopmentAlwaysCook',AlwaysCook:'AlwaysCook',EPrimaryAssetCookRule_MAX:'EPrimaryAssetCookRule_MAX', };
declare class PrimaryAssetRules { 
	Priority: number;
	ChunkID: number;
	bApplyRecursively: boolean;
	CookRule: EPrimaryAssetCookRule;
	clone() : PrimaryAssetRules;
	static C(Other: UObject | any): PrimaryAssetRules;
}

declare class PrimaryAssetTypeInfo { 
	PrimaryAssetType: string;
	AssetBaseClass: Class;
	AssetBaseClassLoaded: UnrealEngineClass;
	bHasBlueprintClasses: boolean;
	bIsEditorOnly: boolean;
	Directories: DirectoryPath[];
	SpecificAssets: SoftObjectPath[];
	Rules: PrimaryAssetRules;
	AssetScanPaths: string[];
	bIsDynamicAsset: boolean;
	NumberOfAssets: number;
	clone() : PrimaryAssetTypeInfo;
	static C(Other: UObject | any): PrimaryAssetTypeInfo;
}

declare class PrimaryAssetRulesOverride { 
	PrimaryAssetId: PrimaryAssetId;
	Rules: PrimaryAssetRules;
	clone() : PrimaryAssetRulesOverride;
	static C(Other: UObject | any): PrimaryAssetRulesOverride;
}

declare class PrimaryAssetRulesCustomOverride { 
	PrimaryAssetType: PrimaryAssetType;
	FilterDirectory: DirectoryPath;
	FilterString: string;
	Rules: PrimaryAssetRules;
	clone() : PrimaryAssetRulesCustomOverride;
	static C(Other: UObject | any): PrimaryAssetRulesCustomOverride;
}

declare class AssetManagerRedirect { 
	Old: string;
	New: string;
	clone() : AssetManagerRedirect;
	static C(Other: UObject | any): AssetManagerRedirect;
}

declare class AssetManagerSettings extends DeveloperSettings { 
	PrimaryAssetTypesToScan: PrimaryAssetTypeInfo[];
	DirectoriesToExclude: DirectoryPath[];
	PrimaryAssetRules: PrimaryAssetRulesOverride[];
	CustomPrimaryAssetRules: PrimaryAssetRulesCustomOverride[];
	bOnlyCookProductionAssets: boolean;
	bShouldManagerDetermineTypeAndName: boolean;
	bShouldGuessTypeAndNameInEditor: boolean;
	bShouldAcquireMissingChunksOnLoad: boolean;
	bShouldWarnAboutInvalidAssets: boolean;
	PrimaryAssetIdRedirects: AssetManagerRedirect[];
	PrimaryAssetTypeRedirects: AssetManagerRedirect[];
	AssetPathRedirects: AssetManagerRedirect[];
	MetaDataTagsForAssetRegistry: any;
	static Load(ResourceName: string): AssetManagerSettings;
	static Find(Outer: UObject, ResourceName: string): AssetManagerSettings;
	static GetDefaultObject(): AssetManagerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetManagerSettings;
	static C(Other: UObject | any): AssetManagerSettings;
}

declare class AsyncActionHandleSaveGame extends BlueprintAsyncActionBase { 
	Completed: UnrealEngineMulticastDelegate<(SaveGame: SaveGame, bSuccess: boolean) => void>;
	SaveGameObject: SaveGame;
	static Load(ResourceName: string): AsyncActionHandleSaveGame;
	static Find(Outer: UObject, ResourceName: string): AsyncActionHandleSaveGame;
	static GetDefaultObject(): AsyncActionHandleSaveGame;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionHandleSaveGame;
	static AsyncSaveGameToSlot(WorldContextObject: UObject,SaveGameObject: SaveGame,SlotName: string,UserIndex: number): AsyncActionHandleSaveGame;
	static AsyncLoadGameFromSlot(WorldContextObject: UObject,SlotName: string,UserIndex: number): AsyncActionHandleSaveGame;
	static C(Other: UObject | any): AsyncActionHandleSaveGame;
}

declare class AsyncActionLoadPrimaryAssetBase extends BlueprintAsyncActionBase { 
	static Load(ResourceName: string): AsyncActionLoadPrimaryAssetBase;
	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAssetBase;
	static GetDefaultObject(): AsyncActionLoadPrimaryAssetBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionLoadPrimaryAssetBase;
	static C(Other: UObject | any): AsyncActionLoadPrimaryAssetBase;
}

declare class AsyncActionLoadPrimaryAsset extends AsyncActionLoadPrimaryAssetBase { 
	Completed: UnrealEngineMulticastDelegate<(Loaded: UObject) => void>;
	static Load(ResourceName: string): AsyncActionLoadPrimaryAsset;
	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAsset;
	static GetDefaultObject(): AsyncActionLoadPrimaryAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionLoadPrimaryAsset;
	static AsyncLoadPrimaryAsset(WorldContextObject: UObject,PrimaryAsset: PrimaryAssetId,LoadBundles: string[]): AsyncActionLoadPrimaryAsset;
	static C(Other: UObject | any): AsyncActionLoadPrimaryAsset;
}

declare class AsyncActionLoadPrimaryAssetClass extends AsyncActionLoadPrimaryAssetBase { 
	Completed: UnrealEngineMulticastDelegate<(Loaded: UnrealEngineClass) => void>;
	static Load(ResourceName: string): AsyncActionLoadPrimaryAssetClass;
	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAssetClass;
	static GetDefaultObject(): AsyncActionLoadPrimaryAssetClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionLoadPrimaryAssetClass;
	static AsyncLoadPrimaryAssetClass(WorldContextObject: UObject,PrimaryAsset: PrimaryAssetId,LoadBundles: string[]): AsyncActionLoadPrimaryAssetClass;
	static C(Other: UObject | any): AsyncActionLoadPrimaryAssetClass;
}

declare class AsyncActionLoadPrimaryAssetList extends AsyncActionLoadPrimaryAssetBase { 
	Completed: UnrealEngineMulticastDelegate<(Loaded: UObject[]) => void>;
	static Load(ResourceName: string): AsyncActionLoadPrimaryAssetList;
	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAssetList;
	static GetDefaultObject(): AsyncActionLoadPrimaryAssetList;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionLoadPrimaryAssetList;
	static AsyncLoadPrimaryAssetList(WorldContextObject: UObject,PrimaryAssetList: PrimaryAssetId[],LoadBundles: string[]): AsyncActionLoadPrimaryAssetList;
	static C(Other: UObject | any): AsyncActionLoadPrimaryAssetList;
}

declare class AsyncActionLoadPrimaryAssetClassList extends AsyncActionLoadPrimaryAssetBase { 
	Completed: UnrealEngineMulticastDelegate<(Loaded: UnrealEngineClass[]) => void>;
	static Load(ResourceName: string): AsyncActionLoadPrimaryAssetClassList;
	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAssetClassList;
	static GetDefaultObject(): AsyncActionLoadPrimaryAssetClassList;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionLoadPrimaryAssetClassList;
	static AsyncLoadPrimaryAssetClassList(WorldContextObject: UObject,PrimaryAssetList: PrimaryAssetId[],LoadBundles: string[]): AsyncActionLoadPrimaryAssetClassList;
	static C(Other: UObject | any): AsyncActionLoadPrimaryAssetClassList;
}

declare class AsyncActionChangePrimaryAssetBundles extends AsyncActionLoadPrimaryAssetBase { 
	Completed: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): AsyncActionChangePrimaryAssetBundles;
	static Find(Outer: UObject, ResourceName: string): AsyncActionChangePrimaryAssetBundles;
	static GetDefaultObject(): AsyncActionChangePrimaryAssetBundles;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionChangePrimaryAssetBundles;
	static AsyncChangeBundleStateForPrimaryAssetList(WorldContextObject: UObject,PrimaryAssetList: PrimaryAssetId[],AddBundles: string[],RemoveBundles: string[]): AsyncActionChangePrimaryAssetBundles;
	static AsyncChangeBundleStateForMatchingPrimaryAssets(WorldContextObject: UObject,NewBundles: string[],OldBundles: string[]): AsyncActionChangePrimaryAssetBundles;
	static C(Other: UObject | any): AsyncActionChangePrimaryAssetBundles;
}

declare type ESkyAtmosphereTransformMode = 'PlanetTopAtAbsoluteWorldOrigin' | 'PlanetTopAtComponentTransform' | 'PlanetCenterAtComponentTransform' | 'ESkyAtmosphereTransformMode_MAX';
declare var ESkyAtmosphereTransformMode : { PlanetTopAtAbsoluteWorldOrigin:'PlanetTopAtAbsoluteWorldOrigin',PlanetTopAtComponentTransform:'PlanetTopAtComponentTransform',PlanetCenterAtComponentTransform:'PlanetCenterAtComponentTransform',ESkyAtmosphereTransformMode_MAX:'ESkyAtmosphereTransformMode_MAX', };
declare class TentDistribution { 
	TipAltitude: number;
	TipValue: number;
	Width: number;
	clone() : TentDistribution;
	static C(Other: UObject | any): TentDistribution;
}

declare class LightmassDirectionalLightSettings extends LightmassLightSettings { 
	LightSourceAngle: number;
	clone() : LightmassDirectionalLightSettings;
	static C(Other: UObject | any): LightmassDirectionalLightSettings;
}

declare class DirectionalLightComponent extends LightComponent { 
	ShadowCascadeBiasDistribution: number;
	bEnableLightShaftOcclusion: boolean;
	OcclusionMaskDarkness: number;
	OcclusionDepthRange: number;
	LightShaftOverrideDirection: Vector;
	WholeSceneDynamicShadowRadius: number;
	DynamicShadowDistanceMovableLight: number;
	DynamicShadowDistanceStationaryLight: number;
	DynamicShadowCascades: number;
	CascadeDistributionExponent: number;
	CascadeTransitionFraction: number;
	ShadowDistanceFadeoutFraction: number;
	bUseInsetShadowsForMovableObjects: boolean;
	FarShadowCascadeCount: number;
	FarShadowDistance: number;
	DistanceFieldShadowDistance: number;
	LightSourceAngle: number;
	LightSourceSoftAngle: number;
	ShadowSourceAngleFactor: number;
	TraceDistance: number;
	bUsedAsAtmosphereSunLight: boolean;
	bAtmosphereSunLight: boolean;
	AtmosphereSunLightIndex: number;
	AtmosphereSunDiskColorScale: LinearColor;
	bPerPixelAtmosphereTransmittance: boolean;
	bCastShadowsOnClouds: boolean;
	bCastShadowsOnAtmosphere: boolean;
	bCastCloudShadows: boolean;
	CloudShadowStrength: number;
	CloudShadowOnAtmosphereStrength: number;
	CloudShadowOnSurfaceStrength: number;
	CloudShadowDepthBias: number;
	CloudShadowExtent: number;
	CloudShadowMapResolutionScale: number;
	CloudShadowRaySampleCountScale: number;
	CloudScatteredLuminanceScale: LinearColor;
	LightmassSettings: LightmassDirectionalLightSettings;
	bCastModulatedShadows: boolean;
	ModulatedShadowColor: Color;
	ShadowAmount: number;
	static Load(ResourceName: string): DirectionalLightComponent;
	static Find(Outer: UObject, ResourceName: string): DirectionalLightComponent;
	static GetDefaultObject(): DirectionalLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectionalLightComponent;
	SetShadowSourceAngleFactor(NewValue: number): void;
	SetShadowDistanceFadeoutFraction(NewValue: number): void;
	SetShadowCascadeBiasDistribution(NewValue: number): void;
	SetShadowAmount(NewValue: number): void;
	SetOcclusionMaskDarkness(NewValue: number): void;
	SetOcclusionDepthRange(NewValue: number): void;
	SetLightSourceSoftAngle(NewValue: number): void;
	SetLightSourceAngle(NewValue: number): void;
	SetLightShaftOverrideDirection(NewValue: Vector): void;
	SetEnableLightShaftOcclusion(bNewValue: boolean): void;
	SetDynamicShadowDistanceStationaryLight(NewValue: number): void;
	SetDynamicShadowDistanceMovableLight(NewValue: number): void;
	SetDynamicShadowCascades(NewValue: number): void;
	SetCascadeTransitionFraction(NewValue: number): void;
	SetCascadeDistributionExponent(NewValue: number): void;
	SetAtmosphereSunLightIndex(NewValue: number): void;
	SetAtmosphereSunLight(bNewValue: boolean): void;
	static C(Other: UObject | any): DirectionalLightComponent;
}

declare class SkyAtmosphereComponent extends SceneComponent { 
	TransformMode: ESkyAtmosphereTransformMode;
	BottomRadius: number;
	GroundAlbedo: Color;
	AtmosphereHeight: number;
	MultiScatteringFactor: number;
	TraceSampleCountScale: number;
	RayleighScatteringScale: number;
	RayleighScattering: LinearColor;
	RayleighExponentialDistribution: number;
	MieScatteringScale: number;
	MieScattering: LinearColor;
	MieAbsorptionScale: number;
	MieAbsorption: LinearColor;
	MieAnisotropy: number;
	MieExponentialDistribution: number;
	OtherAbsorptionScale: number;
	OtherAbsorption: LinearColor;
	OtherTentDistribution: TentDistribution;
	SkyLuminanceFactor: LinearColor;
	AerialPespectiveViewDistanceScale: number;
	HeightFogContribution: number;
	TransmittanceMinLightElevationAngle: number;
	AerialPerspectiveStartDepth: number;
	bStaticLightingBuiltGUID: Guid;
	static Load(ResourceName: string): SkyAtmosphereComponent;
	static Find(Outer: UObject, ResourceName: string): SkyAtmosphereComponent;
	static GetDefaultObject(): SkyAtmosphereComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyAtmosphereComponent;
	SetSkyLuminanceFactor(NewValue: LinearColor): void;
	SetRayleighScatteringScale(NewValue: number): void;
	SetRayleighScattering(NewValue: LinearColor): void;
	SetRayleighExponentialDistribution(NewValue: number): void;
	SetOtherAbsorptionScale(NewValue: number): void;
	SetOtherAbsorption(NewValue: LinearColor): void;
	SetMultiScatteringFactor(NewValue: number): void;
	SetMieScatteringScale(NewValue: number): void;
	SetMieScattering(NewValue: LinearColor): void;
	SetMieExponentialDistribution(NewValue: number): void;
	SetMieAnisotropy(NewValue: number): void;
	SetMieAbsorptionScale(NewValue: number): void;
	SetMieAbsorption(NewValue: LinearColor): void;
	SetHeightFogContribution(NewValue: number): void;
	SetAtmosphereHeight(NewValue: number): void;
	SetAerialPespectiveViewDistanceScale(NewValue: number): void;
	OverrideAtmosphereLightDirection(AtmosphereLightIndex: number,LightDirection: Vector): void;
	GetAtmosphereTransmitanceOnGroundAtPlanetTop(DirectionalLight: DirectionalLightComponent): LinearColor;
	static C(Other: UObject | any): SkyAtmosphereComponent;
}

declare class AtmosphericFogComponent extends SkyAtmosphereComponent { 
	static Load(ResourceName: string): AtmosphericFogComponent;
	static Find(Outer: UObject, ResourceName: string): AtmosphericFogComponent;
	static GetDefaultObject(): AtmosphericFogComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AtmosphericFogComponent;
	SetSunMultiplier(NewSunMultiplier: number): void;
	SetStartDistance(NewStartDistance: number): void;
	SetPrecomputeParams(DensityHeight: number,MaxScatteringOrder: number,InscatterAltitudeSampleNum: number): void;
	SetFogMultiplier(NewFogMultiplier: number): void;
	SetDistanceScale(NewDistanceScale: number): void;
	SetDistanceOffset(NewDistanceOffset: number): void;
	SetDensityOffset(NewDensityOffset: number): void;
	SetDensityMultiplier(NewDensityMultiplier: number): void;
	SetDefaultLightColor(NewLightColor: LinearColor): void;
	SetDefaultBrightness(NewBrightness: number): void;
	SetAltitudeScale(NewAltitudeScale: number): void;
	DisableSunDisk(NewSunDisk: boolean): void;
	DisableGroundScattering(NewGroundScattering: boolean): void;
	static C(Other: UObject | any): AtmosphericFogComponent;
}

declare class AtmosphericFog extends Info { 
	AtmosphericFogComponent: AtmosphericFogComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): AtmosphericFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AtmosphericFog;
	static C(Other: UObject | any): AtmosphericFog;
}

declare class AnimationAttributeIdentifierExtensions extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AnimationAttributeIdentifierExtensions;
	static Find(Outer: UObject, ResourceName: string): AnimationAttributeIdentifierExtensions;
	static GetDefaultObject(): AnimationAttributeIdentifierExtensions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationAttributeIdentifierExtensions;
	static IsValid(Identifier?: AnimationAttributeIdentifier): {Identifier: AnimationAttributeIdentifier, $: boolean};
	static CreateAttributeIdentifier(AnimationAsset: AnimationAsset,AttributeName: string,BoneName: string,AttributeType: ScriptStruct,bValidateExistsOnAsset: boolean): AnimationAttributeIdentifier;
	static C(Other: UObject | any): AnimationAttributeIdentifierExtensions;
}

declare class AudioSubsystemCollectionRoot extends UObject { 
	static Load(ResourceName: string): AudioSubsystemCollectionRoot;
	static Find(Outer: UObject, ResourceName: string): AudioSubsystemCollectionRoot;
	static GetDefaultObject(): AudioSubsystemCollectionRoot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioSubsystemCollectionRoot;
	static C(Other: UObject | any): AudioSubsystemCollectionRoot;
}

declare class AudioPanelWidgetInterface extends Interface { 
	static Load(ResourceName: string): AudioPanelWidgetInterface;
	static Find(Outer: UObject, ResourceName: string): AudioPanelWidgetInterface;
	static GetDefaultObject(): AudioPanelWidgetInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioPanelWidgetInterface;
	GetIconBrushName(): string;
	GetEditorName(): string;
	static C(Other: UObject | any): AudioPanelWidgetInterface;
}

declare type EVoiceSampleRate = 'Low16000Hz' | 'Normal24000Hz' | 'EVoiceSampleRate_MAX';
declare var EVoiceSampleRate : { Low16000Hz:'Low16000Hz',Normal24000Hz:'Normal24000Hz',EVoiceSampleRate_MAX:'EVoiceSampleRate_MAX', };
declare class AudioQualitySettings { 
	DisplayName: string;
	MaxChannels: number;
	clone() : AudioQualitySettings;
	static C(Other: UObject | any): AudioQualitySettings;
}

declare type EPanningMethod = 'Linear' | 'EqualPower' | 'EPanningMethod_MAX';
declare var EPanningMethod : { Linear:'Linear',EqualPower:'EqualPower',EPanningMethod_MAX:'EPanningMethod_MAX', };
declare type EMonoChannelUpmixMethod = 'Linear' | 'EqualPower' | 'FullVolume' | 'EMonoChannelUpmixMethod_MAX';
declare var EMonoChannelUpmixMethod : { Linear:'Linear',EqualPower:'EqualPower',FullVolume:'FullVolume',EMonoChannelUpmixMethod_MAX:'EMonoChannelUpmixMethod_MAX', };
declare class SoundDebugEntry { 
	DebugName: string;
	Sound: SoftObjectPath;
	clone() : SoundDebugEntry;
	static C(Other: UObject | any): SoundDebugEntry;
}

declare class DefaultAudioBusSettings { 
	AudioBus: SoftObjectPath;
	clone() : DefaultAudioBusSettings;
	static C(Other: UObject | any): DefaultAudioBusSettings;
}

declare class AudioSettings extends DeveloperSettings { 
	DefaultSoundClassName: SoftObjectPath;
	DefaultMediaSoundClassName: SoftObjectPath;
	DefaultSoundConcurrencyName: SoftObjectPath;
	DefaultBaseSoundMix: SoftObjectPath;
	VoiPSoundClass: SoftObjectPath;
	MasterSubmix: SoftObjectPath;
	BaseDefaultSubmix: SoftObjectPath;
	ReverbSubmix: SoftObjectPath;
	EQSubmix: SoftObjectPath;
	VoiPSampleRate: EVoiceSampleRate;
	DefaultReverbSendLevel: number;
	MaximumConcurrentStreams: number;
	GlobalMinPitchScale: number;
	GlobalMaxPitchScale: number;
	QualityLevels: AudioQualitySettings[];
	bAllowPlayWhenSilent: boolean;
	bDisableMasterEQ: boolean;
	bAllowCenterChannel3DPanning: boolean;
	NumStoppingSources: any;
	PanningMethod: EPanningMethod;
	MonoChannelUpmixMethod: EMonoChannelUpmixMethod;
	DialogueFilenameFormat: string;
	DebugSounds: SoundDebugEntry[];
	DefaultAudioBuses: DefaultAudioBusSettings[];
	DefaultSoundClass: SoundClass;
	DefaultMediaSoundClass: SoundClass;
	DefaultSoundConcurrency: SoundConcurrency;
	static Load(ResourceName: string): AudioSettings;
	static Find(Outer: UObject, ResourceName: string): AudioSettings;
	static GetDefaultObject(): AudioSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioSettings;
	static C(Other: UObject | any): AudioSettings;
}

declare type EAudioVolumeLocationState = 'InsideTheVolume' | 'OutsideTheVolume' | 'EAudioVolumeLocationState_MAX';
declare var EAudioVolumeLocationState : { InsideTheVolume:'InsideTheVolume',OutsideTheVolume:'OutsideTheVolume',EAudioVolumeLocationState_MAX:'EAudioVolumeLocationState_MAX', };
declare class AudioVolumeSubmixSendSettings { 
	ListenerLocationState: EAudioVolumeLocationState;
	SourceLocationState: EAudioVolumeLocationState;
	SubmixSends: SoundSubmixSendInfo[];
	clone() : AudioVolumeSubmixSendSettings;
	static C(Other: UObject | any): AudioVolumeSubmixSendSettings;
}

declare class AudioVolumeSubmixOverrideSettings { 
	Submix: SoundSubmix;
	SubmixEffectChain: SoundEffectSubmixPreset[];
	CrossfadeTime: number;
	clone() : AudioVolumeSubmixOverrideSettings;
	static C(Other: UObject | any): AudioVolumeSubmixOverrideSettings;
}

declare class AudioVolume extends Volume { 
	Priority: number;
	bEnabled: boolean;
	Settings: ReverbSettings;
	AmbientZoneSettings: InteriorSettings;
	SubmixSendSettings: AudioVolumeSubmixSendSettings[];
	SubmixOverrideSettings: AudioVolumeSubmixOverrideSettings[];
	static GetDefaultObject(): AudioVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioVolume;
	SetSubmixSendSettings(NewSubmixSendSettings: AudioVolumeSubmixSendSettings[]): void;
	SetSubmixOverrideSettings(NewSubmixOverrideSettings: AudioVolumeSubmixOverrideSettings[]): void;
	SetReverbSettings(NewReverbSettings: ReverbSettings): void;
	SetPriority(NewPriority: number): void;
	SetInteriorSettings(NewInteriorSettings: InteriorSettings): void;
	SetEnabled(bNewEnabled: boolean): void;
	OnRep_bEnabled(): void;
	static C(Other: UObject | any): AudioVolume;
}

declare class AudioWidgetSubsystem extends EngineSubsystem { 
	static Load(ResourceName: string): AudioWidgetSubsystem;
	static Find(Outer: UObject, ResourceName: string): AudioWidgetSubsystem;
	static GetDefaultObject(): AudioWidgetSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioWidgetSubsystem;
	static C(Other: UObject | any): AudioWidgetSubsystem;
}

declare class AutoDestroySubsystem extends TickableWorldSubsystem { 
	ActorsToPoll: Actor[];
	static Load(ResourceName: string): AutoDestroySubsystem;
	static Find(Outer: UObject, ResourceName: string): AutoDestroySubsystem;
	static GetDefaultObject(): AutoDestroySubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutoDestroySubsystem;
	OnActorEndPlay(Actor: Actor,EndPlayReason: EEndPlayReason): void;
	static C(Other: UObject | any): AutoDestroySubsystem;
}

declare class EditorMapPerformanceTestDefinition { 
	PerformanceTestmap: SoftObjectPath;
	TestTimer: number;
	clone() : EditorMapPerformanceTestDefinition;
	static C(Other: UObject | any): EditorMapPerformanceTestDefinition;
}

declare class ImportFactorySettingValues { 
	SettingName: string;
	Value: string;
	clone() : ImportFactorySettingValues;
	static C(Other: UObject | any): ImportFactorySettingValues;
}

declare class EditorImportWorkflowDefinition { 
	ImportFilePath: FilePath;
	FactorySettings: ImportFactorySettingValues[];
	clone() : EditorImportWorkflowDefinition;
	static C(Other: UObject | any): EditorImportWorkflowDefinition;
}

declare class BuildPromotionImportWorkflowSettings { 
	Diffuse: EditorImportWorkflowDefinition;
	Normal: EditorImportWorkflowDefinition;
	StaticMesh: EditorImportWorkflowDefinition;
	ReimportStaticMesh: EditorImportWorkflowDefinition;
	BlendShapeMesh: EditorImportWorkflowDefinition;
	MorphMesh: EditorImportWorkflowDefinition;
	SkeletalMesh: EditorImportWorkflowDefinition;
	Animation: EditorImportWorkflowDefinition;
	Sound: EditorImportWorkflowDefinition;
	SurroundSound: EditorImportWorkflowDefinition;
	OtherAssetsToImport: EditorImportWorkflowDefinition[];
	clone() : BuildPromotionImportWorkflowSettings;
	static C(Other: UObject | any): BuildPromotionImportWorkflowSettings;
}

declare class BuildPromotionOpenAssetSettings { 
	BlueprintAsset: FilePath;
	MaterialAsset: FilePath;
	ParticleSystemAsset: FilePath;
	SkeletalMeshAsset: FilePath;
	StaticMeshAsset: FilePath;
	TextureAsset: FilePath;
	clone() : BuildPromotionOpenAssetSettings;
	static C(Other: UObject | any): BuildPromotionOpenAssetSettings;
}

declare class BuildPromotionNewProjectSettings { 
	NewProjectFolderOverride: DirectoryPath;
	NewProjectNameOverride: string;
	clone() : BuildPromotionNewProjectSettings;
	static C(Other: UObject | any): BuildPromotionNewProjectSettings;
}

declare class BuildPromotionTestSettings { 
	DefaultStaticMeshAsset: FilePath;
	ImportWorkflow: BuildPromotionImportWorkflowSettings;
	OpenAssets: BuildPromotionOpenAssetSettings;
	NewProjectSettings: BuildPromotionNewProjectSettings;
	SourceControlMaterial: FilePath;
	clone() : BuildPromotionTestSettings;
	static C(Other: UObject | any): BuildPromotionTestSettings;
}

declare class MaterialEditorPromotionSettings { 
	DefaultMaterialAsset: FilePath;
	DefaultDiffuseTexture: FilePath;
	DefaultNormalTexture: FilePath;
	clone() : MaterialEditorPromotionSettings;
	static C(Other: UObject | any): MaterialEditorPromotionSettings;
}

declare class ParticleEditorPromotionSettings { 
	DefaultParticleAsset: FilePath;
	clone() : ParticleEditorPromotionSettings;
	static C(Other: UObject | any): ParticleEditorPromotionSettings;
}

declare class BlueprintEditorPromotionSettings { 
	FirstMeshPath: FilePath;
	SecondMeshPath: FilePath;
	DefaultParticleAsset: FilePath;
	clone() : BlueprintEditorPromotionSettings;
	static C(Other: UObject | any): BlueprintEditorPromotionSettings;
}

declare class ExternalToolDefinition { 
	ToolName: string;
	ExecutablePath: FilePath;
	CommandLineOptions: string;
	WorkingDirectory: DirectoryPath;
	ScriptExtension: string;
	ScriptDirectory: DirectoryPath;
	clone() : ExternalToolDefinition;
	static C(Other: UObject | any): ExternalToolDefinition;
}

declare class EditorImportExportTestDefinition { 
	ImportFilePath: FilePath;
	ExportFileExtension: string;
	bSkipExport: boolean;
	FactorySettings: ImportFactorySettingValues[];
	clone() : EditorImportExportTestDefinition;
	static C(Other: UObject | any): EditorImportExportTestDefinition;
}

declare class LaunchOnTestSettings { 
	LaunchOnTestmap: FilePath;
	DeviceID: string;
	clone() : LaunchOnTestSettings;
	static C(Other: UObject | any): LaunchOnTestSettings;
}

declare class AutomationTestSettings extends UObject { 
	EngineTestModules: string[];
	EditorTestModules: string[];
	AutomationTestmap: SoftObjectPath;
	EditorPerformanceTestMaps: EditorMapPerformanceTestDefinition[];
	AssetsToOpen: string[];
	MapsToPIETest: string[];
	bUseAllProjectMapsToPlayInPIE: boolean;
	BuildPromotionTest: BuildPromotionTestSettings;
	MaterialEditorPromotionTest: MaterialEditorPromotionSettings;
	ParticleEditorPromotionTest: ParticleEditorPromotionSettings;
	BlueprintEditorPromotionTest: BlueprintEditorPromotionSettings;
	TestLevelFolders: string[];
	ExternalTools: ExternalToolDefinition[];
	ImportExportTestDefinitions: EditorImportExportTestDefinition[];
	LaunchOnSettings: LaunchOnTestSettings[];
	DefaultScreenshotResolution: IntPoint;
	PIETestDuration: number;
	static Load(ResourceName: string): AutomationTestSettings;
	static Find(Outer: UObject, ResourceName: string): AutomationTestSettings;
	static GetDefaultObject(): AutomationTestSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationTestSettings;
	static C(Other: UObject | any): AutomationTestSettings;
}

declare class BandwidthTestItem { 
	Kilobyte: number[];
	clone() : BandwidthTestItem;
	static C(Other: UObject | any): BandwidthTestItem;
}

declare class BandwidthTestGenerator { 
	ReplicatedBuffers: BandwidthTestItem[];
	clone() : BandwidthTestGenerator;
	static C(Other: UObject | any): BandwidthTestGenerator;
}

declare class BandwidthTestActor extends Actor { 
	BandwidthGenerator: BandwidthTestGenerator;
	static GetDefaultObject(): BandwidthTestActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BandwidthTestActor;
	static C(Other: UObject | any): BandwidthTestActor;
}

declare class BlendableInterface extends Interface { 
	static Load(ResourceName: string): BlendableInterface;
	static Find(Outer: UObject, ResourceName: string): BlendableInterface;
	static GetDefaultObject(): BlendableInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlendableInterface;
	static C(Other: UObject | any): BlendableInterface;
}

declare class BlockingVolume extends Volume { 
	static GetDefaultObject(): BlockingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlockingVolume;
	static C(Other: UObject | any): BlockingVolume;
}

declare class BlueprintMapLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintMapLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintMapLibrary;
	static GetDefaultObject(): BlueprintMapLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintMapLibrary;
	static SetMapPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
	static Map_Values(TargetMap: any,Values?: number[]): {Values: number[]};
	static Map_Remove(TargetMap: any,Key: number): boolean;
	static Map_Length(TargetMap: any): number;
	static Map_Keys(TargetMap: any,Keys?: number[]): {Keys: number[]};
	static Map_IsNotEmpty(TargetMap: any): boolean;
	static Map_IsEmpty(TargetMap: any): boolean;
	static Map_Find(TargetMap: any,Key: number,Value?: number): {Value: number, $: boolean};
	static Map_Contains(TargetMap: any,Key: number): boolean;
	static Map_Clear(TargetMap: any): void;
	static Map_Add(TargetMap: any,Key: number,Value: number): void;
	static C(Other: UObject | any): BlueprintMapLibrary;
}

declare class BlueprintPathsLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintPathsLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintPathsLibrary;
	static GetDefaultObject(): BlueprintPathsLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPathsLibrary;
	static VideoCaptureDir(): string;
	static ValidatePath(InPath: string,bDidSucceed?: boolean,OutReason?: string): {bDidSucceed: boolean, OutReason: string};
	static Split(InPath: string,PathPart?: string,FilenamePart?: string,ExtensionPart?: string): {PathPart: string, FilenamePart: string, ExtensionPart: string};
	static SourceConfigDir(): string;
	static ShouldSaveToUserDir(): boolean;
	static ShaderWorkingDir(): string;
	static SetProjectFilePath(NewGameProjectFilePath: string): void;
	static SetExtension(InPath: string,InNewExtension: string): string;
	static ScreenShotDir(): string;
	static SandboxesDir(): string;
	static RootDir(): string;
	static RemoveDuplicateSlashes(InPath: string,OutPath?: string): {OutPath: string};
	static ProjectUserDir(): string;
	static ProjectSavedDir(): string;
	static ProjectPluginsDir(): string;
	static ProjectPersistentDownloadDir(): string;
	static ProjectModsDir(): string;
	static ProjectLogDir(): string;
	static ProjectIntermediateDir(): string;
	static ProjectDir(): string;
	static ProjectContentDir(): string;
	static ProjectConfigDir(): string;
	static ProfilingDir(): string;
	static NormalizeFilename(InPath: string,OutPath?: string): {OutPath: string};
	static NormalizeDirectoryName(InPath: string,OutPath?: string): {OutPath: string};
	static MakeValidFileName(InString: string,InReplacementChar: string): string;
	static MakeStandardFilename(InPath: string,OutPath?: string): {OutPath: string};
	static MakePlatformFilename(InPath: string,OutPath?: string): {OutPath: string};
	static MakePathRelativeTo(InPath: string,InRelativeTo: string,OutPath?: string): {OutPath: string, $: boolean};
	static LaunchDir(): string;
	static IsSamePath(PathA: string,PathB: string): boolean;
	static IsRestrictedPath(InPath: string): boolean;
	static IsRelative(InPath: string): boolean;
	static IsProjectFilePathSet(): boolean;
	static IsDrive(InPath: string): boolean;
	static HasProjectPersistentDownloadDir(): boolean;
	static GetToolTipLocalizationPaths(): string[];
	static GetRestrictedFolderNames(): string[];
	static GetRelativePathToRoot(): string;
	static GetPropertyNameLocalizationPaths(): string[];
	static GetProjectFilePath(): string;
	static GetPath(InPath: string): string;
	static GetInvalidFileSystemChars(): string;
	static GetGameLocalizationPaths(): string[];
	static GetExtension(InPath: string,bIncludeDot: boolean): string;
	static GetEngineLocalizationPaths(): string[];
	static GetEditorLocalizationPaths(): string[];
	static GetCleanFilename(InPath: string): string;
	static GetBaseFilename(InPath: string,bRemovePath: boolean): string;
	static GeneratedConfigDir(): string;
	static GameUserDeveloperDir(): string;
	static GameSourceDir(): string;
	static GameDevelopersDir(): string;
	static GameAgnosticSavedDir(): string;
	static FileExists(InPath: string): boolean;
	static FeaturePackDir(): string;
	static EnterprisePluginsDir(): string;
	static EnterpriseFeaturePackDir(): string;
	static EnterpriseDir(): string;
	static EngineVersionAgnosticUserDir(): string;
	static EngineUserDir(): string;
	static EngineSourceDir(): string;
	static EngineSavedDir(): string;
	static EnginePluginsDir(): string;
	static EngineIntermediateDir(): string;
	static EngineDir(): string;
	static EngineContentDir(): string;
	static EngineConfigDir(): string;
	static DirectoryExists(InPath: string): boolean;
	static DiffDir(): string;
	static CreateTempFilename(Path: string,Prefix: string,Extension: string): string;
	static ConvertToSandboxPath(InPath: string,InSandboxName: string): string;
	static ConvertRelativePathToFull(InPath: string,InBasePath: string): string;
	static ConvertFromSandboxPath(InPath: string,InSandboxName: string): string;
	static Combine(InPaths: string[]): string;
	static CollapseRelativeDirectories(InPath: string,OutPath?: string): {OutPath: string, $: boolean};
	static CloudDir(): string;
	static ChangeExtension(InPath: string,InNewExtension: string): string;
	static BugItDir(): string;
	static AutomationTransientDir(): string;
	static AutomationLogDir(): string;
	static AutomationDir(): string;
	static C(Other: UObject | any): BlueprintPathsLibrary;
}

declare type EApplicationState = 'Unknown' | 'Inactive' | 'Background' | 'Active' | 'EApplicationState_MAX';
declare var EApplicationState : { Unknown:'Unknown',Inactive:'Inactive',Background:'Background',Active:'Active',EApplicationState_MAX:'EApplicationState_MAX', };
declare type EScreenOrientation = 'Unknown' | 'Portrait' | 'PortraitUpsideDown' | 'LandscapeLeft' | 'LandscapeRight' | 'FaceUp' | 'FaceDown' | 'EScreenOrientation_MAX';
declare var EScreenOrientation : { Unknown:'Unknown',Portrait:'Portrait',PortraitUpsideDown:'PortraitUpsideDown',LandscapeLeft:'LandscapeLeft',LandscapeRight:'LandscapeRight',FaceUp:'FaceUp',FaceDown:'FaceDown',EScreenOrientation_MAX:'EScreenOrientation_MAX', };
declare class PlatformGameInstance extends GameInstance { 
	ApplicationWillDeactivateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasReactivatedDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillEnterBackgroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationHasEnteredForegroundDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationWillTerminateDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationShouldUnloadResourcesDelegate: UnrealEngineMulticastDelegate<() => void>;
	ApplicationReceivedStartupArgumentsDelegate: UnrealEngineMulticastDelegate<(StartupArguments: string[]) => void>;
	ApplicationRegisteredForRemoteNotificationsDelegate: UnrealEngineMulticastDelegate<(inArray: number[]) => void>;
	ApplicationRegisteredForUserNotificationsDelegate: UnrealEngineMulticastDelegate<(inInt: number) => void>;
	ApplicationFailedToRegisterForRemoteNotificationsDelegate: UnrealEngineMulticastDelegate<(InString: string) => void>;
	ApplicationReceivedRemoteNotificationDelegate: UnrealEngineMulticastDelegate<(InString: string, inAppState: EApplicationState) => void>;
	ApplicationReceivedLocalNotificationDelegate: UnrealEngineMulticastDelegate<(InString: string, inInt: number, inAppState: EApplicationState) => void>;
	ApplicationReceivedScreenOrientationChangedNotificationDelegate: UnrealEngineMulticastDelegate<(inScreenOrientation: EScreenOrientation) => void>;
	static Load(ResourceName: string): PlatformGameInstance;
	static Find(Outer: UObject, ResourceName: string): PlatformGameInstance;
	static GetDefaultObject(): PlatformGameInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformGameInstance;
	static C(Other: UObject | any): PlatformGameInstance;
}

declare class BlueprintPlatformLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintPlatformLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintPlatformLibrary;
	static GetDefaultObject(): BlueprintPlatformLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPlatformLibrary;
	static ScheduleLocalNotificationFromNow(inSecondsFromNow: number,Title: string,Body: string,Action: string,ActivationEvent: string): number;
	static ScheduleLocalNotificationBadgeFromNow(inSecondsFromNow: number,ActivationEvent: string): void;
	static ScheduleLocalNotificationBadgeAtTime(FireDateTime: DateTime,LocalTime: boolean,ActivationEvent: string): number;
	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): number;
	static GetLaunchNotification(NotificationLaunchedApp?: boolean,ActivationEvent?: string,FireDate?: number): {NotificationLaunchedApp: boolean, ActivationEvent: string, FireDate: number};
	static GetDeviceOrientation(): EScreenOrientation;
	static ClearAllLocalNotifications(): void;
	static CancelLocalNotificationById(NotificationId: number): void;
	static CancelLocalNotification(ActivationEvent: string): void;
	static C(Other: UObject | any): BlueprintPlatformLibrary;
}

declare class BlueprintSetLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BlueprintSetLibrary;
	static Find(Outer: UObject, ResourceName: string): BlueprintSetLibrary;
	static GetDefaultObject(): BlueprintSetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintSetLibrary;
	static SetSetPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
	static Set_Union(A: any,B: any,Result?: any): {Result: any};
	static Set_ToArray(A: any,Result?: number[]): {Result: number[]};
	static Set_RemoveItems(TargetSet: any,Items: number[]): void;
	static Set_Remove(TargetSet: any,Item: number): boolean;
	static Set_Length(TargetSet: any): number;
	static Set_IsNotEmpty(TargetSet: any): boolean;
	static Set_IsEmpty(TargetSet: any): boolean;
	static Set_Intersection(A: any,B: any,Result?: any): {Result: any};
	static Set_Difference(A: any,B: any,Result?: any): {Result: any};
	static Set_Contains(TargetSet: any,ItemToFind: number): boolean;
	static Set_Clear(TargetSet: any): void;
	static Set_AddItems(TargetSet: any,NewItems: number[]): void;
	static Set_Add(TargetSet: any,NewItem: number): void;
	static C(Other: UObject | any): BlueprintSetLibrary;
}

declare class BoneMaskFilter extends UObject { 
	BlendPoses: InputBlendPose[];
	static Load(ResourceName: string): BoneMaskFilter;
	static Find(Outer: UObject, ResourceName: string): BoneMaskFilter;
	static GetDefaultObject(): BoneMaskFilter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoneMaskFilter;
	static C(Other: UObject | any): BoneMaskFilter;
}

declare class BookMark2D extends BookmarkBase { 
	Zoom2D: number;
	Location: IntPoint;
	static Load(ResourceName: string): BookMark2D;
	static Find(Outer: UObject, ResourceName: string): BookMark2D;
	static GetDefaultObject(): BookMark2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BookMark2D;
	static C(Other: UObject | any): BookMark2D;
}

declare class BoundsCopyComponent extends ActorComponent { 
	BoundsSourceActor: Actor;
	bUseCollidingComponentsForSourceBounds: boolean;
	bKeepOwnBoundsScale: boolean;
	bUseCollidingComponentsForOwnBounds: boolean;
	PostTransform: Transform;
	bCopyXBounds: boolean;
	bCopyYBounds: boolean;
	bCopyZBounds: boolean;
	static Load(ResourceName: string): BoundsCopyComponent;
	static Find(Outer: UObject, ResourceName: string): BoundsCopyComponent;
	static GetDefaultObject(): BoundsCopyComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoundsCopyComponent;
	SetTransformToBounds(): void;
	SetRotation(): void;
	static C(Other: UObject | any): BoundsCopyComponent;
}

declare class BoxComponent extends ShapeComponent { 
	BoxExtent: Vector;
	LineThickness: number;
	static Load(ResourceName: string): BoxComponent;
	static Find(Outer: UObject, ResourceName: string): BoxComponent;
	static GetDefaultObject(): BoxComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxComponent;
	SetBoxExtent(InBoxExtent: Vector,bUpdateOverlaps: boolean): void;
	GetUnscaledBoxExtent(): Vector;
	GetScaledBoxExtent(): Vector;
	static C(Other: UObject | any): BoxComponent;
}

declare type EReflectionSourceType = 'CapturedScene' | 'SpecifiedCubemap' | 'EReflectionSourceType_MAX';
declare var EReflectionSourceType : { CapturedScene:'CapturedScene',SpecifiedCubemap:'SpecifiedCubemap',EReflectionSourceType_MAX:'EReflectionSourceType_MAX', };
declare type EMobileReflectionCompression = 'Default' | 'On' | 'Off' | 'EMobileReflectionCompression_MAX';
declare var EMobileReflectionCompression : { Default:'Default',On:'On',Off:'Off',EMobileReflectionCompression_MAX:'EMobileReflectionCompression_MAX', };
declare class ReflectionCaptureComponent extends SceneComponent { 
	CaptureOffsetComponent: BillboardComponent;
	ReflectionSourceType: EReflectionSourceType;
	MobileReflectionCompression: EMobileReflectionCompression;
	Cubemap: TextureCube;
	SourceCubemapAngle: number;
	Brightness: number;
	bModifyMaxValueRGBM: boolean;
	MaxValueRGBM: number;
	CaptureOffset: Vector;
	MapBuildDataId: Guid;
	CachedEncodedHDRCubemap: TextureCube;
	static Load(ResourceName: string): ReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): ReflectionCaptureComponent;
	static GetDefaultObject(): ReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReflectionCaptureComponent;
	static C(Other: UObject | any): ReflectionCaptureComponent;
}

declare class ReflectionCapture extends Actor { 
	CaptureComponent: ReflectionCaptureComponent;
	SpriteComponent: BillboardComponent;
	CaptureOffsetComponent: BillboardComponent;
	static GetDefaultObject(): ReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReflectionCapture;
	static C(Other: UObject | any): ReflectionCapture;
}

declare class BoxReflectionCapture extends ReflectionCapture { 
	static GetDefaultObject(): BoxReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxReflectionCapture;
	static C(Other: UObject | any): BoxReflectionCapture;
}

declare class BoxReflectionCaptureComponent extends ReflectionCaptureComponent { 
	BoxTransitionDistance: number;
	PreviewInfluenceBox: BoxComponent;
	PreviewCaptureBox: BoxComponent;
	static Load(ResourceName: string): BoxReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): BoxReflectionCaptureComponent;
	static GetDefaultObject(): BoxReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxReflectionCaptureComponent;
	static C(Other: UObject | any): BoxReflectionCaptureComponent;
}

declare class BrushShape extends Brush { 
	static GetDefaultObject(): BrushShape;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushShape;
	static C(Other: UObject | any): BrushShape;
}

declare class BuiltInAttributesExtensions extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): BuiltInAttributesExtensions;
	static Find(Outer: UObject, ResourceName: string): BuiltInAttributesExtensions;
	static GetDefaultObject(): BuiltInAttributesExtensions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BuiltInAttributesExtensions;
	static AddTransformAttribute(AnimSequenceBase: AnimSequenceBase,AttributeName: string,BoneName: string,Keys: number[],Values: Transform[]): boolean;
	static C(Other: UObject | any): BuiltInAttributesExtensions;
}

declare class ButtonStyleAsset extends UObject { 
	ButtonStyle: ButtonStyle;
	static Load(ResourceName: string): ButtonStyleAsset;
	static Find(Outer: UObject, ResourceName: string): ButtonStyleAsset;
	static GetDefaultObject(): ButtonStyleAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ButtonStyleAsset;
	static C(Other: UObject | any): ButtonStyleAsset;
}

declare class CachedAnimDataLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): CachedAnimDataLibrary;
	static Find(Outer: UObject, ResourceName: string): CachedAnimDataLibrary;
	static GetDefaultObject(): CachedAnimDataLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CachedAnimDataLibrary;
	static StateMachine_IsStateRelevant(InAnimInstance: AnimInstance,CachedAnimStateData: CachedAnimStateData): boolean;
	static StateMachine_GetLocalWeight(InAnimInstance: AnimInstance,CachedAnimStateData: CachedAnimStateData): number;
	static StateMachine_GetGlobalWeight(InAnimInstance: AnimInstance,CachedAnimStateData: CachedAnimStateData): number;
	static C(Other: UObject | any): CachedAnimDataLibrary;
}

declare class CameraBlockingVolume extends Volume { 
	static GetDefaultObject(): CameraBlockingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraBlockingVolume;
	static C(Other: UObject | any): CameraBlockingVolume;
}

declare class CameraLensEffectInterface extends Interface { 
	static Load(ResourceName: string): CameraLensEffectInterface;
	static Find(Outer: UObject, ResourceName: string): CameraLensEffectInterface;
	static GetDefaultObject(): CameraLensEffectInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraLensEffectInterface;
	GetPrimaryParticleComponent(): FXSystemComponent;
	GetParticleComponents(): FXSystemComponent[];
	static C(Other: UObject | any): CameraLensEffectInterface;
}

declare class CameraLensEffectInterfaceClassSupportLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): CameraLensEffectInterfaceClassSupportLibrary;
	static Find(Outer: UObject, ResourceName: string): CameraLensEffectInterfaceClassSupportLibrary;
	static GetDefaultObject(): CameraLensEffectInterfaceClassSupportLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraLensEffectInterfaceClassSupportLibrary;
	static SetInterfaceClass(Class: UnrealEngineClass,Var?: CameraLensInterfaceClassSupport,Result?: EInterfaceValidResult): {Var: CameraLensInterfaceClassSupport, Result: EInterfaceValidResult};
	static IsInterfaceClassValid(CameraLens: CameraLensInterfaceClassSupport,Result?: EInterfaceValidResult): {Result: EInterfaceValidResult};
	static GetInterfaceClass(CameraLens: CameraLensInterfaceClassSupport): UnrealEngineClass;
	static C(Other: UObject | any): CameraLensEffectInterfaceClassSupportLibrary;
}

declare class CameraShakeSourceActor extends Actor { 
	CameraShakeSourceComponent: CameraShakeSourceComponent;
	static GetDefaultObject(): CameraShakeSourceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraShakeSourceActor;
	static C(Other: UObject | any): CameraShakeSourceActor;
}

declare class CancellableAsyncAction extends BlueprintAsyncActionBase { 
	static Load(ResourceName: string): CancellableAsyncAction;
	static Find(Outer: UObject, ResourceName: string): CancellableAsyncAction;
	static GetDefaultObject(): CancellableAsyncAction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CancellableAsyncAction;
	IsActive(): boolean;
	Cancel(): void;
	static C(Other: UObject | any): CancellableAsyncAction;
}

declare class CanvasRenderTarget2D extends TextureRenderTarget2D { 
	OnCanvasRenderTargetUpdate: UnrealEngineMulticastDelegate<(Canvas: Canvas, Width: number, Height: number) => void>;
	World: any;
	bShouldClearRenderTargetOnReceiveUpdate: boolean;
	static Load(ResourceName: string): CanvasRenderTarget2D;
	static Find(Outer: UObject, ResourceName: string): CanvasRenderTarget2D;
	static GetDefaultObject(): CanvasRenderTarget2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CanvasRenderTarget2D;
	UpdateResource(): void;
	ReceiveUpdate(Canvas: Canvas,Width: number,Height: number): void;
	GetSize(Width?: number,Height?: number): {Width: number, Height: number};
	static CreateCanvasRenderTarget2D(WorldContextObject: UObject,CanvasRenderTarget2DClass: UnrealEngineClass,Width: number,Height: number): CanvasRenderTarget2D;
	static C(Other: UObject | any): CanvasRenderTarget2D;
}

declare class CheckBoxStyleAsset extends UObject { 
	CheckBoxStyle: CheckBoxStyle;
	static Load(ResourceName: string): CheckBoxStyleAsset;
	static Find(Outer: UObject, ResourceName: string): CheckBoxStyleAsset;
	static GetDefaultObject(): CheckBoxStyleAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheckBoxStyleAsset;
	static C(Other: UObject | any): CheckBoxStyleAsset;
}

declare type EPlatformInterfaceDataType = 'PIDT_None' | 'PIDT_Int' | 'PIDT_Float' | 'PIDT_String' | 'PIDT_Object' | 'PIDT_Custom' | 'PIDT_MAX';
declare var EPlatformInterfaceDataType : { PIDT_None:'PIDT_None',PIDT_Int:'PIDT_Int',PIDT_Float:'PIDT_Float',PIDT_String:'PIDT_String',PIDT_Object:'PIDT_Object',PIDT_Custom:'PIDT_Custom',PIDT_MAX:'PIDT_MAX', };
declare class PlatformInterfaceData { 
	DataName: string;
	Type: EPlatformInterfaceDataType;
	IntValue: number;
	FloatValue: number;
	StringValue: string;
	ObjectValue: UObject;
	clone() : PlatformInterfaceData;
	static C(Other: UObject | any): PlatformInterfaceData;
}

declare class PlatformInterfaceDelegateResult { 
	bSuccessful: boolean;
	Data: PlatformInterfaceData;
	clone() : PlatformInterfaceDelegateResult;
	static C(Other: UObject | any): PlatformInterfaceDelegateResult;
}

declare class DelegateArray { 
	Delegates: UnrealEngineDelegate<(Result: PlatformInterfaceDelegateResult) => void>[];
	clone() : DelegateArray;
	static C(Other: UObject | any): DelegateArray;
}

declare class PlatformInterfaceBase extends UObject { 
	AllDelegates: DelegateArray[];
	static Load(ResourceName: string): PlatformInterfaceBase;
	static Find(Outer: UObject, ResourceName: string): PlatformInterfaceBase;
	static GetDefaultObject(): PlatformInterfaceBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformInterfaceBase;
	static C(Other: UObject | any): PlatformInterfaceBase;
}

declare class CloudStorageBase extends PlatformInterfaceBase { 
	LocalCloudFiles: string[];
	bSuppressDelegateCalls: boolean;
	static Load(ResourceName: string): CloudStorageBase;
	static Find(Outer: UObject, ResourceName: string): CloudStorageBase;
	static GetDefaultObject(): CloudStorageBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CloudStorageBase;
	static C(Other: UObject | any): CloudStorageBase;
}

declare class CollisionResponseTemplate { 
	Name: string;
	CollisionEnabled: ECollisionEnabled;
	bCanModify: boolean;
	ObjectTypeName: string;
	CustomResponses: ResponseChannel[];
	HelpMessage: string;
	clone() : CollisionResponseTemplate;
	static C(Other: UObject | any): CollisionResponseTemplate;
}

declare class CustomChannelSetup { 
	Channel: ECollisionChannel;
	DefaultResponse: ECollisionResponse;
	bTraceType: boolean;
	bStaticObject: boolean;
	Name: string;
	clone() : CustomChannelSetup;
	static C(Other: UObject | any): CustomChannelSetup;
}

declare class CustomProfile { 
	Name: string;
	CustomResponses: ResponseChannel[];
	clone() : CustomProfile;
	static C(Other: UObject | any): CustomProfile;
}

declare class Redirector { 
	OldName: string;
	NewName: string;
	clone() : Redirector;
	static C(Other: UObject | any): Redirector;
}

declare class CollisionProfile extends DeveloperSettings { 
	Profiles: CollisionResponseTemplate[];
	DefaultChannelResponses: CustomChannelSetup[];
	EditProfiles: CustomProfile[];
	ProfileRedirects: Redirector[];
	CollisionChannelRedirects: Redirector[];
	static Load(ResourceName: string): CollisionProfile;
	static Find(Outer: UObject, ResourceName: string): CollisionProfile;
	static GetDefaultObject(): CollisionProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CollisionProfile;
	static C(Other: UObject | any): CollisionProfile;
}

declare class BlueprintComponentDelegateBinding { 
	ComponentPropertyName: string;
	DelegatePropertyName: string;
	FunctionNameToBind: string;
	clone() : BlueprintComponentDelegateBinding;
	static C(Other: UObject | any): BlueprintComponentDelegateBinding;
}

declare class ComponentDelegateBinding extends DynamicBlueprintBinding { 
	ComponentDelegateBindings: BlueprintComponentDelegateBinding[];
	static Load(ResourceName: string): ComponentDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): ComponentDelegateBinding;
	static GetDefaultObject(): ComponentDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentDelegateBinding;
	static C(Other: UObject | any): ComponentDelegateBinding;
}

declare class ComponentElementCounterInterface extends UObject { 
	static Load(ResourceName: string): ComponentElementCounterInterface;
	static Find(Outer: UObject, ResourceName: string): ComponentElementCounterInterface;
	static GetDefaultObject(): ComponentElementCounterInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentElementCounterInterface;
	static C(Other: UObject | any): ComponentElementCounterInterface;
}

declare class ComponentElementHierarchyInterface extends UObject { 
	static Load(ResourceName: string): ComponentElementHierarchyInterface;
	static Find(Outer: UObject, ResourceName: string): ComponentElementHierarchyInterface;
	static GetDefaultObject(): ComponentElementHierarchyInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentElementHierarchyInterface;
	static C(Other: UObject | any): ComponentElementHierarchyInterface;
}

declare class ComponentElementObjectInterface extends UObject { 
	static Load(ResourceName: string): ComponentElementObjectInterface;
	static Find(Outer: UObject, ResourceName: string): ComponentElementObjectInterface;
	static GetDefaultObject(): ComponentElementObjectInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComponentElementObjectInterface;
	static C(Other: UObject | any): ComponentElementObjectInterface;
}

declare class ActorComponentInstanceDataTransientOuter extends UObject { 
	static Load(ResourceName: string): ActorComponentInstanceDataTransientOuter;
	static Find(Outer: UObject, ResourceName: string): ActorComponentInstanceDataTransientOuter;
	static GetDefaultObject(): ActorComponentInstanceDataTransientOuter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorComponentInstanceDataTransientOuter;
	static C(Other: UObject | any): ActorComponentInstanceDataTransientOuter;
}

declare class CompositeCurveTable extends CurveTable { 
	ParentTables: CurveTable[];
	OldParentTables: CurveTable[];
	static Load(ResourceName: string): CompositeCurveTable;
	static Find(Outer: UObject, ResourceName: string): CompositeCurveTable;
	static GetDefaultObject(): CompositeCurveTable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositeCurveTable;
	static C(Other: UObject | any): CompositeCurveTable;
}

declare class CompositeDataTable extends DataTable { 
	ParentTables: DataTable[];
	OldParentTables: DataTable[];
	static Load(ResourceName: string): CompositeDataTable;
	static Find(Outer: UObject, ResourceName: string): CompositeDataTable;
	static GetDefaultObject(): CompositeDataTable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositeDataTable;
	static C(Other: UObject | any): CompositeDataTable;
}

declare class ConstraintInstanceBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): ConstraintInstanceBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): ConstraintInstanceBlueprintLibrary;
	static GetDefaultObject(): ConstraintInstanceBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConstraintInstanceBlueprintLibrary;
	static SetProjectionParams(Accessor?: ConstraintInstanceAccessor,bEnableProjection?: boolean,ProjectionLinearAlpha?: number,ProjectionAngularAlpha?: number): {Accessor: ConstraintInstanceAccessor};
	static SetParentDominates(Accessor?: ConstraintInstanceAccessor,bParentDominates?: boolean): {Accessor: ConstraintInstanceAccessor};
	static SetOrientationDriveTwistAndSwing(Accessor?: ConstraintInstanceAccessor,bEnableTwistDrive?: boolean,bEnableSwingDrive?: boolean): {Accessor: ConstraintInstanceAccessor};
	static SetOrientationDriveSLERP(Accessor?: ConstraintInstanceAccessor,bEnableSLERP?: boolean): {Accessor: ConstraintInstanceAccessor};
	static SetLinearVelocityTarget(Accessor?: ConstraintInstanceAccessor,InVelTarget?: Vector): {Accessor: ConstraintInstanceAccessor};
	static SetLinearVelocityDrive(Accessor?: ConstraintInstanceAccessor,bEnableDriveX?: boolean,bEnableDriveY?: boolean,bEnableDriveZ?: boolean): {Accessor: ConstraintInstanceAccessor};
	static SetLinearSoftLimitParams(Accessor?: ConstraintInstanceAccessor,bSoftLinearLimit?: boolean,LinearLimitStiffness?: number,LinearLimitDamping?: number,LinearLimitRestitution?: number,LinearLimitContactDistance?: number): {Accessor: ConstraintInstanceAccessor};
	static SetLinearPositionTarget(Accessor?: ConstraintInstanceAccessor,InPosTarget?: Vector): {Accessor: ConstraintInstanceAccessor};
	static SetLinearPositionDrive(Accessor?: ConstraintInstanceAccessor,bEnableDriveX?: boolean,bEnableDriveY?: boolean,bEnableDriveZ?: boolean): {Accessor: ConstraintInstanceAccessor};
	static SetLinearPlasticity(Accessor?: ConstraintInstanceAccessor,bLinearPlasticity?: boolean,LinearPlasticityThreshold?: number,PlasticityType?: EConstraintPlasticityType): {Accessor: ConstraintInstanceAccessor};
	static SetLinearLimits(Accessor?: ConstraintInstanceAccessor,XMotion?: ELinearConstraintMotion,YMotion?: ELinearConstraintMotion,ZMotion?: ELinearConstraintMotion,Limit?: number): {Accessor: ConstraintInstanceAccessor};
	static SetLinearDriveParams(Accessor?: ConstraintInstanceAccessor,PositionStrength?: number,VelocityStrength?: number,InForceLimit?: number): {Accessor: ConstraintInstanceAccessor};
	static SetLinearBreakable(Accessor?: ConstraintInstanceAccessor,bLinearBreakable?: boolean,LinearBreakThreshold?: number): {Accessor: ConstraintInstanceAccessor};
	static SetDisableCollision(Accessor?: ConstraintInstanceAccessor,bDisableCollision?: boolean): {Accessor: ConstraintInstanceAccessor};
	static SetContactTransferScale(Accessor?: ConstraintInstanceAccessor,ContactTransferScale?: number): {Accessor: ConstraintInstanceAccessor};
	static SetAngularVelocityTarget(Accessor?: ConstraintInstanceAccessor,InVelTarget?: Vector): {Accessor: ConstraintInstanceAccessor};
	static SetAngularVelocityDriveTwistAndSwing(Accessor?: ConstraintInstanceAccessor,bEnableTwistDrive?: boolean,bEnableSwingDrive?: boolean): {Accessor: ConstraintInstanceAccessor};
	static SetAngularVelocityDriveSLERP(Accessor?: ConstraintInstanceAccessor,bEnableSLERP?: boolean): {Accessor: ConstraintInstanceAccessor};
	static SetAngularSoftTwistLimitParams(Accessor?: ConstraintInstanceAccessor,bSoftTwistLimit?: boolean,TwistLimitStiffness?: number,TwistLimitDamping?: number,TwistLimitRestitution?: number,TwistLimitContactDistance?: number): {Accessor: ConstraintInstanceAccessor};
	static SetAngularSoftSwingLimitParams(Accessor?: ConstraintInstanceAccessor,bSoftSwingLimit?: boolean,SwingLimitStiffness?: number,SwingLimitDamping?: number,SwingLimitRestitution?: number,SwingLimitContactDistance?: number): {Accessor: ConstraintInstanceAccessor};
	static SetAngularPlasticity(Accessor?: ConstraintInstanceAccessor,bAngularPlasticity?: boolean,AngularPlasticityThreshold?: number): {Accessor: ConstraintInstanceAccessor};
	static SetAngularOrientationTarget(Accessor?: ConstraintInstanceAccessor,InPosTarget?: Rotator): {Accessor: ConstraintInstanceAccessor};
	static SetAngularLimits(Accessor?: ConstraintInstanceAccessor,Swing1MotionType?: EAngularConstraintMotion,Swing1LimitAngle?: number,Swing2MotionType?: EAngularConstraintMotion,Swing2LimitAngle?: number,TwistMotionType?: EAngularConstraintMotion,TwistLimitAngle?: number): {Accessor: ConstraintInstanceAccessor};
	static SetAngularDriveParams(Accessor?: ConstraintInstanceAccessor,PositionStrength?: number,VelocityStrength?: number,InForceLimit?: number): {Accessor: ConstraintInstanceAccessor};
	static SetAngularDriveMode(Accessor?: ConstraintInstanceAccessor,DriveMode?: EAngularDriveMode): {Accessor: ConstraintInstanceAccessor};
	static SetAngularBreakable(Accessor?: ConstraintInstanceAccessor,bAngularBreakable?: boolean,AngularBreakThreshold?: number): {Accessor: ConstraintInstanceAccessor};
	static GetProjectionParams(Accessor?: ConstraintInstanceAccessor,bEnableProjection?: boolean,ProjectionLinearAlpha?: number,ProjectionAngularAlpha?: number): {Accessor: ConstraintInstanceAccessor, bEnableProjection: boolean, ProjectionLinearAlpha: number, ProjectionAngularAlpha: number};
	static GetParentDominates(Accessor?: ConstraintInstanceAccessor): {Accessor: ConstraintInstanceAccessor, $: boolean};
	static GetOrientationDriveTwistAndSwing(Accessor?: ConstraintInstanceAccessor,bOutEnableTwistDrive?: boolean,bOutEnableSwingDrive?: boolean): {Accessor: ConstraintInstanceAccessor, bOutEnableTwistDrive: boolean, bOutEnableSwingDrive: boolean};
	static GetOrientationDriveSLERP(Accessor?: ConstraintInstanceAccessor,bOutEnableSLERP?: boolean): {Accessor: ConstraintInstanceAccessor, bOutEnableSLERP: boolean};
	static GetLinearVelocityTarget(Accessor?: ConstraintInstanceAccessor,OutVelTarget?: Vector): {Accessor: ConstraintInstanceAccessor, OutVelTarget: Vector};
	static GetLinearVelocityDrive(Accessor?: ConstraintInstanceAccessor,bOutEnableDriveX?: boolean,bOutEnableDriveY?: boolean,bOutEnableDriveZ?: boolean): {Accessor: ConstraintInstanceAccessor, bOutEnableDriveX: boolean, bOutEnableDriveY: boolean, bOutEnableDriveZ: boolean};
	static GetLinearSoftLimitParams(Accessor?: ConstraintInstanceAccessor,bSoftLinearLimit?: boolean,LinearLimitStiffness?: number,LinearLimitDamping?: number,LinearLimitRestitution?: number,LinearLimitContactDistance?: number): {Accessor: ConstraintInstanceAccessor, bSoftLinearLimit: boolean, LinearLimitStiffness: number, LinearLimitDamping: number, LinearLimitRestitution: number, LinearLimitContactDistance: number};
	static GetLinearPositionTarget(Accessor?: ConstraintInstanceAccessor,OutPosTarget?: Vector): {Accessor: ConstraintInstanceAccessor, OutPosTarget: Vector};
	static GetLinearPositionDrive(Accessor?: ConstraintInstanceAccessor,bOutEnableDriveX?: boolean,bOutEnableDriveY?: boolean,bOutEnableDriveZ?: boolean): {Accessor: ConstraintInstanceAccessor, bOutEnableDriveX: boolean, bOutEnableDriveY: boolean, bOutEnableDriveZ: boolean};
	static GetLinearPlasticity(Accessor?: ConstraintInstanceAccessor,bLinearPlasticity?: boolean,LinearPlasticityThreshold?: number,PlasticityType?: EConstraintPlasticityType): {Accessor: ConstraintInstanceAccessor, bLinearPlasticity: boolean, LinearPlasticityThreshold: number, PlasticityType: EConstraintPlasticityType};
	static GetLinearLimits(Accessor?: ConstraintInstanceAccessor,XMotion?: ELinearConstraintMotion,YMotion?: ELinearConstraintMotion,ZMotion?: ELinearConstraintMotion,Limit?: number): {Accessor: ConstraintInstanceAccessor, XMotion: ELinearConstraintMotion, YMotion: ELinearConstraintMotion, ZMotion: ELinearConstraintMotion, Limit: number};
	static GetLinearDriveParams(Accessor?: ConstraintInstanceAccessor,OutPositionStrength?: number,OutVelocityStrength?: number,OutForceLimit?: number): {Accessor: ConstraintInstanceAccessor, OutPositionStrength: number, OutVelocityStrength: number, OutForceLimit: number};
	static GetLinearBreakable(Accessor?: ConstraintInstanceAccessor,bLinearBreakable?: boolean,LinearBreakThreshold?: number): {Accessor: ConstraintInstanceAccessor, bLinearBreakable: boolean, LinearBreakThreshold: number};
	static GetDisableCollsion(Accessor?: ConstraintInstanceAccessor): {Accessor: ConstraintInstanceAccessor, $: boolean};
	static GetContactTransferScale(Accessor?: ConstraintInstanceAccessor,ContactTransferScale?: number): {Accessor: ConstraintInstanceAccessor, ContactTransferScale: number};
	static GetAttachedBodyNames(Accessor?: ConstraintInstanceAccessor,ParentBody?: string,ChildBody?: string): {Accessor: ConstraintInstanceAccessor, ParentBody: string, ChildBody: string};
	static GetAngularVelocityTarget(Accessor?: ConstraintInstanceAccessor,OutVelTarget?: Vector): {Accessor: ConstraintInstanceAccessor, OutVelTarget: Vector};
	static GetAngularVelocityDriveTwistAndSwing(Accessor?: ConstraintInstanceAccessor,bOutEnableTwistDrive?: boolean,bOutEnableSwingDrive?: boolean): {Accessor: ConstraintInstanceAccessor, bOutEnableTwistDrive: boolean, bOutEnableSwingDrive: boolean};
	static GetAngularVelocityDriveSLERP(Accessor?: ConstraintInstanceAccessor,bOutEnableSLERP?: boolean): {Accessor: ConstraintInstanceAccessor, bOutEnableSLERP: boolean};
	static GetAngularSoftTwistLimitParams(Accessor?: ConstraintInstanceAccessor,bSoftTwistLimit?: boolean,TwistLimitStiffness?: number,TwistLimitDamping?: number,TwistLimitRestitution?: number,TwistLimitContactDistance?: number): {Accessor: ConstraintInstanceAccessor, bSoftTwistLimit: boolean, TwistLimitStiffness: number, TwistLimitDamping: number, TwistLimitRestitution: number, TwistLimitContactDistance: number};
	static GetAngularSoftSwingLimitParams(Accessor?: ConstraintInstanceAccessor,bSoftSwingLimit?: boolean,SwingLimitStiffness?: number,SwingLimitDamping?: number,SwingLimitRestitution?: number,SwingLimitContactDistance?: number): {Accessor: ConstraintInstanceAccessor, bSoftSwingLimit: boolean, SwingLimitStiffness: number, SwingLimitDamping: number, SwingLimitRestitution: number, SwingLimitContactDistance: number};
	static GetAngularPlasticity(Accessor?: ConstraintInstanceAccessor,bAngularPlasticity?: boolean,AngularPlasticityThreshold?: number): {Accessor: ConstraintInstanceAccessor, bAngularPlasticity: boolean, AngularPlasticityThreshold: number};
	static GetAngularOrientationTarget(Accessor?: ConstraintInstanceAccessor,OutPosTarget?: Rotator): {Accessor: ConstraintInstanceAccessor, OutPosTarget: Rotator};
	static GetAngularLimits(Accessor?: ConstraintInstanceAccessor,Swing1MotionType?: EAngularConstraintMotion,Swing1LimitAngle?: number,Swing2MotionType?: EAngularConstraintMotion,Swing2LimitAngle?: number,TwistMotionType?: EAngularConstraintMotion,TwistLimitAngle?: number): {Accessor: ConstraintInstanceAccessor, Swing1MotionType: EAngularConstraintMotion, Swing1LimitAngle: number, Swing2MotionType: EAngularConstraintMotion, Swing2LimitAngle: number, TwistMotionType: EAngularConstraintMotion, TwistLimitAngle: number};
	static GetAngularDriveParams(Accessor?: ConstraintInstanceAccessor,OutPositionStrength?: number,OutVelocityStrength?: number,OutForceLimit?: number): {Accessor: ConstraintInstanceAccessor, OutPositionStrength: number, OutVelocityStrength: number, OutForceLimit: number};
	static GetAngularDriveMode(Accessor?: ConstraintInstanceAccessor,OutDriveMode?: EAngularDriveMode): {Accessor: ConstraintInstanceAccessor, OutDriveMode: EAngularDriveMode};
	static GetAngularBreakable(Accessor?: ConstraintInstanceAccessor,bAngularBreakable?: boolean,AngularBreakThreshold?: number): {Accessor: ConstraintInstanceAccessor, bAngularBreakable: boolean, AngularBreakThreshold: number};
	static CopyParams(Accessor?: ConstraintInstanceAccessor,SourceAccessor?: ConstraintInstanceAccessor,bKeepPosition?: boolean,bKeepRotation?: boolean): {Accessor: ConstraintInstanceAccessor, SourceAccessor: ConstraintInstanceAccessor};
	static C(Other: UObject | any): ConstraintInstanceBlueprintLibrary;
}

declare class ControlChannel extends Channel { 
	static Load(ResourceName: string): ControlChannel;
	static Find(Outer: UObject, ResourceName: string): ControlChannel;
	static GetDefaultObject(): ControlChannel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ControlChannel;
	static C(Other: UObject | any): ControlChannel;
}

declare class StreamingSettings extends DeveloperSettings { 
	AsyncLoadingThreadEnabled: boolean;
	WarnIfTimeLimitExceeded: boolean;
	TimeLimitExceededMultiplier: number;
	TimeLimitExceededMinTime: number;
	MinBulkDataSizeForAsyncLoading: number;
	UseBackgroundLevelStreaming: boolean;
	AsyncLoadingUseFullTimeLimit: boolean;
	AsyncLoadingTimeLimit: number;
	PriorityAsyncLoadingExtraTime: number;
	LevelStreamingActorsUpdateTimeLimit: number;
	PriorityLevelStreamingActorsUpdateExtraTime: number;
	LevelStreamingComponentsRegistrationGranularity: number;
	LevelStreamingAddPrimitiveGranularity: number;
	LevelStreamingUnregisterComponentsTimeLimit: number;
	LevelStreamingComponentsUnregistrationGranularity: number;
	FlushStreamingOnExit: boolean;
	EventDrivenLoaderEnabled: boolean;
	static Load(ResourceName: string): StreamingSettings;
	static Find(Outer: UObject, ResourceName: string): StreamingSettings;
	static GetDefaultObject(): StreamingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StreamingSettings;
	static C(Other: UObject | any): StreamingSettings;
}

declare class GarbageCollectionSettings extends DeveloperSettings { 
	TimeBetweenPurgingPendingKillObjects: number;
	FlushStreamingOnGC: boolean;
	AllowParallelGC: boolean;
	IncrementalBeginDestroyEnabled: boolean;
	MultithreadedDestructionEnabled: boolean;
	CreateGCClusters: boolean;
	AssetClusteringEnabled: boolean;
	ActorClusteringEnabled: boolean;
	BlueprintClusteringEnabled: boolean;
	UseDisregardForGCOnDedicatedServers: boolean;
	VerifyGCObjectNames: boolean;
	VerifyUObjectsAreNotFGCObjects: boolean;
	PendingKillEnabled: boolean;
	MinGCClusterSize: number;
	NumRetriesBeforeForcingGC: number;
	MaxObjectsNotConsideredByGC: number;
	SizeOfPermanentObjectPool: number;
	MaxObjectsInGame: number;
	MaxObjectsInEditor: number;
	static Load(ResourceName: string): GarbageCollectionSettings;
	static Find(Outer: UObject, ResourceName: string): GarbageCollectionSettings;
	static GetDefaultObject(): GarbageCollectionSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GarbageCollectionSettings;
	static C(Other: UObject | any): GarbageCollectionSettings;
}

declare class CullDistanceSizePair { 
	Size: number;
	CullDistance: number;
	clone() : CullDistanceSizePair;
	static C(Other: UObject | any): CullDistanceSizePair;
}

declare class CullDistanceVolume extends Volume { 
	CullDistances: CullDistanceSizePair[];
	bEnabled: boolean;
	static GetDefaultObject(): CullDistanceVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CullDistanceVolume;
	static C(Other: UObject | any): CullDistanceVolume;
}

declare class CurveEdPresetCurve extends UObject { 
	static Load(ResourceName: string): CurveEdPresetCurve;
	static Find(Outer: UObject, ResourceName: string): CurveEdPresetCurve;
	static GetDefaultObject(): CurveEdPresetCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEdPresetCurve;
	static C(Other: UObject | any): CurveEdPresetCurve;
}

declare class AnimationCurveIdentifierExtensions extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AnimationCurveIdentifierExtensions;
	static Find(Outer: UObject, ResourceName: string): AnimationCurveIdentifierExtensions;
	static GetDefaultObject(): AnimationCurveIdentifierExtensions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationCurveIdentifierExtensions;
	static IsValid(Identifier?: AnimationCurveIdentifier): {Identifier: AnimationCurveIdentifier, $: boolean};
	static GetType(Identifier?: AnimationCurveIdentifier): {Identifier: AnimationCurveIdentifier, $: ERawCurveTrackTypes};
	static GetTransformChildCurveIdentifier(InOutIdentifier?: AnimationCurveIdentifier,Channel?: ETransformCurveChannel,Axis?: EVectorCurveChannel): {InOutIdentifier: AnimationCurveIdentifier, $: boolean};
	static GetName(Identifier?: AnimationCurveIdentifier): {Identifier: AnimationCurveIdentifier, $: string};
	static GetCurveIdentifiers(InSkeleton: Skeleton,CurveType: ERawCurveTrackTypes): AnimationCurveIdentifier[];
	static GetCurveIdentifier(InSkeleton: Skeleton,Name: string,CurveType: ERawCurveTrackTypes): AnimationCurveIdentifier;
	static FindCurveIdentifier(InSkeleton: Skeleton,Name: string,CurveType: ERawCurveTrackTypes): AnimationCurveIdentifier;
	static C(Other: UObject | any): AnimationCurveIdentifierExtensions;
}

declare class NamedCurveValue { 
	Name: string;
	Value: number;
	clone() : NamedCurveValue;
	static C(Other: UObject | any): NamedCurveValue;
}

declare class CurveSourceInterface extends Interface { 
	static Load(ResourceName: string): CurveSourceInterface;
	static Find(Outer: UObject, ResourceName: string): CurveSourceInterface;
	static GetDefaultObject(): CurveSourceInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveSourceInterface;
	GetCurveValue(CurveName: string): number;
	GetCurves(OutValues?: NamedCurveValue[]): {OutValues: NamedCurveValue[]};
	GetBindingName(): string;
	static C(Other: UObject | any): CurveSourceInterface;
}

declare class AssetBundleEntry { 
	BundleName: string;
	BundleAssets: SoftObjectPath[];
	clone() : AssetBundleEntry;
	static C(Other: UObject | any): AssetBundleEntry;
}

declare class AssetBundleData { 
	Bundles: AssetBundleEntry[];
	clone() : AssetBundleData;
	static C(Other: UObject | any): AssetBundleData;
}

declare class PrimaryDataAsset extends DataAsset { 
	AssetBundleData: AssetBundleData;
	static Load(ResourceName: string): PrimaryDataAsset;
	static Find(Outer: UObject, ResourceName: string): PrimaryDataAsset;
	static GetDefaultObject(): PrimaryDataAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimaryDataAsset;
	static C(Other: UObject | any): PrimaryDataAsset;
}

declare class DataDrivenCVarEngineSubsystem extends EngineSubsystem { 
	OnDataDrivenCVarDelegate: UnrealEngineMulticastDelegate<(CVarName: string) => void>;
	static Load(ResourceName: string): DataDrivenCVarEngineSubsystem;
	static Find(Outer: UObject, ResourceName: string): DataDrivenCVarEngineSubsystem;
	static GetDefaultObject(): DataDrivenCVarEngineSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataDrivenCVarEngineSubsystem;
	static C(Other: UObject | any): DataDrivenCVarEngineSubsystem;
}

declare type FDataDrivenCVarType = 'CVarFloat' | 'CVarInt' | 'CVarBool' | 'FDataDrivenCVarType_MAX';
declare var FDataDrivenCVarType : { CVarFloat:'CVarFloat',CVarInt:'CVarInt',CVarBool:'CVarBool',FDataDrivenCVarType_MAX:'FDataDrivenCVarType_MAX', };
declare class DataDrivenConsoleVariable { 
	Type: FDataDrivenCVarType;
	Name: string;
	Tooltip: string;
	DefaultValueFloat: number;
	DefaultValueInt: number;
	DefaultValueBool: boolean;
	clone() : DataDrivenConsoleVariable;
	static C(Other: UObject | any): DataDrivenConsoleVariable;
}

declare class DataDrivenConsoleVariableSettings extends DeveloperSettings { 
	CVarsArray: DataDrivenConsoleVariable[];
	static Load(ResourceName: string): DataDrivenConsoleVariableSettings;
	static Find(Outer: UObject, ResourceName: string): DataDrivenConsoleVariableSettings;
	static GetDefaultObject(): DataDrivenConsoleVariableSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataDrivenConsoleVariableSettings;
	static C(Other: UObject | any): DataDrivenConsoleVariableSettings;
}

declare class DataLayerSubsystem extends WorldSubsystem { 
	OnDataLayerRuntimeStateChanged: UnrealEngineMulticastDelegate<(DataLayer: DataLayer, State: EDataLayerRuntimeState) => void>;
	static Load(ResourceName: string): DataLayerSubsystem;
	static Find(Outer: UObject, ResourceName: string): DataLayerSubsystem;
	static GetDefaultObject(): DataLayerSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataLayerSubsystem;
	SetDataLayerStateByLabel(InDataLayerLabel: string,InState: EDataLayerState): void;
	SetDataLayerState(InDataLayer: ActorDataLayer,InState: EDataLayerState): void;
	SetDataLayerRuntimeStateByLabel(InDataLayerLabel: string,InState: EDataLayerRuntimeState,bInIsRecursive: boolean): void;
	SetDataLayerRuntimeState(InDataLayer: ActorDataLayer,InState: EDataLayerRuntimeState,bInIsRecursive: boolean): void;
	GetLoadedDataLayerNames(): any;
	GetDataLayerStateByLabel(InDataLayerLabel: string): EDataLayerState;
	GetDataLayerState(InDataLayer: ActorDataLayer): EDataLayerState;
	GetDataLayerRuntimeStateByLabel(InDataLayerLabel: string): EDataLayerRuntimeState;
	GetDataLayerRuntimeState(InDataLayer: ActorDataLayer): EDataLayerRuntimeState;
	GetDataLayerFromName(InDataLayerName: string): DataLayer;
	GetDataLayerFromLabel(InDataLayerLabel: string): DataLayer;
	GetDataLayerEffectiveRuntimeStateByLabel(InDataLayerLabel: string): EDataLayerRuntimeState;
	GetDataLayerEffectiveRuntimeState(InDataLayer: ActorDataLayer): EDataLayerRuntimeState;
	GetDataLayer(InDataLayer: ActorDataLayer): DataLayer;
	GetActiveDataLayerNames(): any;
	static C(Other: UObject | any): DataLayerSubsystem;
}

declare class DataTableFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): DataTableFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): DataTableFunctionLibrary;
	static GetDefaultObject(): DataTableFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTableFunctionLibrary;
	static GetDataTableRowNames(Table: DataTable,OutRowNames?: string[]): {OutRowNames: string[]};
	static GetDataTableRowFromName(Table: DataTable,RowName: string,OutRow?: TableRowBase): {OutRow: TableRowBase, $: boolean};
	static GetDataTableColumnAsString(DataTable: DataTable,PropertyName: string): string[];
	static FillDataTableFromJSONString(DataTable: DataTable,JsonString: string): boolean;
	static FillDataTableFromJSONFile(DataTable: DataTable,JSONFilePath: string,ImportRowStruct: ScriptStruct): boolean;
	static FillDataTableFromCSVString(DataTable: DataTable,CSVString: string): boolean;
	static FillDataTableFromCSVFile(DataTable: DataTable,CSVFilePath: string): boolean;
	static EvaluateCurveTableRow(CurveTable: CurveTable,RowName: string,InXY: number,OutResult?: EEvaluateCurveTableResult,OutXY?: number,ContextString?: string): {OutResult: EEvaluateCurveTableResult, OutXY: number};
	static DoesDataTableRowExist(Table: DataTable,RowName: string): boolean;
	static C(Other: UObject | any): DataTableFunctionLibrary;
}

declare class DebugCameraControllerSettingsViewModeIndex { 
	ViewModeIndex: EViewModeIndex;
	clone() : DebugCameraControllerSettingsViewModeIndex;
	static C(Other: UObject | any): DebugCameraControllerSettingsViewModeIndex;
}

declare class DebugCameraControllerSettings extends DeveloperSettings { 
	CycleViewModes: DebugCameraControllerSettingsViewModeIndex[];
	static Load(ResourceName: string): DebugCameraControllerSettings;
	static Find(Outer: UObject, ResourceName: string): DebugCameraControllerSettings;
	static GetDefaultObject(): DebugCameraControllerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugCameraControllerSettings;
	static C(Other: UObject | any): DebugCameraControllerSettings;
}

declare class DebugDrawService extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): DebugDrawService;
	static Find(Outer: UObject, ResourceName: string): DebugDrawService;
	static GetDefaultObject(): DebugDrawService;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugDrawService;
	static C(Other: UObject | any): DebugDrawService;
}

declare class DecalActor extends Actor { 
	Decal: DecalComponent;
	ArrowComponent: ArrowComponent;
	SpriteComponent: BillboardComponent;
	BoxComponent: BoxComponent;
	static GetDefaultObject(): DecalActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DecalActor;
	SetDecalMaterial(NewDecalMaterial: MaterialInterface): void;
	GetDecalMaterial(): MaterialInterface;
	CreateDynamicMaterialInstance(): MaterialInstanceDynamic;
	static C(Other: UObject | any): DecalActor;
}

declare class DemoNetConnection extends NetConnection { 
	static Load(ResourceName: string): DemoNetConnection;
	static Find(Outer: UObject, ResourceName: string): DemoNetConnection;
	static GetDefaultObject(): DemoNetConnection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DemoNetConnection;
	static C(Other: UObject | any): DemoNetConnection;
}

declare class PendingNetGame extends UObject { 
	NetDriver: NetDriver;
	DemoNetDriver: DemoNetDriver;
	static Load(ResourceName: string): PendingNetGame;
	static Find(Outer: UObject, ResourceName: string): PendingNetGame;
	static GetDefaultObject(): PendingNetGame;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PendingNetGame;
	static C(Other: UObject | any): PendingNetGame;
}

declare class DemoPendingNetGame extends PendingNetGame { 
	static Load(ResourceName: string): DemoPendingNetGame;
	static Find(Outer: UObject, ResourceName: string): DemoPendingNetGame;
	static GetDefaultObject(): DemoPendingNetGame;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DemoPendingNetGame;
	static C(Other: UObject | any): DemoPendingNetGame;
}

declare class DestructibleInterface extends Interface { 
	static Load(ResourceName: string): DestructibleInterface;
	static Find(Outer: UObject, ResourceName: string): DestructibleInterface;
	static GetDefaultObject(): DestructibleInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestructibleInterface;
	static C(Other: UObject | any): DestructibleInterface;
}

declare class TextureLODGroup { 
	Group: TextureGroup;
	LODBias: number;
	LODBias_Smaller: number;
	LODBias_Smallest: number;
	NumStreamedMips: number;
	MipGenSettings: TextureMipGenSettings;
	MinLODSize: number;
	MaxLODSize: number;
	MaxLODSize_Smaller: number;
	MaxLODSize_Smallest: number;
	MaxLODSize_VT: number;
	OptionalLODBias: number;
	OptionalMaxLODSize: number;
	MinMagFilter: string;
	MipFilter: string;
	MipLoadOptions: ETextureMipLoadOptions;
	HighPriorityLoad: boolean;
	DuplicateNonOptionalMips: boolean;
	Downscale: number;
	DownscaleOptions: ETextureDownscaleOptions;
	VirtualTextureTileCountBias: number;
	VirtualTextureTileSizeBias: number;
	LossyCompressionAmount: ETextureLossyCompressionAmount;
	clone() : TextureLODGroup;
	static C(Other: UObject | any): TextureLODGroup;
}

declare class TextureLODSettings extends UObject { 
	TextureLODGroups: TextureLODGroup[];
	static Load(ResourceName: string): TextureLODSettings;
	static Find(Outer: UObject, ResourceName: string): TextureLODSettings;
	static GetDefaultObject(): TextureLODSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureLODSettings;
	static C(Other: UObject | any): TextureLODSettings;
}

declare class DPMatchingIfCondition { 
	Operator: string;
	Arg1: string;
	Arg2: string;
	clone() : DPMatchingIfCondition;
	static C(Other: UObject | any): DPMatchingIfCondition;
}

declare class DPMatchingRulestructBase { 
	RuleName: string;
	IfConditions: DPMatchingIfCondition[];
	AppendFragments: string;
	SetUserVar: string;
	clone() : DPMatchingRulestructBase;
	static C(Other: UObject | any): DPMatchingRulestructBase;
}

declare class DPMatchingRulestructA extends DPMatchingRulestructBase { 
	OnTrue: DPMatchingRulestructBase[];
	OnFalse: DPMatchingRulestructBase[];
	clone() : DPMatchingRulestructA;
	static C(Other: UObject | any): DPMatchingRulestructA;
}

declare class DPMatchingRulestructB extends DPMatchingRulestructBase { 
	OnTrue: DPMatchingRulestructA[];
	OnFalse: DPMatchingRulestructA[];
	clone() : DPMatchingRulestructB;
	static C(Other: UObject | any): DPMatchingRulestructB;
}

declare class DPMatchingRulestructC extends DPMatchingRulestructBase { 
	OnTrue: DPMatchingRulestructB[];
	OnFalse: DPMatchingRulestructB[];
	clone() : DPMatchingRulestructC;
	static C(Other: UObject | any): DPMatchingRulestructC;
}

declare class DPMatchingRulestructD extends DPMatchingRulestructBase { 
	OnTrue: DPMatchingRulestructC[];
	OnFalse: DPMatchingRulestructC[];
	clone() : DPMatchingRulestructD;
	static C(Other: UObject | any): DPMatchingRulestructD;
}

declare class DPMatchingRulestructE extends DPMatchingRulestructBase { 
	OnTrue: DPMatchingRulestructD[];
	OnFalse: DPMatchingRulestructD[];
	clone() : DPMatchingRulestructE;
	static C(Other: UObject | any): DPMatchingRulestructE;
}

declare class DPMatchingRulestruct extends DPMatchingRulestructBase { 
	OnTrue: DPMatchingRulestructE[];
	OnFalse: DPMatchingRulestructE[];
	clone() : DPMatchingRulestruct;
	static C(Other: UObject | any): DPMatchingRulestruct;
}

declare class DeviceProfile extends TextureLODSettings { 
	DeviceType: string;
	BaseProfileName: string;
	Parent: DeviceProfile;
	CVars: string[];
	MatchingRules: DPMatchingRulestruct[];
	static Load(ResourceName: string): DeviceProfile;
	static Find(Outer: UObject, ResourceName: string): DeviceProfile;
	static GetDefaultObject(): DeviceProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeviceProfile;
	static C(Other: UObject | any): DeviceProfile;
}

declare class DeviceProfileFragment extends UObject { 
	CVars: string[];
	static Load(ResourceName: string): DeviceProfileFragment;
	static Find(Outer: UObject, ResourceName: string): DeviceProfileFragment;
	static GetDefaultObject(): DeviceProfileFragment;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeviceProfileFragment;
	static C(Other: UObject | any): DeviceProfileFragment;
}

declare class DeviceProfileManager extends UObject { 
	Profiles: DeviceProfile[];
	BackupProfiles: DeviceProfile[];
	static Load(ResourceName: string): DeviceProfileManager;
	static Find(Outer: UObject, ResourceName: string): DeviceProfileManager;
	static GetDefaultObject(): DeviceProfileManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeviceProfileManager;
	static C(Other: UObject | any): DeviceProfileManager;
}

declare class Light extends Actor { 
	LightComponent: LightComponent;
	bEnabled: boolean;
	static GetDefaultObject(): Light;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Light;
	ToggleEnabled(): void;
	SetLightFunctionScale(NewLightFunctionScale: Vector): void;
	SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface): void;
	SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: number): void;
	SetLightColor(NewLightColor: LinearColor): void;
	SetEnabled(bSetEnabled: boolean): void;
	SetCastShadows(bNewValue: boolean): void;
	SetBrightness(NewBrightness: number): void;
	SetAffectTranslucentLighting(bNewValue: boolean): void;
	OnRep_bEnabled(): void;
	IsEnabled(): boolean;
	GetLightColor(): LinearColor;
	GetBrightness(): number;
	static C(Other: UObject | any): Light;
}

declare class DirectionalLight extends Light { 
	ArrowComponent: ArrowComponent;
	DirectionalLightComponent: DirectionalLightComponent;
	static GetDefaultObject(): DirectionalLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectionalLight;
	static C(Other: UObject | any): DirectionalLight;
}

declare class DistributionFloatConstant extends DistributionFloat { 
	Constant: number;
	static Load(ResourceName: string): DistributionFloatConstant;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatConstant;
	static GetDefaultObject(): DistributionFloatConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatConstant;
	static C(Other: UObject | any): DistributionFloatConstant;
}

declare class DistributionFloatConstantCurve extends DistributionFloat { 
	ConstantCurve: InterpCurveFloat;
	static Load(ResourceName: string): DistributionFloatConstantCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatConstantCurve;
	static GetDefaultObject(): DistributionFloatConstantCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatConstantCurve;
	static C(Other: UObject | any): DistributionFloatConstantCurve;
}

declare type DistributionParamMode = 'DPM_Normal' | 'DPM_Abs' | 'DPM_Direct' | 'DPM_MAX';
declare var DistributionParamMode : { DPM_Normal:'DPM_Normal',DPM_Abs:'DPM_Abs',DPM_Direct:'DPM_Direct',DPM_MAX:'DPM_MAX', };
declare class DistributionFloatParameterBase extends DistributionFloatConstant { 
	ParameterName: string;
	MinInput: number;
	MaxInput: number;
	MinOutput: number;
	MaxOutput: number;
	ParamMode: DistributionParamMode;
	static Load(ResourceName: string): DistributionFloatParameterBase;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatParameterBase;
	static GetDefaultObject(): DistributionFloatParameterBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatParameterBase;
	static C(Other: UObject | any): DistributionFloatParameterBase;
}

declare class DistributionFloatParticleParameter extends DistributionFloatParameterBase { 
	static Load(ResourceName: string): DistributionFloatParticleParameter;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatParticleParameter;
	static GetDefaultObject(): DistributionFloatParticleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatParticleParameter;
	static C(Other: UObject | any): DistributionFloatParticleParameter;
}

declare class DistributionFloatUniform extends DistributionFloat { 
	Min: number;
	Max: number;
	static Load(ResourceName: string): DistributionFloatUniform;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatUniform;
	static GetDefaultObject(): DistributionFloatUniform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatUniform;
	static C(Other: UObject | any): DistributionFloatUniform;
}

declare class InterpCurvePointVector2D { 
	InVal: number;
	OutVal: Vector2D;
	ArriveTangent: Vector2D;
	LeaveTangent: Vector2D;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointVector2D;
	static C(Other: UObject | any): InterpCurvePointVector2D;
}

declare class InterpCurveVector2D { 
	Points: InterpCurvePointVector2D[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveVector2D;
	static C(Other: UObject | any): InterpCurveVector2D;
}

declare class DistributionFloatUniformCurve extends DistributionFloat { 
	ConstantCurve: InterpCurveVector2D;
	static Load(ResourceName: string): DistributionFloatUniformCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionFloatUniformCurve;
	static GetDefaultObject(): DistributionFloatUniformCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloatUniformCurve;
	static C(Other: UObject | any): DistributionFloatUniformCurve;
}

declare type EDistributionVectorLockFlags = 'EDVLF_None' | 'EDVLF_XY' | 'EDVLF_XZ' | 'EDVLF_YZ' | 'EDVLF_XYZ' | 'EDVLF_MAX';
declare var EDistributionVectorLockFlags : { EDVLF_None:'EDVLF_None',EDVLF_XY:'EDVLF_XY',EDVLF_XZ:'EDVLF_XZ',EDVLF_YZ:'EDVLF_YZ',EDVLF_XYZ:'EDVLF_XYZ',EDVLF_MAX:'EDVLF_MAX', };
declare class DistributionVectorConstant extends DistributionVector { 
	Constant: Vector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	static Load(ResourceName: string): DistributionVectorConstant;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorConstant;
	static GetDefaultObject(): DistributionVectorConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorConstant;
	static C(Other: UObject | any): DistributionVectorConstant;
}

declare class DistributionVectorConstantCurve extends DistributionVector { 
	ConstantCurve: InterpCurveVector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	static Load(ResourceName: string): DistributionVectorConstantCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorConstantCurve;
	static GetDefaultObject(): DistributionVectorConstantCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorConstantCurve;
	static C(Other: UObject | any): DistributionVectorConstantCurve;
}

declare class DistributionVectorParameterBase extends DistributionVectorConstant { 
	ParameterName: string;
	MinInput: Vector;
	MaxInput: Vector;
	MinOutput: Vector;
	MaxOutput: Vector;
	ParamModes: DistributionParamMode;
	static Load(ResourceName: string): DistributionVectorParameterBase;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorParameterBase;
	static GetDefaultObject(): DistributionVectorParameterBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorParameterBase;
	static C(Other: UObject | any): DistributionVectorParameterBase;
}

declare class DistributionVectorParticleParameter extends DistributionVectorParameterBase { 
	static Load(ResourceName: string): DistributionVectorParticleParameter;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorParticleParameter;
	static GetDefaultObject(): DistributionVectorParticleParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorParticleParameter;
	static C(Other: UObject | any): DistributionVectorParticleParameter;
}

declare type EDistributionVectorMirrorFlags = 'EDVMF_Same' | 'EDVMF_Different' | 'EDVMF_Mirror' | 'EDVMF_MAX';
declare var EDistributionVectorMirrorFlags : { EDVMF_Same:'EDVMF_Same',EDVMF_Different:'EDVMF_Different',EDVMF_Mirror:'EDVMF_Mirror',EDVMF_MAX:'EDVMF_MAX', };
declare class DistributionVectorUniform extends DistributionVector { 
	Max: Vector;
	Min: Vector;
	bLockAxes: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	MirrorFlags: EDistributionVectorMirrorFlags;
	bUseExtremes: boolean;
	static Load(ResourceName: string): DistributionVectorUniform;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorUniform;
	static GetDefaultObject(): DistributionVectorUniform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorUniform;
	static C(Other: UObject | any): DistributionVectorUniform;
}

declare class TwoVectors { 
	v1: Vector;
	v2: Vector;
	clone() : TwoVectors;
	static C(Other: UObject | any): TwoVectors;
}

declare class InterpCurvePointTwoVectors { 
	InVal: number;
	OutVal: TwoVectors;
	ArriveTangent: TwoVectors;
	LeaveTangent: TwoVectors;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointTwoVectors;
	static C(Other: UObject | any): InterpCurvePointTwoVectors;
}

declare class InterpCurveTwoVectors { 
	Points: InterpCurvePointTwoVectors[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveTwoVectors;
	static C(Other: UObject | any): InterpCurveTwoVectors;
}

declare class DistributionVectorUniformCurve extends DistributionVector { 
	ConstantCurve: InterpCurveTwoVectors;
	bLockAxes1: boolean;
	bLockAxes2: boolean;
	LockedAxes: EDistributionVectorLockFlags;
	MirrorFlags: EDistributionVectorMirrorFlags;
	bUseExtremes: boolean;
	static Load(ResourceName: string): DistributionVectorUniformCurve;
	static Find(Outer: UObject, ResourceName: string): DistributionVectorUniformCurve;
	static GetDefaultObject(): DistributionVectorUniformCurve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVectorUniformCurve;
	static C(Other: UObject | any): DistributionVectorUniformCurve;
}

declare class MaterialSpriteElement { 
	Material: MaterialInterface;
	DistanceToOpacityCurve: CurveFloat;
	bSizeIsInScreenSpace: boolean;
	BaseSizeX: number;
	BaseSizeY: number;
	DistanceToSizeCurve: CurveFloat;
	clone() : MaterialSpriteElement;
	static C(Other: UObject | any): MaterialSpriteElement;
}

declare class MaterialBillboardComponent extends PrimitiveComponent { 
	Elements: MaterialSpriteElement[];
	static Load(ResourceName: string): MaterialBillboardComponent;
	static Find(Outer: UObject, ResourceName: string): MaterialBillboardComponent;
	static GetDefaultObject(): MaterialBillboardComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialBillboardComponent;
	SetElements(NewElements: MaterialSpriteElement[]): void;
	AddElement(Material: MaterialInterface,DistanceToOpacityCurve: CurveFloat,bSizeIsInScreenSpace: boolean,BaseSizeX: number,BaseSizeY: number,DistanceToSizeCurve: CurveFloat): void;
	static C(Other: UObject | any): MaterialBillboardComponent;
}

declare class DocumentationActor extends Actor { 
	DocumentLink: string;
	Billboard: MaterialBillboardComponent;
	static GetDefaultObject(): DocumentationActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DocumentationActor;
	static C(Other: UObject | any): DocumentationActor;
}

declare class DPICustomScalingRule extends UObject { 
	static Load(ResourceName: string): DPICustomScalingRule;
	static Find(Outer: UObject, ResourceName: string): DPICustomScalingRule;
	static GetDefaultObject(): DPICustomScalingRule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DPICustomScalingRule;
	static C(Other: UObject | any): DPICustomScalingRule;
}

declare class DrawSphereComponent extends SphereComponent { 
	static Load(ResourceName: string): DrawSphereComponent;
	static Find(Outer: UObject, ResourceName: string): DrawSphereComponent;
	static GetDefaultObject(): DrawSphereComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DrawSphereComponent;
	static C(Other: UObject | any): DrawSphereComponent;
}

declare class GraphNodeContextMenuContext extends UObject { 
	Blueprint: Blueprint;
	Graph: EdGraph;
	UNode: EdGraphNode;
	bIsDebugging: boolean;
	static Load(ResourceName: string): GraphNodeContextMenuContext;
	static Find(Outer: UObject, ResourceName: string): GraphNodeContextMenuContext;
	static GetDefaultObject(): GraphNodeContextMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GraphNodeContextMenuContext;
	static C(Other: UObject | any): GraphNodeContextMenuContext;
}

declare class EdGraphNode_Documentation extends EdGraphNode { 
	Link: string;
	Excerpt: string;
	static Load(ResourceName: string): EdGraphNode_Documentation;
	static Find(Outer: UObject, ResourceName: string): EdGraphNode_Documentation;
	static GetDefaultObject(): EdGraphNode_Documentation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode_Documentation;
	static C(Other: UObject | any): EdGraphNode_Documentation;
}

declare class ViewModeUtils extends UObject { 
	static Load(ResourceName: string): ViewModeUtils;
	static Find(Outer: UObject, ResourceName: string): ViewModeUtils;
	static GetDefaultObject(): ViewModeUtils;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewModeUtils;
	static C(Other: UObject | any): ViewModeUtils;
}

declare class EngineBaseTypes extends UObject { 
	static Load(ResourceName: string): EngineBaseTypes;
	static Find(Outer: UObject, ResourceName: string): EngineBaseTypes;
	static GetDefaultObject(): EngineBaseTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineBaseTypes;
	static C(Other: UObject | any): EngineBaseTypes;
}

declare class EngineElementsLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): EngineElementsLibrary;
	static Find(Outer: UObject, ResourceName: string): EngineElementsLibrary;
	static GetDefaultObject(): EngineElementsLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineElementsLibrary;
	static K2_AcquireEditorSMInstanceElementHandle(ISMComponent: InstancedStaticMeshComponent,InstanceIndex: number,bAllowCreate: boolean): ScriptTypedElementHandle;
	static K2_AcquireEditorObjectElementHandle(UObject: UObject,bAllowCreate: boolean): ScriptTypedElementHandle;
	static K2_AcquireEditorComponentElementHandle(Component: ActorComponent,bAllowCreate: boolean): ScriptTypedElementHandle;
	static K2_AcquireEditorActorElementHandle(Actor: Actor,bAllowCreate: boolean): ScriptTypedElementHandle;
	static C(Other: UObject | any): EngineElementsLibrary;
}

declare class EngineHandlerComponentFactory extends HandlerComponentFactory { 
	static Load(ResourceName: string): EngineHandlerComponentFactory;
	static Find(Outer: UObject, ResourceName: string): EngineHandlerComponentFactory;
	static GetDefaultObject(): EngineHandlerComponentFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineHandlerComponentFactory;
	static C(Other: UObject | any): EngineHandlerComponentFactory;
}

declare class EngineMessage extends LocalMessage { 
	FailedPlaceMessage: string;
	MaxedOutMessage: string;
	EnteredMessage: string;
	LeftMessage: string;
	GlobalNameChange: string;
	SpecEnteredMessage: string;
	NewPlayerMessage: string;
	NewSpecMessage: string;
	static Load(ResourceName: string): EngineMessage;
	static Find(Outer: UObject, ResourceName: string): EngineMessage;
	static GetDefaultObject(): EngineMessage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineMessage;
	static C(Other: UObject | any): EngineMessage;
}

declare class EngineTypes extends UObject { 
	static Load(ResourceName: string): EngineTypes;
	static Find(Outer: UObject, ResourceName: string): EngineTypes;
	static GetDefaultObject(): EngineTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineTypes;
	static C(Other: UObject | any): EngineTypes;
}

declare class ExponentialHeightFogData { 
	FogDensity: number;
	FogHeightFalloff: number;
	FogHeightOffset: number;
	clone() : ExponentialHeightFogData;
	static C(Other: UObject | any): ExponentialHeightFogData;
}

declare class ExponentialHeightFogComponent extends SceneComponent { 
	FogDensity: number;
	FogHeightFalloff: number;
	SecondFogData: ExponentialHeightFogData;
	FogInscatteringColor: LinearColor;
	FogInscatteringLuminance: LinearColor;
	InscatteringColorCubemap: TextureCube;
	InscatteringColorCubemapAngle: number;
	InscatteringTextureTint: LinearColor;
	FullyDirectionalInscatteringColorDistance: number;
	NonDirectionalInscatteringColorDistance: number;
	DirectionalInscatteringExponent: number;
	DirectionalInscatteringStartDistance: number;
	DirectionalInscatteringColor: LinearColor;
	DirectionalInscatteringLuminance: LinearColor;
	FogMaxOpacity: number;
	StartDistance: number;
	FogCutoffDistance: number;
	bEnableVolumetricFog: boolean;
	VolumetricFogScatteringDistribution: number;
	VolumetricFogAlbedo: Color;
	VolumetricFogEmissive: LinearColor;
	VolumetricFogExtinctionScale: number;
	VolumetricFogDistance: number;
	VolumetricFogStaticLightingScatteringIntensity: number;
	bOverrideLightColorsWithFogInscatteringColors: boolean;
	static Load(ResourceName: string): ExponentialHeightFogComponent;
	static Find(Outer: UObject, ResourceName: string): ExponentialHeightFogComponent;
	static GetDefaultObject(): ExponentialHeightFogComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExponentialHeightFogComponent;
	SetVolumetricFogScatteringDistribution(NewValue: number): void;
	SetVolumetricFogExtinctionScale(NewValue: number): void;
	SetVolumetricFogEmissive(NewValue: LinearColor): void;
	SetVolumetricFogDistance(NewValue: number): void;
	SetVolumetricFogAlbedo(NewValue: Color): void;
	SetVolumetricFog(bNewValue: boolean): void;
	SetStartDistance(Value: number): void;
	SetNonDirectionalInscatteringColorDistance(Value: number): void;
	SetInscatteringTextureTint(Value: LinearColor): void;
	SetInscatteringColorCubemapAngle(Value: number): void;
	SetInscatteringColorCubemap(Value: TextureCube): void;
	SetFullyDirectionalInscatteringColorDistance(Value: number): void;
	SetFogMaxOpacity(Value: number): void;
	SetFogInscatteringColor(Value: LinearColor): void;
	SetFogHeightFalloff(Value: number): void;
	SetFogDensity(Value: number): void;
	SetFogCutoffDistance(Value: number): void;
	SetDirectionalInscatteringStartDistance(Value: number): void;
	SetDirectionalInscatteringExponent(Value: number): void;
	SetDirectionalInscatteringColor(Value: LinearColor): void;
	static C(Other: UObject | any): ExponentialHeightFogComponent;
}

declare class ExponentialHeightFog extends Info { 
	Component: ExponentialHeightFogComponent;
	bEnabled: boolean;
	static GetDefaultObject(): ExponentialHeightFog;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExponentialHeightFog;
	OnRep_bEnabled(): void;
	static C(Other: UObject | any): ExponentialHeightFog;
}

declare class FloatingPawnMovement extends PawnMovementComponent { 
	MaxSpeed: number;
	Acceleration: number;
	Deceleration: number;
	TurningBoost: number;
	bPositionCorrected: boolean;
	static Load(ResourceName: string): FloatingPawnMovement;
	static Find(Outer: UObject, ResourceName: string): FloatingPawnMovement;
	static GetDefaultObject(): FloatingPawnMovement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatingPawnMovement;
	static C(Other: UObject | any): FloatingPawnMovement;
}

declare type EFontLayoutMethod = 'Metrics' | 'BoundingBox' | 'EFontLayoutMethod_MAX';
declare var EFontLayoutMethod : { Metrics:'Metrics',BoundingBox:'BoundingBox',EFontLayoutMethod_MAX:'EFontLayoutMethod_MAX', };
declare class FontFace extends UObject { 
	SourceFilename: string;
	Hinting: EFontHinting;
	LoadingPolicy: EFontLoadingPolicy;
	LayoutMethod: EFontLayoutMethod;
	FontFaceData: number[];
	SubFaces: string[];
	static Load(ResourceName: string): FontFace;
	static Find(Outer: UObject, ResourceName: string): FontFace;
	static GetDefaultObject(): FontFace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFace;
	static C(Other: UObject | any): FontFace;
}

declare class GameEngine extends Engine { 
	MaxDeltaTime: number;
	ServerFlushLogInterval: number;
	GameInstance: GameInstance;
	static Load(ResourceName: string): GameEngine;
	static Find(Outer: UObject, ResourceName: string): GameEngine;
	static GetDefaultObject(): GameEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameEngine;
	static C(Other: UObject | any): GameEngine;
}

declare class GameplayStatics extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): GameplayStatics;
	static Find(Outer: UObject, ResourceName: string): GameplayStatics;
	static GetDefaultObject(): GameplayStatics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayStatics;
	static UnRetainAllSoundsInSoundClass(InSoundClass: SoundClass): void;
	static UnloadStreamLevelBySoftObjectPtr(WorldContextObject: UObject,Level: World,LatentInfo: LatentActionInfo,bShouldBlockOnUnload: boolean): void;
	static UnloadStreamLevel(WorldContextObject: UObject,LevelName: string,LatentInfo: LatentActionInfo,bShouldBlockOnUnload: boolean): void;
	static SuggestProjectileVelocity_CustomArc(WorldContextObject: UObject,OutLaunchVelocity?: Vector,StartPos?: Vector,EndPos?: Vector,OverrideGravityZ?: number,ArcParam?: number): {OutLaunchVelocity: Vector, $: boolean};
	static SpawnSoundAttached(Sound: SoundBase,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
	static SpawnSoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
	static SpawnSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
	static SpawnObject(ObjectClass: UnrealEngineClass,Outer: UObject): UObject;
	static SpawnForceFeedbackAttached(ForceFeedbackEffect: ForceFeedbackEffect,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
	static SpawnForceFeedbackAtLocation(WorldContextObject: UObject,ForceFeedbackEffect: ForceFeedbackEffect,Location: Vector,Rotation: Rotator,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
	static SpawnEmitterAttached(EmitterTemplate: ParticleSystem,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,Scale: Vector,LocationType: EAttachLocation,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod,bAutoActivate: boolean): ParticleSystemComponent;
	static SpawnEmitterAtLocation(WorldContextObject: UObject,EmitterTemplate: ParticleSystem,Location: Vector,Rotation: Rotator,Scale: Vector,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod,bAutoActivateSystem: boolean): ParticleSystemComponent;
	static SpawnDialogueAttached(Dialogue: DialogueWave,Context: DialogueContext,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
	static SpawnDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
	static SpawnDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,bAutoDestroy: boolean): AudioComponent;
	static SpawnDecalAttached(DecalMaterial: MaterialInterface,DecalSize: Vector,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,LifeSpan: number): DecalComponent;
	static SpawnDecalAtLocation(WorldContextObject: UObject,DecalMaterial: MaterialInterface,DecalSize: Vector,Location: Vector,Rotation: Rotator,LifeSpan: number): DecalComponent;
	static SetWorldOriginLocation(WorldContextObject: UObject,NewLocation: IntVector): void;
	static SetViewportMouseCaptureMode(WorldContextObject: UObject,MouseCaptureMode: EMouseCaptureMode): void;
	static SetSubtitlesEnabled(bEnabled: boolean): void;
	static SetSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,Volume: number,Pitch: number,FadeInTime: number,bApplyToChildren: boolean): void;
	static SetSoundClassDistanceScale(WorldContextObject: UObject,SoundClass: SoundClass,DistanceAttenuationScale: number,TimeSec: number): void;
	static SetPlayerControllerID(Player: PlayerController,ControllerId: number): void;
	static SetMaxAudioChannelsScaled(WorldContextObject: UObject,MaxChannelCountScale: number): void;
	static SetGlobalTimeDilation(WorldContextObject: UObject,TimeDilation: number): void;
	static SetGlobalPitchModulation(WorldContextObject: UObject,PitchModulation: number,TimeSec: number): void;
	static SetGlobalListenerFocusParameters(WorldContextObject: UObject,FocusAzimuthScale: number,NonFocusAzimuthScale: number,FocusDistanceScale: number,NonFocusDistanceScale: number,FocusVolumeScale: number,NonFocusVolumeScale: number,FocusPriorityScale: number,NonFocusPriorityScale: number): void;
	static SetGamePaused(WorldContextObject: UObject,bPaused: boolean): boolean;
	static SetForceDisableSplitscreen(WorldContextObject: UObject,bDisable: boolean): void;
	static SetEnableWorldRendering(WorldContextObject: UObject,bEnable: boolean): void;
	static SetBaseSoundMix(WorldContextObject: UObject,InSoundMix: SoundMix): void;
	static SaveGameToSlot(SaveGameObject: SaveGame,SlotName: string,UserIndex: number): boolean;
	static RemovePlayer(Player: PlayerController,bDestroyPawn: boolean): void;
	static RebaseZeroOriginOntoLocal(WorldContextObject: UObject,WorldLocation: Vector): Vector;
	static RebaseLocalOriginOntoZero(WorldContextObject: UObject,WorldLocation: Vector): Vector;
	static PushSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
	static ProjectWorldToScreen(Player: PlayerController,WorldPosition: Vector,ScreenPosition?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenPosition: Vector2D, $: boolean};
	static PrimeSound(InSound: SoundBase): void;
	static PrimeAllSoundsInSoundClass(InSoundClass: SoundClass): void;
	static PopSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
	static PlayWorldCameraShake(WorldContextObject: UObject,Shake: UnrealEngineClass,Epicenter: Vector,InnerRadius: number,OuterRadius: number,Falloff: number,bOrientShakeTowardsEpicenter: boolean): void;
	static PlaySoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,OwningActor: Actor,InitialParams: InitialActiveSoundParams): void;
	static PlaySound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,OwningActor: Actor,bIsUISound: boolean): void;
	static PlayDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): void;
	static PlayDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number): void;
	static ParseOption(Options: string,Key: string): string;
	static OpenLevelBySoftObjectPtr(WorldContextObject: UObject,Level: World,bAbsolute: boolean,Options: string): void;
	static OpenLevel(WorldContextObject: UObject,LevelName: string,bAbsolute: boolean,Options: string): void;
	static MakeHitResult(bBlockingHit: boolean,bInitialOverlap: boolean,Time: number,Distance: number,Location: Vector,ImpactPoint: Vector,Normal: Vector,ImpactNormal: Vector,PhysMat: PhysicalMaterial,HitActor: Actor,HitComponent: PrimitiveComponent,HitBoneName: string,BoneName: string,HitItem: number,ElementIndex: number,FaceIndex: number,TraceStart: Vector,TraceEnd: Vector): HitResult;
	static LoadStreamLevelBySoftObjectPtr(WorldContextObject: UObject,Level: World,bMakeVisibleAfterLoad: boolean,bShouldBlockOnLoad: boolean,LatentInfo: LatentActionInfo): void;
	static LoadStreamLevel(WorldContextObject: UObject,LevelName: string,bMakeVisibleAfterLoad: boolean,bShouldBlockOnLoad: boolean,LatentInfo: LatentActionInfo): void;
	static LoadGameFromSlot(SlotName: string,UserIndex: number): SaveGame;
	static IsSplitscreenForceDisabled(WorldContextObject: UObject): boolean;
	static IsGamePaused(WorldContextObject: UObject): boolean;
	static HasOption(Options: string,InKey: string): boolean;
	static HasLaunchOption(OptionToCheck: string): boolean;
	static GrassOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
	static GetWorldOriginLocation(WorldContextObject: UObject): IntVector;
	static GetWorldDeltaSeconds(WorldContextObject: UObject): number;
	static GetViewProjectionMatrix(DesiredView: MinimalViewInfo,ViewMatrix?: Matrix,ProjectionMatrix?: Matrix,ViewProjectionMatrix?: Matrix): {ViewMatrix: Matrix, ProjectionMatrix: Matrix, ViewProjectionMatrix: Matrix};
	static GetViewportMouseCaptureMode(WorldContextObject: UObject): EMouseCaptureMode;
	static GetUnpausedTimeSeconds(WorldContextObject: UObject): number;
	static GetTimeSeconds(WorldContextObject: UObject): number;
	static GetSurfaceType(Hit: HitResult): EPhysicalSurface;
	static GetStreamingLevel(WorldContextObject: UObject,PackageName: string): LevelStreaming;
	static GetRealTimeSeconds(WorldContextObject: UObject): number;
	static GetPlayerStateFromUniqueNetId(WorldContextObject: UObject,UniqueId: UniqueNetIdRepl): PlayerState;
	static GetPlayerState(WorldContextObject: UObject,PlayerStateIndex: number): PlayerState;
	static GetPlayerPawn(WorldContextObject: UObject,PlayerIndex: number): Pawn;
	static GetPlayerControllerID(Player: PlayerController): number;
	static GetPlayerControllerFromID(WorldContextObject: UObject,ControllerId: number): PlayerController;
	static GetPlayerController(WorldContextObject: UObject,PlayerIndex: number): PlayerController;
	static GetPlayerCharacter(WorldContextObject: UObject,PlayerIndex: number): Character;
	static GetPlayerCameraManager(WorldContextObject: UObject,PlayerIndex: number): PlayerCameraManager;
	static GetPlatformName(): string;
	static GetObjectClass(UObject: UObject): UnrealEngineClass;
	static GetNumPlayerStates(WorldContextObject: UObject): number;
	static GetNumPlayerControllers(WorldContextObject: UObject): number;
	static GetNumLocalPlayerControllers(WorldContextObject: UObject): number;
	static GetMaxAudioChannelCount(WorldContextObject: UObject): number;
	static GetKeyValue(Pair: string,Key?: string,Value?: string): {Key: string, Value: string};
	static GetIntOption(Options: string,Key: string,DefaultValue: number): number;
	static GetGlobalTimeDilation(WorldContextObject: UObject): number;
	static GetGameState(WorldContextObject: UObject): GameStateBase;
	static GetGameMode(WorldContextObject: UObject): GameModeBase;
	static GetGameInstance(WorldContextObject: UObject): GameInstance;
	static GetEnableWorldRendering(WorldContextObject: UObject): boolean;
	static GetCurrentReverbEffect(WorldContextObject: UObject): ReverbEffect;
	static GetCurrentLevelName(WorldContextObject: UObject,bRemovePrefixString: boolean): string;
	static GetClosestListenerLocation(WorldContextObject: UObject,Location: Vector,MaximumRange: number,bAllowAttenuationOverride: boolean,ListenerPosition?: Vector): {ListenerPosition: Vector, $: boolean};
	static GetAudioTimeSeconds(WorldContextObject: UObject): number;
	static GetAllActorsWithTag(WorldContextObject: UObject,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetAllActorsWithInterface(WorldContextObject: UObject,Interface: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetAllActorsOfClassWithTag(WorldContextObject: UObject,ActorClass: UnrealEngineClass,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetAllActorsOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
	static GetActorOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass): Actor;
	static GetActorArrayBounds(Actors: Actor[],bOnlyCollidingComponents: boolean,Center?: Vector,BoxExtent?: Vector): {Center: Vector, BoxExtent: Vector};
	static GetActorArrayAverageLocation(Actors: Actor[]): Vector;
	static GetAccurateRealTime(Seconds?: number,PartialSeconds?: number): {Seconds: number, PartialSeconds: number};
	static FlushLevelStreaming(WorldContextObject: UObject): void;
	static FinishSpawningActor(Actor: Actor,SpawnTransform: Transform): Actor;
	static FindNearestActor(Origin: Vector,ActorsToCheck: Actor[],Distance?: number): {Distance: number, $: Actor};
	static FindCollisionUV(Hit: HitResult,UVChannel: number,UV?: Vector2D): {UV: Vector2D, $: boolean};
	static EnableLiveStreaming(Enable: boolean): void;
	static DoesSaveGameExist(SlotName: string,UserIndex: number): boolean;
	static DeprojectScreenToWorld(Player: PlayerController,ScreenPosition: Vector2D,WorldPosition?: Vector,WorldDirection?: Vector): {WorldPosition: Vector, WorldDirection: Vector, $: boolean};
	static DeleteGameInSlot(SlotName: string,UserIndex: number): boolean;
	static DeactivateReverbEffect(WorldContextObject: UObject,TagName: string): void;
	static CreateSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
	static CreateSaveGameObject(SaveGameClass: UnrealEngineClass): SaveGame;
	static CreatePlayer(WorldContextObject: UObject,ControllerId: number,bSpawnPlayerController: boolean): PlayerController;
	static ClearSoundMixModifiers(WorldContextObject: UObject): void;
	static ClearSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,FadeOutTime: number): void;
	static CancelAsyncLoading(): void;
	static BreakHitResult(Hit: HitResult,bBlockingHit?: boolean,bInitialOverlap?: boolean,Time?: number,Distance?: number,Location?: Vector,ImpactPoint?: Vector,Normal?: Vector,ImpactNormal?: Vector,PhysMat?: PhysicalMaterial,HitActor?: Actor,HitComponent?: PrimitiveComponent,HitBoneName?: string,BoneName?: string,HitItem?: number,ElementIndex?: number,FaceIndex?: number,TraceStart?: Vector,TraceEnd?: Vector): {bBlockingHit: boolean, bInitialOverlap: boolean, Time: number, Distance: number, Location: Vector, ImpactPoint: Vector, Normal: Vector, ImpactNormal: Vector, PhysMat: PhysicalMaterial, HitActor: Actor, HitComponent: PrimitiveComponent, HitBoneName: string, BoneName: string, HitItem: number, ElementIndex: number, FaceIndex: number, TraceStart: Vector, TraceEnd: Vector};
	static BlueprintSuggestProjectileVelocity(WorldContextObject: UObject,TossVelocity?: Vector,StartLocation?: Vector,EndLocation?: Vector,LaunchSpeed?: number,OverrideGravityZ?: number,TraceOption?: ESuggestProjVelocityTraceOption,CollisionRadius?: number,bFavorHighArc?: boolean,bDrawDebug?: boolean): {TossVelocity: Vector, $: boolean};
	static Blueprint_PredictProjectilePath_ByTraceChannel(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,TraceChannel?: ECollisionChannel,bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
	static Blueprint_PredictProjectilePath_ByObjectType(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,ObjectTypes?: EObjectTypeQuery[],bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
	static Blueprint_PredictProjectilePath_Advanced(WorldContextObject: UObject,PredictParams: PredictProjectilePathParams,PredictResult?: PredictProjectilePathResult): {PredictResult: PredictProjectilePathResult, $: boolean};
	static BeginSpawningActorFromBlueprint(WorldContextObject: UObject,Blueprint: Blueprint,SpawnTransform: Transform,bNoCollisionFail: boolean): Actor;
	static BeginDeferredActorSpawnFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,CollisionHandlingOverride: ESpawnActorCollisionHandlingMethod,Owner: Actor): Actor;
	static AreSubtitlesEnabled(): boolean;
	static AreAnyListenersWithinRange(WorldContextObject: UObject,Location: Vector,MaximumRange: number): boolean;
	static ApplyRadialDamageWithFalloff(WorldContextObject: UObject,BaseDamage: number,MinimumDamage: number,Origin: Vector,DamageInnerRadius: number,DamageOuterRadius: number,DamageFalloff: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,DamagePreventionChannel: ECollisionChannel): boolean;
	static ApplyRadialDamage(WorldContextObject: UObject,BaseDamage: number,Origin: Vector,DamageRadius: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,bDoFullDamage: boolean,DamagePreventionChannel: ECollisionChannel): boolean;
	static ApplyPointDamage(DamagedActor: Actor,BaseDamage: number,HitFromDirection: Vector,HitInfo: HitResult,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
	static ApplyDamage(DamagedActor: Actor,BaseDamage: number,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
	static AnnounceAccessibleString(AnnouncementString: string): void;
	static ActivateReverbEffect(WorldContextObject: UObject,ReverbEffect: ReverbEffect,TagName: string,Priority: number,Volume: number,FadeTime: number): void;
	static C(Other: UObject | any): GameplayStatics;
}

declare class SpotLightComponent extends PointLightComponent { 
	InnerConeAngle: number;
	OuterConeAngle: number;
	static Load(ResourceName: string): SpotLightComponent;
	static Find(Outer: UObject, ResourceName: string): SpotLightComponent;
	static GetDefaultObject(): SpotLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpotLightComponent;
	SetOuterConeAngle(NewOuterConeAngle: number): void;
	SetInnerConeAngle(NewInnerConeAngle: number): void;
	static C(Other: UObject | any): SpotLightComponent;
}

declare class SpotLight extends Light { 
	SpotLightComponent: SpotLightComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): SpotLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpotLight;
	SetOuterConeAngle(NewOuterConeAngle: number): void;
	SetInnerConeAngle(NewInnerConeAngle: number): void;
	static C(Other: UObject | any): SpotLight;
}

declare class GeneratedMeshAreaLight extends SpotLight { 
	static GetDefaultObject(): GeneratedMeshAreaLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeneratedMeshAreaLight;
	static C(Other: UObject | any): GeneratedMeshAreaLight;
}

declare class HapticFeedbackEffect_Buffer extends HapticFeedbackEffect_Base { 
	Amplitudes: number[];
	SampleRate: number;
	static Load(ResourceName: string): HapticFeedbackEffect_Buffer;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_Buffer;
	static GetDefaultObject(): HapticFeedbackEffect_Buffer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_Buffer;
	static C(Other: UObject | any): HapticFeedbackEffect_Buffer;
}

declare class HapticFeedbackDetails_Curve { 
	Frequency: RuntimeFloatCurve;
	Amplitude: RuntimeFloatCurve;
	clone() : HapticFeedbackDetails_Curve;
	static C(Other: UObject | any): HapticFeedbackDetails_Curve;
}

declare class HapticFeedbackEffect_Curve extends HapticFeedbackEffect_Base { 
	HapticDetails: HapticFeedbackDetails_Curve;
	static Load(ResourceName: string): HapticFeedbackEffect_Curve;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_Curve;
	static GetDefaultObject(): HapticFeedbackEffect_Curve;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_Curve;
	static C(Other: UObject | any): HapticFeedbackEffect_Curve;
}

declare class HapticFeedbackEffect_SoundWave extends HapticFeedbackEffect_Base { 
	SoundWave: SoundWave;
	static Load(ResourceName: string): HapticFeedbackEffect_SoundWave;
	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_SoundWave;
	static GetDefaultObject(): HapticFeedbackEffect_SoundWave;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_SoundWave;
	static C(Other: UObject | any): HapticFeedbackEffect_SoundWave;
}

declare class HealthSnapshotBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): HealthSnapshotBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): HealthSnapshotBlueprintLibrary;
	static GetDefaultObject(): HealthSnapshotBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HealthSnapshotBlueprintLibrary;
	static StopPerformanceSnapshots(): void;
	static StartPerformanceSnapshots(): void;
	static LogPerformanceSnapshot(SnapshotTitle: string,bResetStats: boolean): void;
	static C(Other: UObject | any): HealthSnapshotBlueprintLibrary;
}

declare class ActorContainerID { 
	ID: any;
	clone() : ActorContainerID;
	static C(Other: UObject | any): ActorContainerID;
}

declare class HLODSubActor { 
	ActorGuid: Guid;
	ActorPackage: string;
	ActorPath: string;
	ContainerID: ActorContainerID;
	ContainerPackage: string;
	ContainerTransform: Transform;
	clone() : HLODSubActor;
	static C(Other: UObject | any): HLODSubActor;
}

declare class WorldPartitionRuntimeCell extends UObject { 
	bIsAlwaysLoaded: boolean;
	DataLayers: string[];
	Coords: IntVector;
	GridName: string;
	DebugName: string;
	Priority: number;
	bClientOnlyVisible: boolean;
	bIsHLOD: boolean;
	bBlockOnSlowLoading: boolean;
	static Load(ResourceName: string): WorldPartitionRuntimeCell;
	static Find(Outer: UObject, ResourceName: string): WorldPartitionRuntimeCell;
	static GetDefaultObject(): WorldPartitionRuntimeCell;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionRuntimeCell;
	static C(Other: UObject | any): WorldPartitionRuntimeCell;
}

declare class WorldPartitionHLOD extends Actor { 
	HLODSubActors: HLODSubActor[];
	SubActorsHLODLayer: HLODLayer;
	GridIndexX: any;
	GridIndexY: any;
	GridIndexZ: any;
	HLODBounds: Box;
	MinVisibleDistance: any;
	HLODHash: any;
	LODLevel: any;
	bRequireWarmup: boolean;
	SourceCell: WorldPartitionRuntimeCell;
	SourceCellName: string;
	static GetDefaultObject(): WorldPartitionHLOD;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldPartitionHLOD;
	static C(Other: UObject | any): WorldPartitionHLOD;
}

declare class HLODEngineSubsystem extends EngineSubsystem { 
	static Load(ResourceName: string): HLODEngineSubsystem;
	static Find(Outer: UObject, ResourceName: string): HLODEngineSubsystem;
	static GetDefaultObject(): HLODEngineSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HLODEngineSubsystem;
	static C(Other: UObject | any): HLODEngineSubsystem;
}

declare class HLODProxyMesh { 
	LODActor: any;
	StaticMesh: StaticMesh;
	Key: string;
	clone() : HLODProxyMesh;
	static C(Other: UObject | any): HLODProxyMesh;
}

declare class HLODProxy extends UObject { 
	OwningMap: World;
	ProxyMeshes: HLODProxyMesh[];
	HLODActors: any;
	static Load(ResourceName: string): HLODProxy;
	static Find(Outer: UObject, ResourceName: string): HLODProxy;
	static GetDefaultObject(): HLODProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HLODProxy;
	static C(Other: UObject | any): HLODProxy;
}

declare class HLODISMComponentDesc { 
	StaticMesh: StaticMesh;
	Material: MaterialInterface;
	Instances: Transform[];
	clone() : HLODISMComponentDesc;
	static C(Other: UObject | any): HLODISMComponentDesc;
}

declare class HLODProxyDesc extends UObject { 
	SubActors: string[];
	StaticMesh: StaticMesh;
	ISMComponentsDesc: HLODISMComponentDesc[];
	LODDrawDistance: number;
	bOverrideMaterialMergeSettings: boolean;
	MaterialSettings: MaterialProxySettings;
	bOverrideTransitionScreenSize: boolean;
	TransitionScreenSize: number;
	bOverrideScreenSize: boolean;
	ScreenSize: number;
	Key: string;
	LODLevel: number;
	LODActorTag: string;
	Location: Vector;
	HLODBakingTransform: Transform;
	SubHLODDescs: HLODProxyDesc[];
	static Load(ResourceName: string): HLODProxyDesc;
	static Find(Outer: UObject, ResourceName: string): HLODProxyDesc;
	static GetDefaultObject(): HLODProxyDesc;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HLODProxyDesc;
	static C(Other: UObject | any): HLODProxyDesc;
}

declare class HLODSubsystem extends WorldSubsystem { 
	static Load(ResourceName: string): HLODSubsystem;
	static Find(Outer: UObject, ResourceName: string): HLODSubsystem;
	static GetDefaultObject(): HLODSubsystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HLODSubsystem;
	static C(Other: UObject | any): HLODSubsystem;
}

declare type EAnimAssetCurveFlags = 'AACF_NONE' | 'AACF_DriveMorphTarget_DEPRECATED' | 'AACF_DriveAttribute_DEPRECATED' | 'AACF_Editable' | 'AACF_DriveMaterial_DEPRECATED' | 'AACF_Metadata' | 'AACF_DriveTrack' | 'AACF_Disabled' | 'AACF_MAX';
declare var EAnimAssetCurveFlags : { AACF_NONE:'AACF_NONE',AACF_DriveMorphTarget_DEPRECATED:'AACF_DriveMorphTarget_DEPRECATED',AACF_DriveAttribute_DEPRECATED:'AACF_DriveAttribute_DEPRECATED',AACF_Editable:'AACF_Editable',AACF_DriveMaterial_DEPRECATED:'AACF_DriveMaterial_DEPRECATED',AACF_Metadata:'AACF_Metadata',AACF_DriveTrack:'AACF_DriveTrack',AACF_Disabled:'AACF_Disabled',AACF_MAX:'AACF_MAX', };
declare class AnimationDataController extends Interface { 
	static Load(ResourceName: string): AnimationDataController;
	static Find(Outer: UObject, ResourceName: string): AnimationDataController;
	static GetDefaultObject(): AnimationDataController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationDataController;
	UpdateCurveNamesFromSkeleton(Skeleton: Skeleton,SupportedCurveType: ERawCurveTrackTypes,bShouldTransact: boolean): void;
	SetTransformCurveKeys(CurveId: AnimationCurveIdentifier,TransformValues: Transform[],TimeKeys: number[],bShouldTransact: boolean): boolean;
	SetTransformCurveKey(CurveId: AnimationCurveIdentifier,Time: number,Value: Transform,bShouldTransact: boolean): boolean;
	SetPlayLength(Length: number,bShouldTransact: boolean): void;
	SetModel(InModel: AnimDataModel): void;
	SetFrameRate(FrameRate: FrameRate,bShouldTransact: boolean): void;
	SetCurveKeys(CurveId: AnimationCurveIdentifier,CurveKeys: RichCurveKey[],bShouldTransact: boolean): boolean;
	SetCurveKey(CurveId: AnimationCurveIdentifier,Key: RichCurveKey,bShouldTransact: boolean): boolean;
	SetCurveFlags(CurveId: AnimationCurveIdentifier,Flags: number,bShouldTransact: boolean): boolean;
	SetCurveFlag(CurveId: AnimationCurveIdentifier,Flag: EAnimAssetCurveFlags,bState: boolean,bShouldTransact: boolean): boolean;
	SetCurveColor(CurveId: AnimationCurveIdentifier,Color: LinearColor,bShouldTransact: boolean): boolean;
	SetBoneTrackKeys(BoneName: string,PositionalKeys: Vector[],RotationalKeys: Quat[],ScalingKeys: Vector[],bShouldTransact: boolean): boolean;
	ScaleCurve(CurveId: AnimationCurveIdentifier,Origin: number,Factor: number,bShouldTransact: boolean): boolean;
	ResizePlayLength(NewLength: number,T0: number,T1: number,bShouldTransact: boolean): void;
	Resize(Length: number,T0: number,T1: number,bShouldTransact: boolean): void;
	RenameCurve(CurveToRenameId: AnimationCurveIdentifier,NewCurveId: AnimationCurveIdentifier,bShouldTransact: boolean): boolean;
	RemoveTransformCurveKey(CurveId: AnimationCurveIdentifier,Time: number,bShouldTransact: boolean): boolean;
	RemoveCurveKey(CurveId: AnimationCurveIdentifier,Time: number,bShouldTransact: boolean): boolean;
	RemoveCurve(CurveId: AnimationCurveIdentifier,bShouldTransact: boolean): boolean;
	RemoveBoneTrack(BoneName: string,bShouldTransact: boolean): boolean;
	RemoveAttributeKey(AttributeIdentifier: AnimationAttributeIdentifier,Time: number,bShouldTransact: boolean): boolean;
	RemoveAttribute(AttributeIdentifier: AnimationAttributeIdentifier,bShouldTransact: boolean): boolean;
	RemoveAllCurvesOfType(SupportedCurveType: ERawCurveTrackTypes,bShouldTransact: boolean): void;
	RemoveAllBoneTracks(bShouldTransact: boolean): void;
	RemoveAllAttributesForBone(BoneName: string,bShouldTransact: boolean): number;
	RemoveAllAttributes(bShouldTransact: boolean): number;
	OpenBracket(InTitle: string,bShouldTransact: boolean): void;
	InsertBoneTrack(BoneName: string,DesiredIndex: number,bShouldTransact: boolean): number;
	GetModel(): AnimDataModel;
	FindOrAddCurveNamesOnSkeleton(Skeleton: Skeleton,SupportedCurveType: ERawCurveTrackTypes,bShouldTransact: boolean): void;
	DuplicateCurve(CopyCurveId: AnimationCurveIdentifier,NewCurveId: AnimationCurveIdentifier,bShouldTransact: boolean): boolean;
	DuplicateAttribute(AttributeIdentifier: AnimationAttributeIdentifier,NewAttributeIdentifier: AnimationAttributeIdentifier,bShouldTransact: boolean): boolean;
	CloseBracket(bShouldTransact: boolean): void;
	AddCurve(CurveId: AnimationCurveIdentifier,CurveFlags: number,bShouldTransact: boolean): boolean;
	AddBoneTrack(BoneName: string,bShouldTransact: boolean): number;
	AddAttribute(AttributeIdentifier: AnimationAttributeIdentifier,bShouldTransact: boolean): boolean;
	static C(Other: UObject | any): AnimationDataController;
}

declare class ImportanceSamplingLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): ImportanceSamplingLibrary;
	static Find(Outer: UObject, ResourceName: string): ImportanceSamplingLibrary;
	static GetDefaultObject(): ImportanceSamplingLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportanceSamplingLibrary;
	static RandomSobolFloat(index: number,Dimension: number,Seed: number): number;
	static RandomSobolCell3D(index: number,NumCells: number,Cell: Vector,Seed: Vector): Vector;
	static RandomSobolCell2D(index: number,NumCells: number,Cell: Vector2D,Seed: Vector2D): Vector2D;
	static NextSobolFloat(index: number,Dimension: number,PreviousValue: number): number;
	static NextSobolCell3D(index: number,NumCells: number,PreviousValue: Vector): Vector;
	static NextSobolCell2D(index: number,NumCells: number,PreviousValue: Vector2D): Vector2D;
	static MakeImportanceTexture(Texture: Texture2D,WeightingFunc: EImportanceWeight): ImportanceTexture;
	static ImportanceSample(Texture: ImportanceTexture,Rand: Vector2D,Samples: number,Intensity: number,SamplePosition?: Vector2D,SampleColor?: LinearColor,SampleIntensity?: number,SampleSize?: number): {SamplePosition: Vector2D, SampleColor: LinearColor, SampleIntensity: number, SampleSize: number};
	static BreakImportanceTexture(ImportanceTexture: ImportanceTexture,Texture?: Texture2D,WeightingFunc?: EImportanceWeight): {Texture: Texture2D, WeightingFunc: EImportanceWeight};
	static C(Other: UObject | any): ImportanceSamplingLibrary;
}

declare class ImportantToggleSettingInterface extends Interface { 
	static Load(ResourceName: string): ImportantToggleSettingInterface;
	static Find(Outer: UObject, ResourceName: string): ImportantToggleSettingInterface;
	static GetDefaultObject(): ImportantToggleSettingInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportantToggleSettingInterface;
	static C(Other: UObject | any): ImportantToggleSettingInterface;
}

declare class InGameAdManager extends PlatformInterfaceBase { 
	bShouldPauseWhileAdOpen: boolean;
	ClickedBannerDelegates: UnrealEngineDelegate<() => void>[];
	ClosedAdDelegates: UnrealEngineDelegate<() => void>[];
	static Load(ResourceName: string): InGameAdManager;
	static Find(Outer: UObject, ResourceName: string): InGameAdManager;
	static GetDefaultObject(): InGameAdManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InGameAdManager;
	static C(Other: UObject | any): InGameAdManager;
}

declare class InputDelegateBinding extends DynamicBlueprintBinding { 
	static Load(ResourceName: string): InputDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputDelegateBinding;
	static GetDefaultObject(): InputDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputDelegateBinding;
	static C(Other: UObject | any): InputDelegateBinding;
}

declare class BlueprintInputDelegateBinding { 
	bConsumeInput: boolean;
	bExecuteWhenPaused: boolean;
	bOverrideParentBinding: boolean;
	clone() : BlueprintInputDelegateBinding;
	static C(Other: UObject | any): BlueprintInputDelegateBinding;
}

declare class BlueprintInputActionDelegateBinding extends BlueprintInputDelegateBinding { 
	InputActionName: string;
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputActionDelegateBinding;
	static C(Other: UObject | any): BlueprintInputActionDelegateBinding;
}

declare class InputActionDelegateBinding extends InputDelegateBinding { 
	InputActionDelegateBindings: BlueprintInputActionDelegateBinding[];
	static Load(ResourceName: string): InputActionDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputActionDelegateBinding;
	static GetDefaultObject(): InputActionDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputActionDelegateBinding;
	static C(Other: UObject | any): InputActionDelegateBinding;
}

declare class BlueprintInputAxisDelegateBinding extends BlueprintInputDelegateBinding { 
	InputAxisName: string;
	FunctionNameToBind: string;
	clone() : BlueprintInputAxisDelegateBinding;
	static C(Other: UObject | any): BlueprintInputAxisDelegateBinding;
}

declare class InputAxisDelegateBinding extends InputDelegateBinding { 
	InputAxisDelegateBindings: BlueprintInputAxisDelegateBinding[];
	static Load(ResourceName: string): InputAxisDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputAxisDelegateBinding;
	static GetDefaultObject(): InputAxisDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputAxisDelegateBinding;
	static C(Other: UObject | any): InputAxisDelegateBinding;
}

declare class BlueprintInputAxisKeyDelegateBinding extends BlueprintInputDelegateBinding { 
	AxisKey: Key;
	FunctionNameToBind: string;
	clone() : BlueprintInputAxisKeyDelegateBinding;
	static C(Other: UObject | any): BlueprintInputAxisKeyDelegateBinding;
}

declare class InputAxisKeyDelegateBinding extends InputDelegateBinding { 
	InputAxisKeyDelegateBindings: BlueprintInputAxisKeyDelegateBinding[];
	static Load(ResourceName: string): InputAxisKeyDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputAxisKeyDelegateBinding;
	static GetDefaultObject(): InputAxisKeyDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputAxisKeyDelegateBinding;
	static C(Other: UObject | any): InputAxisKeyDelegateBinding;
}

declare class BlueprintInputKeyDelegateBinding extends BlueprintInputDelegateBinding { 
	InputChord: InputChord;
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputKeyDelegateBinding;
	static C(Other: UObject | any): BlueprintInputKeyDelegateBinding;
}

declare class InputKeyDelegateBinding extends InputDelegateBinding { 
	InputKeyDelegateBindings: BlueprintInputKeyDelegateBinding[];
	static Load(ResourceName: string): InputKeyDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputKeyDelegateBinding;
	static GetDefaultObject(): InputKeyDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputKeyDelegateBinding;
	static C(Other: UObject | any): InputKeyDelegateBinding;
}

declare class InputAxisProperties { 
	DeadZone: number;
	Sensitivity: number;
	Exponent: number;
	bInvert: boolean;
	clone() : InputAxisProperties;
	static C(Other: UObject | any): InputAxisProperties;
}

declare class InputAxisConfigEntry { 
	AxisKeyName: string;
	AxisProperties: InputAxisProperties;
	clone() : InputAxisConfigEntry;
	static C(Other: UObject | any): InputAxisConfigEntry;
}

declare class InputActionKeyMapping { 
	ActionName: string;
	bShift: boolean;
	bCtrl: boolean;
	bAlt: boolean;
	bCmd: boolean;
	Key: Key;
	clone() : InputActionKeyMapping;
	static C(Other: UObject | any): InputActionKeyMapping;
}

declare class InputAxisKeyMapping { 
	AxisName: string;
	Scale: number;
	Key: Key;
	clone() : InputAxisKeyMapping;
	static C(Other: UObject | any): InputAxisKeyMapping;
}

declare class InputActionSpeechMapping { 
	ActionName: string;
	SpeechKeyword: string;
	clone() : InputActionSpeechMapping;
	static C(Other: UObject | any): InputActionSpeechMapping;
}

declare class InputSettings extends UObject { 
	AxisConfig: InputAxisConfigEntry[];
	bAltEnterTogglesFullscreen: boolean;
	bF11TogglesFullscreen: boolean;
	bUseMouseForTouch: boolean;
	bEnableMouseSmoothing: boolean;
	bEnableFOVScaling: boolean;
	bCaptureMouseOnLaunch: boolean;
	bDefaultViewportMouseLock: boolean;
	bEnableLegacyInputScales: boolean;
	bAlwaysShowTouchInterface: boolean;
	bShowConsoleOnFourFingerTap: boolean;
	bEnableGestureRecognizer: boolean;
	bUseAutocorrect: boolean;
	ExcludedAutocorrectOS: string[];
	ExcludedAutocorrectCultures: string[];
	ExcludedAutocorrectDeviceModels: string[];
	DefaultViewportMouseCaptureMode: EMouseCaptureMode;
	DefaultViewportMouseLockMode: EMouseLockMode;
	FOVScale: number;
	DoubleClickTime: number;
	ActionMappings: InputActionKeyMapping[];
	AxisMappings: InputAxisKeyMapping[];
	SpeechMappings: InputActionSpeechMapping[];
	DefaultPlayerInputClass: Class;
	DefaultInputComponentClass: Class;
	DefaultTouchInterface: SoftObjectPath;
	ConsoleKey: Key;
	ConsoleKeys: Key[];
	static Load(ResourceName: string): InputSettings;
	static Find(Outer: UObject, ResourceName: string): InputSettings;
	static GetDefaultObject(): InputSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputSettings;
	SaveKeyMappings(): void;
	RemoveAxisMapping(KeyMapping: InputAxisKeyMapping,bForceRebuildKeymaps: boolean): void;
	RemoveActionMapping(KeyMapping: InputActionKeyMapping,bForceRebuildKeymaps: boolean): void;
	static GetInputSettings(): InputSettings;
	GetAxisNames(AxisNames?: string[]): {AxisNames: string[]};
	GetAxisMappingByName(InAxisName: string,OutMappings?: InputAxisKeyMapping[]): {OutMappings: InputAxisKeyMapping[]};
	GetActionNames(ActionNames?: string[]): {ActionNames: string[]};
	GetActionMappingByName(InActionName: string,OutMappings?: InputActionKeyMapping[]): {OutMappings: InputActionKeyMapping[]};
	ForceRebuildKeymaps(): void;
	AddAxisMapping(KeyMapping: InputAxisKeyMapping,bForceRebuildKeymaps: boolean): void;
	AddActionMapping(KeyMapping: InputActionKeyMapping,bForceRebuildKeymaps: boolean): void;
	static C(Other: UObject | any): InputSettings;
}

declare class BlueprintInputTouchDelegateBinding extends BlueprintInputDelegateBinding { 
	InputKeyEvent: EInputEvent;
	FunctionNameToBind: string;
	clone() : BlueprintInputTouchDelegateBinding;
	static C(Other: UObject | any): BlueprintInputTouchDelegateBinding;
}

declare class InputTouchDelegateBinding extends InputDelegateBinding { 
	InputTouchDelegateBindings: BlueprintInputTouchDelegateBinding[];
	static Load(ResourceName: string): InputTouchDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputTouchDelegateBinding;
	static GetDefaultObject(): InputTouchDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputTouchDelegateBinding;
	static C(Other: UObject | any): InputTouchDelegateBinding;
}

declare class InputVectorAxisDelegateBinding extends InputAxisKeyDelegateBinding { 
	static Load(ResourceName: string): InputVectorAxisDelegateBinding;
	static Find(Outer: UObject, ResourceName: string): InputVectorAxisDelegateBinding;
	static GetDefaultObject(): InputVectorAxisDelegateBinding;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputVectorAxisDelegateBinding;
	static C(Other: UObject | any): InputVectorAxisDelegateBinding;
}

declare class InstancedPlacementPartitionActor extends ISMPartitionActor { 
	PlacementGridGuid: Guid;
	static GetDefaultObject(): InstancedPlacementPartitionActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InstancedPlacementPartitionActor;
	static C(Other: UObject | any): InstancedPlacementPartitionActor;
}

declare class Interface_ActorSubobject extends Interface { 
	static Load(ResourceName: string): Interface_ActorSubobject;
	static Find(Outer: UObject, ResourceName: string): Interface_ActorSubobject;
	static GetDefaultObject(): Interface_ActorSubobject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_ActorSubobject;
	static C(Other: UObject | any): Interface_ActorSubobject;
}

declare class Interface_AssetUserData extends Interface { 
	static Load(ResourceName: string): Interface_AssetUserData;
	static Find(Outer: UObject, ResourceName: string): Interface_AssetUserData;
	static GetDefaultObject(): Interface_AssetUserData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_AssetUserData;
	static C(Other: UObject | any): Interface_AssetUserData;
}

declare class Interface_AsyncCompilation extends Interface { 
	static Load(ResourceName: string): Interface_AsyncCompilation;
	static Find(Outer: UObject, ResourceName: string): Interface_AsyncCompilation;
	static GetDefaultObject(): Interface_AsyncCompilation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_AsyncCompilation;
	static C(Other: UObject | any): Interface_AsyncCompilation;
}

declare class BoneReferenceSkeletonProvider extends Interface { 
	static Load(ResourceName: string): BoneReferenceSkeletonProvider;
	static Find(Outer: UObject, ResourceName: string): BoneReferenceSkeletonProvider;
	static GetDefaultObject(): BoneReferenceSkeletonProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoneReferenceSkeletonProvider;
	static C(Other: UObject | any): BoneReferenceSkeletonProvider;
}

declare class Interface_CollisionDataProvider extends Interface { 
	static Load(ResourceName: string): Interface_CollisionDataProvider;
	static Find(Outer: UObject, ResourceName: string): Interface_CollisionDataProvider;
	static GetDefaultObject(): Interface_CollisionDataProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_CollisionDataProvider;
	static C(Other: UObject | any): Interface_CollisionDataProvider;
}

declare class Interface_PostProcessVolume extends Interface { 
	static Load(ResourceName: string): Interface_PostProcessVolume;
	static Find(Outer: UObject, ResourceName: string): Interface_PostProcessVolume;
	static GetDefaultObject(): Interface_PostProcessVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_PostProcessVolume;
	static C(Other: UObject | any): Interface_PostProcessVolume;
}

declare class Interface_PreviewMeshProvider extends Interface { 
	static Load(ResourceName: string): Interface_PreviewMeshProvider;
	static Find(Outer: UObject, ResourceName: string): Interface_PreviewMeshProvider;
	static GetDefaultObject(): Interface_PreviewMeshProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface_PreviewMeshProvider;
	static C(Other: UObject | any): Interface_PreviewMeshProvider;
}

declare class InterpFilter_Classes extends InterpFilter { 
	ClassToFilterBy: UnrealEngineClass;
	TrackClasses: UnrealEngineClass[];
	static Load(ResourceName: string): InterpFilter_Classes;
	static Find(Outer: UObject, ResourceName: string): InterpFilter_Classes;
	static GetDefaultObject(): InterpFilter_Classes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpFilter_Classes;
	static C(Other: UObject | any): InterpFilter_Classes;
}

declare class InterpFilter_Custom extends InterpFilter { 
	GroupsToInclude: InterpGroup[];
	static Load(ResourceName: string): InterpFilter_Custom;
	static Find(Outer: UObject, ResourceName: string): InterpFilter_Custom;
	static GetDefaultObject(): InterpFilter_Custom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpFilter_Custom;
	static C(Other: UObject | any): InterpFilter_Custom;
}

declare class CameraPreviewInfo { 
	PawnClass: UnrealEngineClass;
	AnimSeq: AnimSequence;
	Location: Vector;
	Rotation: Rotator;
	PawnInst: Pawn;
	clone() : CameraPreviewInfo;
	static C(Other: UObject | any): CameraPreviewInfo;
}

declare class InterpGroupCamera extends InterpGroup { 
	CameraAnimInst: CameraAnim;
	Target: CameraPreviewInfo;
	CompressTolerance: number;
	static Load(ResourceName: string): InterpGroupCamera;
	static Find(Outer: UObject, ResourceName: string): InterpGroupCamera;
	static GetDefaultObject(): InterpGroupCamera;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupCamera;
	static C(Other: UObject | any): InterpGroupCamera;
}

declare class InterpGroupInstCamera extends InterpGroupInst { 
	static Load(ResourceName: string): InterpGroupInstCamera;
	static Find(Outer: UObject, ResourceName: string): InterpGroupInstCamera;
	static GetDefaultObject(): InterpGroupInstCamera;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupInstCamera;
	static C(Other: UObject | any): InterpGroupInstCamera;
}

declare class InterpGroupInstDirector extends InterpGroupInst { 
	static Load(ResourceName: string): InterpGroupInstDirector;
	static Find(Outer: UObject, ResourceName: string): InterpGroupInstDirector;
	static GetDefaultObject(): InterpGroupInstDirector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupInstDirector;
	static C(Other: UObject | any): InterpGroupInstDirector;
}

declare type EInterpToBehaviourType = 'OneShot' | 'OneShot_Reverse' | 'Loop_Reset' | 'PingPong' | 'EInterpToBehaviourType_MAX';
declare var EInterpToBehaviourType : { OneShot:'OneShot',OneShot_Reverse:'OneShot_Reverse',Loop_Reset:'Loop_Reset',PingPong:'PingPong',EInterpToBehaviourType_MAX:'EInterpToBehaviourType_MAX', };
declare class InterpControlPoint { 
	PositionControlPoint: Vector;
	bPositionIsRelative: boolean;
	clone() : InterpControlPoint;
	static C(Other: UObject | any): InterpControlPoint;
}

declare class InterpToMovementComponent extends MovementComponent { 
	Duration: number;
	bPauseOnImpact: boolean;
	bSweep: boolean;
	TeleportType: ETeleportType;
	BehaviourType: EInterpToBehaviourType;
	bCheckIfStillInWorld: boolean;
	bForceSubStepping: boolean;
	OnInterpToReverse: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnInterpToStop: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnWaitBeginDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnWaitEndDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	OnResetDelegate: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
	MaxSimulationTimeStep: number;
	MaxSimulationIterations: number;
	ControlPoints: InterpControlPoint[];
	static Load(ResourceName: string): InterpToMovementComponent;
	static Find(Outer: UObject, ResourceName: string): InterpToMovementComponent;
	static GetDefaultObject(): InterpToMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpToMovementComponent;
	StopSimulating(HitResult: HitResult): void;
	RestartMovement(InitialDirection: number): void;
	ResetControlPoints(): void;
	FinaliseControlPoints(): void;
	AddControlPointPosition(Pos: Vector,bPositionIsRelative: boolean): void;
	static C(Other: UObject | any): InterpToMovementComponent;
}

declare class InterpTrackFloatBase extends InterpTrack { 
	FloatTrack: InterpCurveFloat;
	CurveTension: number;
	static Load(ResourceName: string): InterpTrackFloatBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatBase;
	static GetDefaultObject(): InterpTrackFloatBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatBase;
	static C(Other: UObject | any): InterpTrackFloatBase;
}

declare class AnimControlTrackKey { 
	StartTime: number;
	AnimSeq: AnimSequence;
	AnimStartOffset: number;
	AnimEndOffset: number;
	AnimPlayRate: number;
	bLooping: boolean;
	bReverse: boolean;
	clone() : AnimControlTrackKey;
	static C(Other: UObject | any): AnimControlTrackKey;
}

declare class InterpTrackAnimControl extends InterpTrackFloatBase { 
	SlotName: string;
	AnimSeqs: AnimControlTrackKey[];
	bSkipAnimNotifiers: boolean;
	static Load(ResourceName: string): InterpTrackAnimControl;
	static Find(Outer: UObject, ResourceName: string): InterpTrackAnimControl;
	static GetDefaultObject(): InterpTrackAnimControl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackAnimControl;
	static C(Other: UObject | any): InterpTrackAnimControl;
}

declare class InterpTrackVectorBase extends InterpTrack { 
	VectorTrack: InterpCurveVector;
	CurveTension: number;
	static Load(ResourceName: string): InterpTrackVectorBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorBase;
	static GetDefaultObject(): InterpTrackVectorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorBase;
	static C(Other: UObject | any): InterpTrackVectorBase;
}

declare class InterpTrackAudioMaster extends InterpTrackVectorBase { 
	static Load(ResourceName: string): InterpTrackAudioMaster;
	static Find(Outer: UObject, ResourceName: string): InterpTrackAudioMaster;
	static GetDefaultObject(): InterpTrackAudioMaster;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackAudioMaster;
	static C(Other: UObject | any): InterpTrackAudioMaster;
}

declare class BoolTrackKey { 
	Time: number;
	Value: boolean;
	clone() : BoolTrackKey;
	static C(Other: UObject | any): BoolTrackKey;
}

declare class InterpTrackBoolProp extends InterpTrack { 
	BoolTrack: BoolTrackKey[];
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackBoolProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackBoolProp;
	static GetDefaultObject(): InterpTrackBoolProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackBoolProp;
	static C(Other: UObject | any): InterpTrackBoolProp;
}

declare class InterpTrackColorProp extends InterpTrackVectorBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackColorProp;
	static GetDefaultObject(): InterpTrackColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackColorProp;
	static C(Other: UObject | any): InterpTrackColorProp;
}

declare class InterpTrackColorScale extends InterpTrackVectorBase { 
	static Load(ResourceName: string): InterpTrackColorScale;
	static Find(Outer: UObject, ResourceName: string): InterpTrackColorScale;
	static GetDefaultObject(): InterpTrackColorScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackColorScale;
	static C(Other: UObject | any): InterpTrackColorScale;
}

declare class DirectorTrackCut { 
	Time: number;
	TransitionTime: number;
	TargetCamGroup: string;
	ShotNumber: number;
	clone() : DirectorTrackCut;
	static C(Other: UObject | any): DirectorTrackCut;
}

declare class InterpTrackDirector extends InterpTrack { 
	CutTrack: DirectorTrackCut[];
	bSimulateCameraCutsOnClients: boolean;
	PreviewCamera: CameraActor;
	static Load(ResourceName: string): InterpTrackDirector;
	static Find(Outer: UObject, ResourceName: string): InterpTrackDirector;
	static GetDefaultObject(): InterpTrackDirector;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackDirector;
	static C(Other: UObject | any): InterpTrackDirector;
}

declare class EventTrackKey { 
	Time: number;
	EventName: string;
	clone() : EventTrackKey;
	static C(Other: UObject | any): EventTrackKey;
}

declare class InterpTrackEvent extends InterpTrack { 
	EventTrack: EventTrackKey[];
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	bUseCustomEventName: boolean;
	static Load(ResourceName: string): InterpTrackEvent;
	static Find(Outer: UObject, ResourceName: string): InterpTrackEvent;
	static GetDefaultObject(): InterpTrackEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackEvent;
	static C(Other: UObject | any): InterpTrackEvent;
}

declare class InterpTrackFade extends InterpTrackFloatBase { 
	bPersistFade: boolean;
	bFadeAudio: boolean;
	FadeColor: LinearColor;
	static Load(ResourceName: string): InterpTrackFade;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFade;
	static GetDefaultObject(): InterpTrackFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFade;
	static C(Other: UObject | any): InterpTrackFade;
}

declare class InterpTrackFloatAnimBPParam extends InterpTrackFloatBase { 
	AnimBlueprintClass: UnrealEngineClass;
	AnimClass: UnrealEngineClass;
	ParamName: string;
	static Load(ResourceName: string): InterpTrackFloatAnimBPParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatAnimBPParam;
	static GetDefaultObject(): InterpTrackFloatAnimBPParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatAnimBPParam;
	static C(Other: UObject | any): InterpTrackFloatAnimBPParam;
}

declare class InterpTrackFloatMaterialParam extends InterpTrackFloatBase { 
	TargetMaterials: MaterialInterface[];
	ParamName: string;
	static Load(ResourceName: string): InterpTrackFloatMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatMaterialParam;
	static GetDefaultObject(): InterpTrackFloatMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatMaterialParam;
	static C(Other: UObject | any): InterpTrackFloatMaterialParam;
}

declare class InterpTrackFloatParticleParam extends InterpTrackFloatBase { 
	ParamName: string;
	static Load(ResourceName: string): InterpTrackFloatParticleParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatParticleParam;
	static GetDefaultObject(): InterpTrackFloatParticleParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatParticleParam;
	static C(Other: UObject | any): InterpTrackFloatParticleParam;
}

declare class InterpTrackFloatProp extends InterpTrackFloatBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackFloatProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackFloatProp;
	static GetDefaultObject(): InterpTrackFloatProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackFloatProp;
	static C(Other: UObject | any): InterpTrackFloatProp;
}

declare class InterpTrackInstAnimControl extends InterpTrackInst { 
	LastUpdatePosition: number;
	InitPosition: Vector;
	InitRotation: Rotator;
	static Load(ResourceName: string): InterpTrackInstAnimControl;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstAnimControl;
	static GetDefaultObject(): InterpTrackInstAnimControl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstAnimControl;
	static C(Other: UObject | any): InterpTrackInstAnimControl;
}

declare class InterpTrackInstAudioMaster extends InterpTrackInst { 
	static Load(ResourceName: string): InterpTrackInstAudioMaster;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstAudioMaster;
	static GetDefaultObject(): InterpTrackInstAudioMaster;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstAudioMaster;
	static C(Other: UObject | any): InterpTrackInstAudioMaster;
}

declare class InterpTrackInstProperty extends InterpTrackInst { 
	InterpProperty: any;
	PropertyOuterObjectInst: UObject;
	static Load(ResourceName: string): InterpTrackInstProperty;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstProperty;
	static GetDefaultObject(): InterpTrackInstProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstProperty;
	static C(Other: UObject | any): InterpTrackInstProperty;
}

declare class InterpTrackInstBoolProp extends InterpTrackInstProperty { 
	ResetBool: boolean;
	static Load(ResourceName: string): InterpTrackInstBoolProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstBoolProp;
	static GetDefaultObject(): InterpTrackInstBoolProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstBoolProp;
	static C(Other: UObject | any): InterpTrackInstBoolProp;
}

declare class InterpTrackInstColorProp extends InterpTrackInstProperty { 
	ResetColor: Color;
	static Load(ResourceName: string): InterpTrackInstColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstColorProp;
	static GetDefaultObject(): InterpTrackInstColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstColorProp;
	static C(Other: UObject | any): InterpTrackInstColorProp;
}

declare class InterpTrackInstColorScale extends InterpTrackInst { 
	static Load(ResourceName: string): InterpTrackInstColorScale;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstColorScale;
	static GetDefaultObject(): InterpTrackInstColorScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstColorScale;
	static C(Other: UObject | any): InterpTrackInstColorScale;
}

declare class InterpTrackInstEvent extends InterpTrackInst { 
	LastUpdatePosition: number;
	static Load(ResourceName: string): InterpTrackInstEvent;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstEvent;
	static GetDefaultObject(): InterpTrackInstEvent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstEvent;
	static C(Other: UObject | any): InterpTrackInstEvent;
}

declare class InterpTrackInstFade extends InterpTrackInst { 
	static Load(ResourceName: string): InterpTrackInstFade;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFade;
	static GetDefaultObject(): InterpTrackInstFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFade;
	static C(Other: UObject | any): InterpTrackInstFade;
}

declare class InterpTrackInstFloatAnimBPParam extends InterpTrackInst { 
	AnimScriptInstance: AnimInstance;
	ResetFloat: number;
	static Load(ResourceName: string): InterpTrackInstFloatAnimBPParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatAnimBPParam;
	static GetDefaultObject(): InterpTrackInstFloatAnimBPParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatAnimBPParam;
	static C(Other: UObject | any): InterpTrackInstFloatAnimBPParam;
}

declare class PrimitiveMaterialRef { 
	Primitive: PrimitiveComponent;
	Decal: DecalComponent;
	ElementIndex: number;
	clone() : PrimitiveMaterialRef;
	static C(Other: UObject | any): PrimitiveMaterialRef;
}

declare class InterpTrackInstFloatMaterialParam extends InterpTrackInst { 
	MaterialInstances: MaterialInstanceDynamic[];
	ResetFloats: number[];
	PrimitiveMaterialRefs: PrimitiveMaterialRef[];
	InstancedTrack: InterpTrackFloatMaterialParam;
	static Load(ResourceName: string): InterpTrackInstFloatMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatMaterialParam;
	static GetDefaultObject(): InterpTrackInstFloatMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatMaterialParam;
	static C(Other: UObject | any): InterpTrackInstFloatMaterialParam;
}

declare class InterpTrackInstFloatParticleParam extends InterpTrackInst { 
	ResetFloat: number;
	static Load(ResourceName: string): InterpTrackInstFloatParticleParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatParticleParam;
	static GetDefaultObject(): InterpTrackInstFloatParticleParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatParticleParam;
	static C(Other: UObject | any): InterpTrackInstFloatParticleParam;
}

declare class InterpTrackInstFloatProp extends InterpTrackInstProperty { 
	ResetFloat: number;
	static Load(ResourceName: string): InterpTrackInstFloatProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstFloatProp;
	static GetDefaultObject(): InterpTrackInstFloatProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstFloatProp;
	static C(Other: UObject | any): InterpTrackInstFloatProp;
}

declare class InterpTrackInstLinearColorProp extends InterpTrackInstProperty { 
	ResetColor: LinearColor;
	static Load(ResourceName: string): InterpTrackInstLinearColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstLinearColorProp;
	static GetDefaultObject(): InterpTrackInstLinearColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstLinearColorProp;
	static C(Other: UObject | any): InterpTrackInstLinearColorProp;
}

declare class InterpTrackInstParticleReplay extends InterpTrackInst { 
	LastUpdatePosition: number;
	static Load(ResourceName: string): InterpTrackInstParticleReplay;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstParticleReplay;
	static GetDefaultObject(): InterpTrackInstParticleReplay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstParticleReplay;
	static C(Other: UObject | any): InterpTrackInstParticleReplay;
}

declare class InterpTrackInstSlomo extends InterpTrackInst { 
	OldTimeDilation: number;
	static Load(ResourceName: string): InterpTrackInstSlomo;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstSlomo;
	static GetDefaultObject(): InterpTrackInstSlomo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstSlomo;
	static C(Other: UObject | any): InterpTrackInstSlomo;
}

declare class InterpTrackInstSound extends InterpTrackInst { 
	LastUpdatePosition: number;
	PlayAudioComp: AudioComponent;
	static Load(ResourceName: string): InterpTrackInstSound;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstSound;
	static GetDefaultObject(): InterpTrackInstSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstSound;
	static C(Other: UObject | any): InterpTrackInstSound;
}

declare type ETrackToggleAction = 'ETTA_Off' | 'ETTA_On' | 'ETTA_Toggle' | 'ETTA_Trigger' | 'ETTA_MAX';
declare var ETrackToggleAction : { ETTA_Off:'ETTA_Off',ETTA_On:'ETTA_On',ETTA_Toggle:'ETTA_Toggle',ETTA_Trigger:'ETTA_Trigger',ETTA_MAX:'ETTA_MAX', };
declare class InterpTrackInstToggle extends InterpTrackInst { 
	Action: ETrackToggleAction;
	LastUpdatePosition: number;
	bSavedActiveState: boolean;
	static Load(ResourceName: string): InterpTrackInstToggle;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstToggle;
	static GetDefaultObject(): InterpTrackInstToggle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstToggle;
	static C(Other: UObject | any): InterpTrackInstToggle;
}

declare class InterpTrackVectorMaterialParam extends InterpTrackVectorBase { 
	TargetMaterials: MaterialInterface[];
	ParamName: string;
	static Load(ResourceName: string): InterpTrackVectorMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorMaterialParam;
	static GetDefaultObject(): InterpTrackVectorMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorMaterialParam;
	static C(Other: UObject | any): InterpTrackVectorMaterialParam;
}

declare class InterpTrackInstVectorMaterialParam extends InterpTrackInst { 
	MaterialInstances: MaterialInstanceDynamic[];
	ResetVectors: Vector[];
	PrimitiveMaterialRefs: PrimitiveMaterialRef[];
	InstancedTrack: InterpTrackVectorMaterialParam;
	static Load(ResourceName: string): InterpTrackInstVectorMaterialParam;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVectorMaterialParam;
	static GetDefaultObject(): InterpTrackInstVectorMaterialParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVectorMaterialParam;
	static C(Other: UObject | any): InterpTrackInstVectorMaterialParam;
}

declare class InterpTrackInstVectorProp extends InterpTrackInstProperty { 
	ResetVector: Vector;
	static Load(ResourceName: string): InterpTrackInstVectorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVectorProp;
	static GetDefaultObject(): InterpTrackInstVectorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVectorProp;
	static C(Other: UObject | any): InterpTrackInstVectorProp;
}

declare type EVisibilityTrackAction = 'EVTA_Hide' | 'EVTA_Show' | 'EVTA_Toggle' | 'EVTA_MAX';
declare var EVisibilityTrackAction : { EVTA_Hide:'EVTA_Hide',EVTA_Show:'EVTA_Show',EVTA_Toggle:'EVTA_Toggle',EVTA_MAX:'EVTA_MAX', };
declare class InterpTrackInstVisibility extends InterpTrackInst { 
	Action: EVisibilityTrackAction;
	LastUpdatePosition: number;
	static Load(ResourceName: string): InterpTrackInstVisibility;
	static Find(Outer: UObject, ResourceName: string): InterpTrackInstVisibility;
	static GetDefaultObject(): InterpTrackInstVisibility;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstVisibility;
	static C(Other: UObject | any): InterpTrackInstVisibility;
}

declare class InterpCurvePointLinearColor { 
	InVal: number;
	OutVal: LinearColor;
	ArriveTangent: LinearColor;
	LeaveTangent: LinearColor;
	InterpMode: EInterpCurveMode;
	clone() : InterpCurvePointLinearColor;
	static C(Other: UObject | any): InterpCurvePointLinearColor;
}

declare class InterpCurveLinearColor { 
	Points: InterpCurvePointLinearColor[];
	bIsLooped: boolean;
	LoopKeyOffset: number;
	clone() : InterpCurveLinearColor;
	static C(Other: UObject | any): InterpCurveLinearColor;
}

declare class InterpTrackLinearColorBase extends InterpTrack { 
	LinearColorTrack: InterpCurveLinearColor;
	CurveTension: number;
	static Load(ResourceName: string): InterpTrackLinearColorBase;
	static Find(Outer: UObject, ResourceName: string): InterpTrackLinearColorBase;
	static GetDefaultObject(): InterpTrackLinearColorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackLinearColorBase;
	static C(Other: UObject | any): InterpTrackLinearColorBase;
}

declare class InterpTrackLinearColorProp extends InterpTrackLinearColorBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackLinearColorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackLinearColorProp;
	static GetDefaultObject(): InterpTrackLinearColorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackLinearColorProp;
	static C(Other: UObject | any): InterpTrackLinearColorProp;
}

declare type EInterpMoveAxis = 'AXIS_TranslationX' | 'AXIS_TranslationY' | 'AXIS_TranslationZ' | 'AXIS_RotationX' | 'AXIS_RotationY' | 'AXIS_RotationZ' | 'AXIS_MAX';
declare var EInterpMoveAxis : { AXIS_TranslationX:'AXIS_TranslationX',AXIS_TranslationY:'AXIS_TranslationY',AXIS_TranslationZ:'AXIS_TranslationZ',AXIS_RotationX:'AXIS_RotationX',AXIS_RotationY:'AXIS_RotationY',AXIS_RotationZ:'AXIS_RotationZ',AXIS_MAX:'AXIS_MAX', };
declare class InterpTrackMoveAxis extends InterpTrackFloatBase { 
	MoveAxis: EInterpMoveAxis;
	LookupTrack: InterpLookupTrack;
	static Load(ResourceName: string): InterpTrackMoveAxis;
	static Find(Outer: UObject, ResourceName: string): InterpTrackMoveAxis;
	static GetDefaultObject(): InterpTrackMoveAxis;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackMoveAxis;
	static C(Other: UObject | any): InterpTrackMoveAxis;
}

declare class ParticleReplayTrackKey { 
	Time: number;
	Duration: number;
	ClipIDNumber: number;
	clone() : ParticleReplayTrackKey;
	static C(Other: UObject | any): ParticleReplayTrackKey;
}

declare class InterpTrackParticleReplay extends InterpTrack { 
	TrackKeys: ParticleReplayTrackKey[];
	bIsCapturingReplay: boolean;
	FixedTimeStep: number;
	static Load(ResourceName: string): InterpTrackParticleReplay;
	static Find(Outer: UObject, ResourceName: string): InterpTrackParticleReplay;
	static GetDefaultObject(): InterpTrackParticleReplay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackParticleReplay;
	static C(Other: UObject | any): InterpTrackParticleReplay;
}

declare class InterpTrackSlomo extends InterpTrackFloatBase { 
	static Load(ResourceName: string): InterpTrackSlomo;
	static Find(Outer: UObject, ResourceName: string): InterpTrackSlomo;
	static GetDefaultObject(): InterpTrackSlomo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackSlomo;
	static C(Other: UObject | any): InterpTrackSlomo;
}

declare class SoundTrackKey { 
	Time: number;
	Volume: number;
	Pitch: number;
	Sound: SoundBase;
	clone() : SoundTrackKey;
	static C(Other: UObject | any): SoundTrackKey;
}

declare class InterpTrackSound extends InterpTrackVectorBase { 
	Sounds: SoundTrackKey[];
	bPlayOnReverse: boolean;
	bContinueSoundOnMatineeEnd: boolean;
	bSuppressSubtitles: boolean;
	bTreatAsDialogue: boolean;
	bAttach: boolean;
	static Load(ResourceName: string): InterpTrackSound;
	static Find(Outer: UObject, ResourceName: string): InterpTrackSound;
	static GetDefaultObject(): InterpTrackSound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackSound;
	static C(Other: UObject | any): InterpTrackSound;
}

declare class ToggleTrackKey { 
	Time: number;
	ToggleAction: ETrackToggleAction;
	clone() : ToggleTrackKey;
	static C(Other: UObject | any): ToggleTrackKey;
}

declare class InterpTrackToggle extends InterpTrack { 
	ToggleTrack: ToggleTrackKey[];
	bActivateSystemEachUpdate: boolean;
	bActivateWithJustAttachedFlag: boolean;
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	static Load(ResourceName: string): InterpTrackToggle;
	static Find(Outer: UObject, ResourceName: string): InterpTrackToggle;
	static GetDefaultObject(): InterpTrackToggle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackToggle;
	static C(Other: UObject | any): InterpTrackToggle;
}

declare class InterpTrackVectorProp extends InterpTrackVectorBase { 
	PropertyName: string;
	static Load(ResourceName: string): InterpTrackVectorProp;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVectorProp;
	static GetDefaultObject(): InterpTrackVectorProp;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVectorProp;
	static C(Other: UObject | any): InterpTrackVectorProp;
}

declare type EVisibilityTrackCondition = 'EVTC_Always' | 'EVTC_GoreEnabled' | 'EVTC_GoreDisabled' | 'EVTC_MAX';
declare var EVisibilityTrackCondition : { EVTC_Always:'EVTC_Always',EVTC_GoreEnabled:'EVTC_GoreEnabled',EVTC_GoreDisabled:'EVTC_GoreDisabled',EVTC_MAX:'EVTC_MAX', };
declare class VisibilityTrackKey { 
	Time: number;
	Action: EVisibilityTrackAction;
	ActiveCondition: EVisibilityTrackCondition;
	clone() : VisibilityTrackKey;
	static C(Other: UObject | any): VisibilityTrackKey;
}

declare class InterpTrackVisibility extends InterpTrack { 
	VisibilityTrack: VisibilityTrackKey[];
	bFireEventsWhenForwards: boolean;
	bFireEventsWhenBackwards: boolean;
	bFireEventsWhenJumpingForwards: boolean;
	static Load(ResourceName: string): InterpTrackVisibility;
	static Find(Outer: UObject, ResourceName: string): InterpTrackVisibility;
	static GetDefaultObject(): InterpTrackVisibility;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackVisibility;
	static C(Other: UObject | any): InterpTrackVisibility;
}

declare class IntSerialization extends UObject { 
	UnsignedInt16Variable: any;
	UnsignedInt32Variable: any;
	UnsignedInt64Variable: any;
	SignedInt8Variable: any;
	SignedInt16Variable: any;
	SignedInt64Variable: any;
	UnsignedInt8Variable: number;
	SignedInt32Variable: number;
	static Load(ResourceName: string): IntSerialization;
	static Find(Outer: UObject, ResourceName: string): IntSerialization;
	static GetDefaultObject(): IntSerialization;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntSerialization;
	static C(Other: UObject | any): IntSerialization;
}

declare class ISMPartitionInstanceManager extends Interface { 
	static Load(ResourceName: string): ISMPartitionInstanceManager;
	static Find(Outer: UObject, ResourceName: string): ISMPartitionInstanceManager;
	static GetDefaultObject(): ISMPartitionInstanceManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ISMPartitionInstanceManager;
	static C(Other: UObject | any): ISMPartitionInstanceManager;
}

declare class ISMPartitionInstanceManagerProvider extends Interface { 
	static Load(ResourceName: string): ISMPartitionInstanceManagerProvider;
	static Find(Outer: UObject, ResourceName: string): ISMPartitionInstanceManagerProvider;
	static GetDefaultObject(): ISMPartitionInstanceManagerProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ISMPartitionInstanceManagerProvider;
	static C(Other: UObject | any): ISMPartitionInstanceManagerProvider;
}

declare class KillZVolume extends PhysicsVolume { 
	static GetDefaultObject(): KillZVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KillZVolume;
	static C(Other: UObject | any): KillZVolume;
}

declare class KismetArrayLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetArrayLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetArrayLibrary;
	static GetDefaultObject(): KismetArrayLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetArrayLibrary;
	static SetArrayPropertyByName(UObject: UObject,PropertyName: string,Value: number[]): void;
	static FilterArray(TargetArray: Actor[],FilterClass: UnrealEngineClass,FilteredArray?: Actor[]): {FilteredArray: Actor[]};
	static Array_Swap(TargetArray: number[],FirstIndex: number,SecondIndex: number): void;
	static Array_Shuffle(TargetArray: number[]): void;
	static Array_Set(TargetArray: number[],index: number,Item: number,bSizeToFit: boolean): void;
	static Array_Reverse(TargetArray: number[]): void;
	static Array_Resize(TargetArray: number[],Size: number): void;
	static Array_RemoveItem(TargetArray: number[],Item: number): boolean;
	static Array_Remove(TargetArray: number[],IndexToRemove: number): void;
	static Array_RandomFromStream(TargetArray: number[],RandomStream?: RandomStream,OutItem?: number,OutIndex?: number): {RandomStream: RandomStream, OutItem: number, OutIndex: number};
	static Array_Random(TargetArray: number[],OutItem?: number,OutIndex?: number): {OutItem: number, OutIndex: number};
	static Array_Length(TargetArray: number[]): number;
	static Array_LastIndex(TargetArray: number[]): number;
	static Array_IsValidIndex(TargetArray: number[],IndexToTest: number): boolean;
	static Array_IsNotEmpty(TargetArray: number[]): boolean;
	static Array_IsEmpty(TargetArray: number[]): boolean;
	static Array_Insert(TargetArray: number[],NewItem: number,index: number): void;
	static Array_Identical(ArrayA: number[],ArrayB: number[]): boolean;
	static Array_Get(TargetArray: number[],index: number,Item?: number): {Item: number};
	static Array_Find(TargetArray: number[],ItemToFind: number): number;
	static Array_Contains(TargetArray: number[],ItemToFind: number): boolean;
	static Array_Clear(TargetArray: number[]): void;
	static Array_Append(TargetArray: number[],SourceArray: number[]): void;
	static Array_AddUnique(TargetArray: number[],NewItem: number): number;
	static Array_Add(TargetArray: number[],NewItem: number): number;
	static C(Other: UObject | any): KismetArrayLibrary;
}

declare class KismetGuidLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetGuidLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetGuidLibrary;
	static GetDefaultObject(): KismetGuidLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetGuidLibrary;
	static Parse_StringToGuid(GuidString: string,OutGuid?: Guid,Success?: boolean): {OutGuid: Guid, Success: boolean};
	static NotEqual_GuidGuid(A: Guid,B: Guid): boolean;
	static NewGuid(): Guid;
	static IsValid_Guid(InGuid: Guid): boolean;
	static Invalidate_Guid(InGuid?: Guid): {InGuid: Guid};
	static EqualEqual_GuidGuid(A: Guid,B: Guid): boolean;
	static Conv_GuidToString(InGuid: Guid): string;
	static C(Other: UObject | any): KismetGuidLibrary;
}

declare class KismetInputLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetInputLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetInputLibrary;
	static GetDefaultObject(): KismetInputLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetInputLibrary;
	static PointerEvent_IsTouchEvent(Input: UPointerEvent): boolean;
	static PointerEvent_IsMouseButtonDown(Input: UPointerEvent,MouseButton: Key): boolean;
	static PointerEvent_GetWheelDelta(Input: UPointerEvent): number;
	static PointerEvent_GetUserIndex(Input: UPointerEvent): number;
	static PointerEvent_GetTouchpadIndex(Input: UPointerEvent): number;
	static PointerEvent_GetScreenSpacePosition(Input: UPointerEvent): Vector2D;
	static PointerEvent_GetPointerIndex(Input: UPointerEvent): number;
	static PointerEvent_GetLastScreenSpacePosition(Input: UPointerEvent): Vector2D;
	static PointerEvent_GetGestureType(Input: UPointerEvent): ESlateGesture;
	static PointerEvent_GetGestureDelta(Input: UPointerEvent): Vector2D;
	static PointerEvent_GetEffectingButton(Input: UPointerEvent): Key;
	static PointerEvent_GetCursorDelta(Input: UPointerEvent): Vector2D;
	static Key_IsVectorAxis(Key: Key): boolean;
	static Key_IsValid(Key: Key): boolean;
	static Key_IsMouseButton(Key: Key): boolean;
	static Key_IsModifierKey(Key: Key): boolean;
	static Key_IsKeyboardKey(Key: Key): boolean;
	static Key_IsGamepadKey(Key: Key): boolean;
	static Key_IsDigital(Key: Key): boolean;
	static Key_IsButtonAxis(Key: Key): boolean;
	static Key_IsAxis3D(Key: Key): boolean;
	static Key_IsAxis2D(Key: Key): boolean;
	static Key_IsAxis1D(Key: Key): boolean;
	static Key_IsAnalog(Key: Key): boolean;
	static Key_GetNavigationDirectionFromKey(InKeyEvent: KeyEvent): EUINavigation;
	static Key_GetNavigationDirectionFromAnalog(InAnalogEvent: AnalogInputEvent): EUINavigation;
	static Key_GetNavigationActionFromKey(InKeyEvent: KeyEvent): EUINavigationAction;
	static Key_GetNavigationAction(InKey: Key): EUINavigationAction;
	static Key_GetDisplayName(Key: Key): string;
	static InputEvent_IsShiftDown(Input: InputEvent): boolean;
	static InputEvent_IsRightShiftDown(Input: InputEvent): boolean;
	static InputEvent_IsRightControlDown(Input: InputEvent): boolean;
	static InputEvent_IsRightCommandDown(Input: InputEvent): boolean;
	static InputEvent_IsRightAltDown(Input: InputEvent): boolean;
	static InputEvent_IsRepeat(Input: InputEvent): boolean;
	static InputEvent_IsLeftShiftDown(Input: InputEvent): boolean;
	static InputEvent_IsLeftControlDown(Input: InputEvent): boolean;
	static InputEvent_IsLeftCommandDown(Input: InputEvent): boolean;
	static InputEvent_IsLeftAltDown(Input: InputEvent): boolean;
	static InputEvent_IsControlDown(Input: InputEvent): boolean;
	static InputEvent_IsCommandDown(Input: InputEvent): boolean;
	static InputEvent_IsAltDown(Input: InputEvent): boolean;
	static InputChord_GetDisplayName(Key: InputChord): string;
	static GetUserIndex(Input: KeyEvent): number;
	static GetKey(Input: KeyEvent): Key;
	static GetAnalogValue(Input: AnalogInputEvent): number;
	static EqualEqual_KeyKey(A: Key,B: Key): boolean;
	static EqualEqual_InputChordInputChord(A: InputChord,B: InputChord): boolean;
	static CalibrateTilt(): void;
	static C(Other: UObject | any): KismetInputLibrary;
}

declare type ELocalizedTextSourceCategory = 'Game' | 'Engine' | 'Editor' | 'ELocalizedTextSourceCategory_MAX';
declare var ELocalizedTextSourceCategory : { Game:'Game',Engine:'Engine',Editor:'Editor',ELocalizedTextSourceCategory_MAX:'ELocalizedTextSourceCategory_MAX', };
declare class KismetInternationalizationLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetInternationalizationLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetInternationalizationLibrary;
	static GetDefaultObject(): KismetInternationalizationLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetInternationalizationLibrary;
	static SetCurrentLocale(Culture: string,SaveToConfig: boolean): boolean;
	static SetCurrentLanguageAndLocale(Culture: string,SaveToConfig: boolean): boolean;
	static SetCurrentLanguage(Culture: string,SaveToConfig: boolean): boolean;
	static SetCurrentCulture(Culture: string,SaveToConfig: boolean): boolean;
	static SetCurrentAssetGroupCulture(AssetGroup: string,Culture: string,SaveToConfig: boolean): boolean;
	static GetSuitableCulture(AvailableCultures: string[],CultureToMatch: string,FallbackCulture: string): string;
	static GetNativeCulture(TextCategory: ELocalizedTextSourceCategory): string;
	static GetLocalizedCultures(IncludeGame: boolean,IncludeEngine: boolean,IncludeEditor: boolean,IncludeAdditional: boolean): string[];
	static GetCurrentLocale(): string;
	static GetCurrentLanguage(): string;
	static GetCurrentCulture(): string;
	static GetCurrentAssetGroupCulture(AssetGroup: string): string;
	static GetCultureDisplayName(Culture: string,Localized: boolean): string;
	static ClearCurrentAssetGroupCulture(AssetGroup: string,SaveToConfig: boolean): void;
	static C(Other: UObject | any): KismetInternationalizationLibrary;
}

declare class KismetMaterialLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetMaterialLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetMaterialLibrary;
	static GetDefaultObject(): KismetMaterialLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetMaterialLibrary;
	static SetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: LinearColor): void;
	static SetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: number): void;
	static GetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): LinearColor;
	static GetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): number;
	static CreateDynamicMaterialInstance(WorldContextObject: UObject,Parent: MaterialInterface,OptionalName: string,CreationFlags: EMIDCreationFlags): MaterialInstanceDynamic;
	static C(Other: UObject | any): KismetMaterialLibrary;
}

declare class FloatSpringState { 
	clone() : FloatSpringState;
	static C(Other: UObject | any): FloatSpringState;
	ResetFloatSpringState(): {SpringState: FloatSpringState};
	SetFloatSpringStateVelocity(Velocity?: number): {SpringState: FloatSpringState};
	static ResetFloatSpringState(SpringState?: FloatSpringState): {SpringState: FloatSpringState};
	static SetFloatSpringStateVelocity(SpringState?: FloatSpringState,Velocity?: number): {SpringState: FloatSpringState};
}

declare class KismetMathLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetMathLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetMathLibrary;
	static GetDefaultObject(): KismetMathLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetMathLibrary;
	static Xor_IntInt(A: number,B: number): number;
	static Xor_Int64Int64(A: any,B: any): any;
	static Wrap(Value: number,Min: number,Max: number): number;
	static WeightedMovingAverage_FVector(CurrentSample: Vector,PreviousSample: Vector,Weight: number): Vector;
	static WeightedMovingAverage_FRotator(CurrentSample: Rotator,PreviousSample: Rotator,Weight: number): Rotator;
	static WeightedMovingAverage_Float(CurrentSample: number,PreviousSample: number,Weight: number): number;
	static VSizeXYSquared(A: Vector): any;
	static VSizeXY(A: Vector): any;
	static VSizeSquared(A: Vector): any;
	static VSize2DSquared(A: Vector2D): any;
	static VSize2D(A: Vector2D): any;
	static VSize(A: Vector): any;
	static VLerp(A: Vector,B: Vector,Alpha: number): Vector;
	static VInterpTo_Constant(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
	static VInterpTo(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
	static VectorSpringInterp(Current: Vector,Target: Vector,SpringState?: VectorSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number,TargetVelocityAmount?: number,bClamp?: boolean,MinValue?: Vector,MaxValue?: Vector,bInitializeFromTarget?: boolean): {SpringState: VectorSpringState, $: Vector};
	static Vector_Zero(): Vector;
	static Vector_Up(): Vector;
	static Vector_UnwindEuler(A?: Vector): {A: Vector};
	static Vector_UnitCartesianToSpherical(A: Vector): Vector2D;
	static Vector_ToRadians(A: Vector): Vector;
	static Vector_ToDegrees(A: Vector): Vector;
	static Vector_SnappedToGrid(InVect: Vector,InGridSize: number): Vector;
	static Vector_Set(A?: Vector,X?: any,Y?: any,Z?: any): {A: Vector};
	static Vector_Right(): Vector;
	static Vector_Reciprocal(A: Vector): Vector;
	static Vector_ProjectOnToNormal(V: Vector,InNormal: Vector): Vector;
	static Vector_One(): Vector;
	static Vector_NormalUnsafe(A: Vector): Vector;
	static Vector_Normalize(A?: Vector,Tolerance?: number): {A: Vector};
	static Vector_Normal2D(A: Vector,Tolerance: number): Vector;
	static Vector_MirrorByPlane(A: Vector,InPlane: Plane): Vector;
	static Vector_Left(): Vector;
	static Vector_IsZero(A: Vector): boolean;
	static Vector_IsUnit(A: Vector,SquaredLenthTolerance: number): boolean;
	static Vector_IsUniform(A: Vector,Tolerance: number): boolean;
	static Vector_IsNormal(A: Vector): boolean;
	static Vector_IsNearlyZero(A: Vector,Tolerance: number): boolean;
	static Vector_IsNAN(A: Vector): boolean;
	static Vector_HeadingAngle(A: Vector): any;
	static Vector_GetSignVector(A: Vector): Vector;
	static Vector_GetProjection(A: Vector): Vector;
	static Vector_GetAbsMin(A: Vector): any;
	static Vector_GetAbsMax(A: Vector): any;
	static Vector_GetAbs(A: Vector): Vector;
	static Vector_Forward(): Vector;
	static Vector_Down(): Vector;
	static Vector_DistanceSquared(v1: Vector,v2: Vector): any;
	static Vector_Distance2DSquared(v1: Vector,v2: Vector): any;
	static Vector_Distance2D(v1: Vector,v2: Vector): any;
	static Vector_Distance(v1: Vector,v2: Vector): any;
	static Vector_CosineAngle2D(A: Vector,B: Vector): any;
	static Vector_ComponentMin(A: Vector,B: Vector): Vector;
	static Vector_ComponentMax(A: Vector,B: Vector): Vector;
	static Vector_ClampSizeMax2D(A: Vector,Max: any): Vector;
	static Vector_ClampSizeMax(A: Vector,Max: any): Vector;
	static Vector_ClampSize2D(A: Vector,Min: any,Max: any): Vector;
	static Vector_BoundedToCube(InVect: Vector,InRadius: number): Vector;
	static Vector_BoundedToBox(InVect: Vector,InBoxMin: Vector,InBoxMax: Vector): Vector;
	static Vector_Backward(): Vector;
	static Vector_Assign(A?: Vector,InVector?: Vector): {A: Vector};
	static Vector_AddBounded(A?: Vector,InAddVect?: Vector,InRadius?: number): {A: Vector};
	static Vector4_Zero(): Vector4;
	static Vector4_SizeSquared3(A: Vector4): any;
	static Vector4_SizeSquared(A: Vector4): any;
	static Vector4_Size3(A: Vector4): any;
	static Vector4_Size(A: Vector4): any;
	static Vector4_Set(A?: Vector4,X?: any,Y?: any,Z?: any,W?: any): {A: Vector4};
	static Vector4_NormalUnsafe3(A: Vector4): Vector4;
	static Vector4_Normalize3(A?: Vector4,Tolerance?: number): {A: Vector4};
	static Vector4_Normal3(A: Vector4,Tolerance: number): Vector4;
	static Vector4_Negated(A: Vector4): Vector4;
	static Vector4_MirrorByVector3(Direction: Vector4,SurfaceNormal: Vector4): Vector4;
	static Vector4_IsZero(A: Vector4): boolean;
	static Vector4_IsUnit3(A: Vector4,SquaredLenthTolerance: number): boolean;
	static Vector4_IsNormal3(A: Vector4): boolean;
	static Vector4_IsNearlyZero3(A: Vector4,Tolerance: number): boolean;
	static Vector4_IsNAN(A: Vector4): boolean;
	static Vector4_DotProduct3(A: Vector4,B: Vector4): any;
	static Vector4_DotProduct(A: Vector4,B: Vector4): any;
	static Vector4_CrossProduct3(A: Vector4,B: Vector4): Vector4;
	static Vector4_Assign(A?: Vector4,InVector?: Vector4): {A: Vector4};
	static Vector2DInterpTo_Constant(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
	static Vector2DInterpTo(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
	static Vector2D_Zero(): Vector2D;
	static Vector2D_Unit45Deg(): Vector2D;
	static Vector2D_One(): Vector2D;
	static VEase(A: Vector,B: Vector,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Vector;
	static UtcNow(): DateTime;
	static TransformVector4(Matrix: Matrix,Vec4: Vector4): Vector4;
	static TransformRotation(T: Transform,Rotation: Rotator): Rotator;
	static TransformLocation(T: Transform,Location: Vector): Vector;
	static TransformDirection(T: Transform,Direction: Vector): Vector;
	static Transform_Determinant(Transform: Transform): number;
	static ToSign2D(A: Vector2D): Vector2D;
	static ToRounded2D(A: Vector2D): Vector2D;
	static ToDirectionAndLength2D(A: Vector2D,OutDir?: Vector2D,OutLength?: any): {OutDir: Vector2D, OutLength: any};
	static Today(): DateTime;
	static TLerp(A: Transform,B: Transform,Alpha: number,InterpMode: ELerpInterpolationMode): Transform;
	static TInterpTo(Current: Transform,Target: Transform,DeltaTime: number,InterpSpeed: number): Transform;
	static TimespanZeroValue(): Timespan;
	static TimespanRatio(A: Timespan,B: Timespan): number;
	static TimespanMinValue(): Timespan;
	static TimespanMaxValue(): Timespan;
	static TimespanFromString(TimespanString: string,Result?: Timespan): {Result: Timespan, $: boolean};
	static TEase(A: Transform,B: Transform,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Transform;
	static Tan(A: any): any;
	static Subtract_VectorVector(A: Vector,B: Vector): Vector;
	static Subtract_VectorInt(A: Vector,B: number): Vector;
	static Subtract_VectorFloat(A: Vector,B: any): Vector;
	static Subtract_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
	static Subtract_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Subtract_Vector2DFloat(A: Vector2D,B: any): Vector2D;
	static Subtract_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static Subtract_QuatQuat(A: Quat,B: Quat): Quat;
	static Subtract_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
	static Subtract_IntPointIntPoint(A: IntPoint,B: IntPoint): IntPoint;
	static Subtract_IntPointInt(A: IntPoint,B: number): IntPoint;
	static Subtract_IntInt(A: number,B: number): number;
	static Subtract_Int64Int64(A: any,B: any): any;
	static Subtract_DoubleDouble(A: any,B: any): any;
	static Subtract_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static Subtract_DateTimeDateTime(A: DateTime,B: DateTime): Timespan;
	static Subtract_ByteByte(A: number,B: number): number;
	static Square(A: any): any;
	static Sqrt(A: any): any;
	static Spherical2DToUnitCartesian(A: Vector2D): Vector;
	static Sin(A: any): any;
	static SignOfInteger64(A: any): any;
	static SignOfInteger(A: number): number;
	static SignOfFloat(A: any): any;
	static SetVectorSpringStateVelocity(SpringState?: VectorSpringState,Velocity?: Vector): {SpringState: VectorSpringState};
	static SetRandomStreamSeed(Stream?: RandomStream,NewSeed?: number): {Stream: RandomStream};
	static SetQuaternionSpringStateAngularVelocity(SpringState?: QuaternionSpringState,AngularVelocity?: Vector): {SpringState: QuaternionSpringState};
	static SetFloatSpringStateVelocity(SpringState?: FloatSpringState,Velocity?: number): {SpringState: FloatSpringState};
	static Set2D(A?: Vector2D,X?: any,Y?: any): {A: Vector2D};
	static SelectVector(A: Vector,B: Vector,bPickA: boolean): Vector;
	static SelectTransform(A: Transform,B: Transform,bPickA: boolean): Transform;
	static SelectString(A: string,B: string,bPickA: boolean): string;
	static SelectRotator(A: Rotator,B: Rotator,bPickA: boolean): Rotator;
	static SelectObject(A: UObject,B: UObject,bSelectA: boolean): UObject;
	static SelectInt(A: number,B: number,bPickA: boolean): number;
	static SelectFloat(A: any,B: any,bPickA: boolean): any;
	static SelectColor(A: LinearColor,B: LinearColor,bPickA: boolean): LinearColor;
	static SelectClass(A: UnrealEngineClass,B: UnrealEngineClass,bSelectA: boolean): UnrealEngineClass;
	static SeedRandomStream(Stream?: RandomStream): {Stream: RandomStream};
	static SafeDivide(A: any,B: any): any;
	static Round64(A: any): any;
	static Round(A: any): number;
	static RotatorFromAxisAndAngle(Axis: Vector,Angle: number): Rotator;
	static RotateAngleAxis(InVect: Vector,AngleDeg: number,Axis: Vector): Vector;
	static RLerp(A: Rotator,B: Rotator,Alpha: number,bShortestPath: boolean): Rotator;
	static RInterpTo_Constant(Current: Rotator,Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
	static RInterpTo(Current: Rotator,Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
	static RGBToHSV_Vector(RGB: LinearColor,HSV?: LinearColor): {HSV: LinearColor};
	static RGBToHSV(InColor: LinearColor,H?: number,S?: number,V?: number,A?: number): {H: number, S: number, V: number, A: number};
	static RGBLinearToHSV(RGB: LinearColor): LinearColor;
	static ResetVectorSpringState(SpringState?: VectorSpringState): {SpringState: VectorSpringState};
	static ResetRandomStream(Stream: RandomStream): void;
	static ResetQuaternionSpringState(SpringState?: QuaternionSpringState): {SpringState: QuaternionSpringState};
	static ResetFloatSpringState(SpringState?: FloatSpringState): {SpringState: FloatSpringState};
	static REase(A: Rotator,B: Rotator,Alpha: number,bShortestPath: boolean,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Rotator;
	static RandomUnitVectorInEllipticalConeInRadiansFromStream(ConeDir: Vector,MaxYawInRadians: number,MaxPitchInRadians: number,Stream: RandomStream): Vector;
	static RandomUnitVectorInEllipticalConeInRadians(ConeDir: Vector,MaxYawInRadians: number,MaxPitchInRadians: number): Vector;
	static RandomUnitVectorInEllipticalConeInDegreesFromStream(ConeDir: Vector,MaxYawInDegrees: number,MaxPitchInDegrees: number,Stream: RandomStream): Vector;
	static RandomUnitVectorInEllipticalConeInDegrees(ConeDir: Vector,MaxYawInDegrees: number,MaxPitchInDegrees: number): Vector;
	static RandomUnitVectorInConeInRadiansFromStream(ConeDir: Vector,ConeHalfAngleInRadians: number,Stream: RandomStream): Vector;
	static RandomUnitVectorInConeInRadians(ConeDir: Vector,ConeHalfAngleInRadians: number): Vector;
	static RandomUnitVectorInConeInDegreesFromStream(ConeDir: Vector,ConeHalfAngleInDegrees: number,Stream: RandomStream): Vector;
	static RandomUnitVectorInConeInDegrees(ConeDir: Vector,ConeHalfAngleInDegrees: number): Vector;
	static RandomUnitVectorFromStream(Stream: RandomStream): Vector;
	static RandomUnitVector(): Vector;
	static RandomRotatorFromStream(bRoll: boolean,Stream: RandomStream): Rotator;
	static RandomRotator(bRoll: boolean): Rotator;
	static RandomPointInBoundingBoxFromStream(Center: Vector,HalfSize: Vector,Stream: RandomStream): Vector;
	static RandomPointInBoundingBox(Center: Vector,HalfSize: Vector): Vector;
	static RandomIntegerInRangeFromStream(Min: number,Max: number,Stream: RandomStream): number;
	static RandomIntegerInRange(Min: number,Max: number): number;
	static RandomIntegerFromStream(Max: number,Stream: RandomStream): number;
	static RandomInteger64InRange(Min: any,Max: any): any;
	static RandomInteger64(Max: any): any;
	static RandomInteger(Max: number): number;
	static RandomFloatInRangeFromStream(Min: number,Max: number,Stream: RandomStream): number;
	static RandomFloatInRange(Min: any,Max: any): any;
	static RandomFloatFromStream(Stream: RandomStream): number;
	static RandomFloat(): any;
	static RandomBoolWithWeightFromStream(Weight: number,RandomStream: RandomStream): boolean;
	static RandomBoolWithWeight(Weight: number): boolean;
	static RandomBoolFromStream(Stream: RandomStream): boolean;
	static RandomBool(): boolean;
	static RadiansToDegrees(A: any): any;
	static QuaternionSpringInterp(Current: Quat,Target: Quat,SpringState?: QuaternionSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number,TargetVelocityAmount?: number,bInitializeFromTarget?: boolean): {SpringState: QuaternionSpringState, $: Quat};
	static Quat_VectorUp(Q: Quat): Vector;
	static Quat_VectorRight(Q: Quat): Vector;
	static Quat_VectorForward(Q: Quat): Vector;
	static Quat_UnrotateVector(Q: Quat,V: Vector): Vector;
	static Quat_SizeSquared(Q: Quat): number;
	static Quat_Size(Q: Quat): number;
	static Quat_SetFromEuler(Q?: Quat,Euler?: Vector): {Q: Quat};
	static Quat_SetComponents(Q?: Quat,X?: number,Y?: number,Z?: number,W?: number): {Q: Quat};
	static Quat_Rotator(Q: Quat): Rotator;
	static Quat_RotateVector(Q: Quat,V: Vector): Vector;
	static Quat_Normalized(Q: Quat,Tolerance: number): Quat;
	static Quat_Normalize(Q?: Quat,Tolerance?: number): {Q: Quat};
	static Quat_MakeFromEuler(Euler: Vector): Quat;
	static Quat_Log(Q: Quat): Quat;
	static Quat_IsNormalized(Q: Quat): boolean;
	static Quat_IsNonFinite(Q: Quat): boolean;
	static Quat_IsIdentity(Q: Quat,Tolerance: number): boolean;
	static Quat_IsFinite(Q: Quat): boolean;
	static Quat_Inversed(Q: Quat): Quat;
	static Quat_Identity(): Quat;
	static Quat_GetRotationAxis(Q: Quat): Vector;
	static Quat_GetAxisZ(Q: Quat): Vector;
	static Quat_GetAxisY(Q: Quat): Vector;
	static Quat_GetAxisX(Q: Quat): Vector;
	static Quat_GetAngle(Q: Quat): number;
	static Quat_Exp(Q: Quat): Quat;
	static Quat_Euler(Q: Quat): Vector;
	static Quat_EnforceShortestArcWith(A?: Quat,B?: Quat): {A: Quat};
	static Quat_AngularDistance(A: Quat,B: Quat): number;
	static ProjectVectorOnToVector(V: Vector,Target: Vector): Vector;
	static ProjectVectorOnToPlane(V: Vector,PlaneNormal: Vector): Vector;
	static ProjectPointOnToPlane(Point: Vector,PlaneBase: Vector,PlaneNormal: Vector): Vector;
	static PointsAreCoplanar(Points: Vector[],Tolerance: number): boolean;
	static PerlinNoise1D(Value: number): number;
	static Percent_IntInt(A: number,B: number): number;
	static Percent_FloatFloat(A: any,B: any): any;
	static Percent_ByteByte(A: number,B: number): number;
	static Or_IntInt(A: number,B: number): number;
	static Or_Int64Int64(A: any,B: any): any;
	static Now(): DateTime;
	static NotEqualExactly_VectorVector(A: Vector,B: Vector): boolean;
	static NotEqualExactly_Vector4Vector4(A: Vector4,B: Vector4): boolean;
	static NotEqualExactly_Vector2DVector2D(A: Vector2D,B: Vector2D): boolean;
	static NotEqual_VectorVector(A: Vector,B: Vector,ErrorTolerance: number): boolean;
	static NotEqual_Vector4Vector4(A: Vector4,B: Vector4,ErrorTolerance: number): boolean;
	static NotEqual_Vector2DVector2D(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
	static NotEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static NotEqual_RotatorRotator(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
	static NotEqual_QuatQuat(A: Quat,B: Quat,ErrorTolerance: number): boolean;
	static NotEqual_ObjectObject(A: UObject,B: UObject): boolean;
	static NotEqual_NameName(A: string,B: string): boolean;
	static NotEqual_MatrixMatrix(A: Matrix,B: Matrix,Tolerance: number): boolean;
	static NotEqual_LinearColorLinearColor(A: LinearColor,B: LinearColor): boolean;
	static NotEqual_IntPointIntPoint(A: IntPoint,B: IntPoint): boolean;
	static NotEqual_IntInt(A: number,B: number): boolean;
	static NotEqual_Int64Int64(A: any,B: any): boolean;
	static NotEqual_DoubleDouble(A: any,B: any): boolean;
	static NotEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static NotEqual_ClassClass(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
	static NotEqual_ByteByte(A: number,B: number): boolean;
	static NotEqual_BoolBool(A: boolean,B: boolean): boolean;
	static Not_PreBool(A: boolean): boolean;
	static Not_Int64(A: any): any;
	static Not_Int(A: number): number;
	static NormalSafe2D(A: Vector2D,Tolerance: number): Vector2D;
	static NormalizeToRange(Value: any,RangeMin: any,RangeMax: any): any;
	static NormalizedDeltaRotator(A: Rotator,B: Rotator): Rotator;
	static NormalizeAxis(Angle: number): number;
	static Normalize2D(A?: Vector2D,Tolerance?: number): {A: Vector2D};
	static Normal2D(A: Vector2D): Vector2D;
	static Normal(A: Vector,Tolerance: number): Vector;
	static NegateVector(A: Vector): Vector;
	static NegateRotator(A: Rotator): Rotator;
	static Negated2D(A: Vector2D): Vector2D;
	static NearlyEqual_TransformTransform(A: Transform,B: Transform,LocationTolerance: number,RotationTolerance: number,Scale3DTolerance: number): boolean;
	static NearlyEqual_FloatFloat(A: any,B: any,ErrorTolerance: any): boolean;
	static MultiplyMultiply_FloatFloat(Base: any,Exp: any): any;
	static MultiplyByPi(Value: any): any;
	static Multiply_VectorVector(A: Vector,B: Vector): Vector;
	static Multiply_VectorInt(A: Vector,B: number): Vector;
	static Multiply_VectorFloat(A: Vector,B: any): Vector;
	static Multiply_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
	static Multiply_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Multiply_Vector2DFloat(A: Vector2D,B: any): Vector2D;
	static Multiply_TimespanFloat(A: Timespan,Scalar: number): Timespan;
	static Multiply_RotatorInt(A: Rotator,B: number): Rotator;
	static Multiply_RotatorFloat(A: Rotator,B: number): Rotator;
	static Multiply_QuatQuat(A: Quat,B: Quat): Quat;
	static Multiply_MatrixMatrix(A: Matrix,B: Matrix): Matrix;
	static Multiply_MatrixFloat(A: Matrix,B: any): Matrix;
	static Multiply_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
	static Multiply_LinearColorFloat(A: LinearColor,B: number): LinearColor;
	static Multiply_IntPointIntPoint(A: IntPoint,B: IntPoint): IntPoint;
	static Multiply_IntPointInt(A: IntPoint,B: number): IntPoint;
	static Multiply_IntInt(A: number,B: number): number;
	static Multiply_IntFloat(A: number,B: any): any;
	static Multiply_Int64Int64(A: any,B: any): any;
	static Multiply_DoubleDouble(A: any,B: any): any;
	static Multiply_ByteByte(A: number,B: number): number;
	static MirrorVectorByNormal(InVect: Vector,InNormal: Vector): Vector;
	static MinOfIntArray(IntArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinOfFloatArray(FloatArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinOfByteArray(ByteArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
	static MinInt64(A: any,B: any): any;
	static MinimumAreaRectangle(WorldContextObject: UObject,InVerts: Vector[],SampleSurfaceNormal: Vector,OutRectCenter?: Vector,OutRectRotation?: Rotator,OutSideLengthX?: number,OutSideLengthY?: number,bDebugDraw?: boolean): {OutRectCenter: Vector, OutRectRotation: Rotator, OutSideLengthX: number, OutSideLengthY: number};
	static MinAreaRectangle(WorldContextObject: UObject,InPoints: Vector[],SampleSurfaceNormal: Vector,OutRectCenter?: Vector,OutRectRotation?: Rotator,OutRectLengthX?: number,OutRectLengthY?: number,bDebugDraw?: boolean): {OutRectCenter: Vector, OutRectRotation: Rotator, OutRectLengthX: number, OutRectLengthY: number};
	static Min(A: number,B: number): number;
	static MaxOfIntArray(IntArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static MaxOfFloatArray(FloatArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static MaxOfByteArray(ByteArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
	static MaxInt64(A: any,B: any): any;
	static Max(A: number,B: number): number;
	static Matrix_TransformVector4(M: Matrix,V: Vector4): Vector4;
	static Matrix_TransformVector(M: Matrix,V: Vector): Vector4;
	static Matrix_TransformPosition(M: Matrix,V: Vector): Vector4;
	static Matrix_ToQuat(M: Matrix): Quat;
	static Matrix_SetOrigin(M?: Matrix,NewOrigin?: Vector): {M: Matrix};
	static Matrix_SetColumn(M?: Matrix,Column?: EMatrixColumns,Value?: Vector): {M: Matrix};
	static Matrix_SetAxis(M?: Matrix,Axis?: EAxis,AxisVector?: Vector): {M: Matrix};
	static Matrix_ScaleTranslation(M: Matrix,Scale3D: Vector): Matrix;
	static Matrix_RemoveTranslation(M: Matrix): Matrix;
	static Matrix_RemoveScaling(M?: Matrix,Tolerance?: number): {M: Matrix};
	static Matrix_Mirror(M: Matrix,MirrorAxis: EAxis,FlipAxis: EAxis): Matrix;
	static Matrix_InverseTransformVector(M: Matrix,V: Vector): Vector;
	static Matrix_InverseTransformPosition(M: Matrix,V: Vector): Vector;
	static Matrix_Identity(): Matrix;
	static Matrix_GetUnitAxis(M: Matrix,Axis: EAxis): Vector;
	static Matrix_GetUnitAxes(M: Matrix,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static Matrix_GetTransposed(M: Matrix): Matrix;
	static Matrix_GetTransposeAdjoint(M: Matrix): Matrix;
	static Matrix_GetScaleVector(M: Matrix,Tolerance: number): Vector;
	static Matrix_GetScaledAxis(M: Matrix,Axis: EAxis): Vector;
	static Matrix_GetScaledAxes(M: Matrix,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static Matrix_GetRotDeterminant(M: Matrix): number;
	static Matrix_GetRotator(M: Matrix): Rotator;
	static Matrix_GetOrigin(InMatrix: Matrix): Vector;
	static Matrix_GetMaximumAxisScale(M: Matrix): number;
	static Matrix_GetMatrixWithoutScale(M: Matrix,Tolerance: number): Matrix;
	static Matrix_GetInverse(M: Matrix): Matrix;
	static Matrix_GetFrustumTopPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetFrustumRightPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetFrustumNearPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetFrustumLeftPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetFrustumFarPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetFrustumBottomPlane(M: Matrix,OutPlane?: Plane): {OutPlane: Plane, $: boolean};
	static Matrix_GetDeterminant(M: Matrix): number;
	static Matrix_GetColumn(M: Matrix,Column: EMatrixColumns): Vector;
	static Matrix_ContainsNaN(M: Matrix): boolean;
	static Matrix_ConcatenateTranslation(M: Matrix,Translation: Vector): Matrix;
	static Matrix_ApplyScale(M: Matrix,Scale: number): Matrix;
	static MapRangeUnclamped(Value: any,InRangeA: any,InRangeB: any,OutRangeA: any,OutRangeB: any): any;
	static MapRangeClamped(Value: any,InRangeA: any,InRangeB: any,OutRangeA: any,OutRangeB: any): any;
	static MakeVector_NetQuantizeNormal(X: any,Y: any,Z: any): Vector_NetQuantizeNormal;
	static MakeVector_NetQuantize100(X: any,Y: any,Z: any): Vector_NetQuantize100;
	static MakeVector_NetQuantize10(X: any,Y: any,Z: any): Vector_NetQuantize10;
	static MakeVector_NetQuantize(X: any,Y: any,Z: any): Vector_NetQuantize;
	static MakeVector4(X: any,Y: any,Z: any,W: any): Vector4;
	static MakeVector2D(X: any,Y: any): Vector2D;
	static MakeVector(X: any,Y: any,Z: any): Vector;
	static MakeTransform(Location: Vector,Rotation: Rotator,Scale: Vector): Transform;
	static MakeTimespan2(Days: number,Hours: number,Minutes: number,Seconds: number,FractionNano: number): Timespan;
	static MakeTimespan(Days: number,Hours: number,Minutes: number,Seconds: number,Milliseconds: number): Timespan;
	static MakeRotFromZY(Z: Vector,Y: Vector): Rotator;
	static MakeRotFromZX(Z: Vector,X: Vector): Rotator;
	static MakeRotFromZ(Z: Vector): Rotator;
	static MakeRotFromYZ(Y: Vector,Z: Vector): Rotator;
	static MakeRotFromYX(Y: Vector,X: Vector): Rotator;
	static MakeRotFromY(Y: Vector): Rotator;
	static MakeRotFromXZ(X: Vector,Z: Vector): Rotator;
	static MakeRotFromXY(X: Vector,Y: Vector): Rotator;
	static MakeRotFromX(X: Vector): Rotator;
	static MakeRotator(Roll: number,Pitch: number,Yaw: number): Rotator;
	static MakeRotationFromAxes(Forward: Vector,Right: Vector,Up: Vector): Rotator;
	static MakeRelativeTransform(A: Transform,RelativeTo: Transform): Transform;
	static MakeRandomStream(InitialSeed: number): RandomStream;
	static MakeQuat(X: number,Y: number,Z: number,W: number): Quat;
	static MakeQualifiedFrameTime(Frame: FrameNumber,FrameRate: FrameRate,SubFrame: number): QualifiedFrameTime;
	static MakePulsatingValue(InCurrentTime: number,InPulsesPerSecond: number,InPhase: number): number;
	static MakePlaneFromPointAndNormal(Point: Vector,Normal: Vector): Plane;
	static MakeFrameRate(Numerator: number,Denominator: number): FrameRate;
	static MakeDateTime(Year: number,Month: number,Day: number,Hour: number,Minute: number,Second: number,Millisecond: number): DateTime;
	static MakeColor(R: number,G: number,B: number,A: number): LinearColor;
	static MakeBoxSphereBounds(Origin: Vector,BoxExtent: Vector,SphereRadius: number): BoxSphereBounds;
	static MakeBox2D(Min: Vector2D,Max: Vector2D): Box2D;
	static MakeBox(Min: Vector,Max: Vector): Box;
	static Loge(A: any): any;
	static Log(A: any,Base: any): any;
	static LinePlaneIntersection_OriginNormal(LineStart: Vector,LineEnd: Vector,PlaneOrigin: Vector,PlaneNormal: Vector,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
	static LinePlaneIntersection(LineStart: Vector,LineEnd: Vector,APlane: Plane,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
	static LinearColorLerpUsingHSV(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
	static LinearColorLerp(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
	static LinearColor_Yellow(): LinearColor;
	static LinearColor_White(): LinearColor;
	static LinearColor_Transparent(): LinearColor;
	static LinearColor_ToRGBE(InLinearColor: LinearColor): Color;
	static LinearColor_ToNewOpacity(InColor: LinearColor,InOpacity: number): LinearColor;
	static LinearColor_SetTemperature(InOutColor?: LinearColor,InTemperature?: number): {InOutColor: LinearColor};
	static LinearColor_SetRGBA(InOutColor?: LinearColor,R?: number,G?: number,B?: number,A?: number): {InOutColor: LinearColor};
	static LinearColor_SetRandomHue(InOutColor?: LinearColor): {InOutColor: LinearColor};
	static LinearColor_SetFromSRGB(InOutColor?: LinearColor,InSRGB?: Color): {InOutColor: LinearColor};
	static LinearColor_SetFromPow22(InOutColor?: LinearColor,InColor?: Color): {InOutColor: LinearColor};
	static LinearColor_SetFromHSV(InOutColor?: LinearColor,H?: number,S?: number,V?: number,A?: number): {InOutColor: LinearColor};
	static LinearColor_Set(InOutColor?: LinearColor,InColor?: LinearColor): {InOutColor: LinearColor};
	static LinearColor_Red(): LinearColor;
	static LinearColor_QuantizeRound(InColor: LinearColor): Color;
	static LinearColor_Quantize(InColor: LinearColor): Color;
	static LinearColor_IsNearEqual(A: LinearColor,B: LinearColor,Tolerance: number): boolean;
	static LinearColor_Green(): LinearColor;
	static LinearColor_Gray(): LinearColor;
	static LinearColor_GetMin(InColor: LinearColor): number;
	static LinearColor_GetMax(InColor: LinearColor): number;
	static LinearColor_GetLuminance(InColor: LinearColor): number;
	static LinearColor_Distance(C1: LinearColor,C2: LinearColor): number;
	static LinearColor_Desaturated(InColor: LinearColor,InDesaturation: number): LinearColor;
	static LinearColor_Blue(): LinearColor;
	static LinearColor_Black(): LinearColor;
	static LessLess_VectorRotator(A: Vector,B: Rotator): Vector;
	static LessEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static LessEqual_IntInt(A: number,B: number): boolean;
	static LessEqual_Int64Int64(A: any,B: any): boolean;
	static LessEqual_DoubleDouble(A: any,B: any): boolean;
	static LessEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static LessEqual_ByteByte(A: number,B: number): boolean;
	static Less_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Less_IntInt(A: number,B: number): boolean;
	static Less_Int64Int64(A: any,B: any): boolean;
	static Less_DoubleDouble(A: any,B: any): boolean;
	static Less_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static Less_ByteByte(A: number,B: number): boolean;
	static Lerp(A: any,B: any,Alpha: any): any;
	static IsZero2D(A: Vector2D): boolean;
	static IsPointInBoxWithTransform(Point: Vector,BoxWorldTransform: Transform,BoxExtent: Vector): boolean;
	static IsPointInBox(Point: Vector,BoxOrigin: Vector,BoxExtent: Vector): boolean;
	static IsNearlyZero2D(A: Vector2D,Tolerance: number): boolean;
	static IsMorning(A: DateTime): boolean;
	static IsLeapYear(Year: number): boolean;
	static IsAfternoon(A: DateTime): boolean;
	static InvertTransform(T: Transform): Transform;
	static InverseTransformRotation(T: Transform,Rotation: Rotator): Rotator;
	static InverseTransformLocation(T: Transform,Location: Vector): Vector;
	static InverseTransformDirection(T: Transform,Direction: Vector): Vector;
	static IntPoint_Zero(): IntPoint;
	static IntPoint_Up(): IntPoint;
	static IntPoint_Right(): IntPoint;
	static IntPoint_One(): IntPoint;
	static IntPoint_Left(): IntPoint;
	static IntPoint_Down(): IntPoint;
	static InRange_IntInt(Value: number,Min: number,Max: number,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
	static InRange_Int64Int64(Value: any,Min: any,Max: any,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
	static InRange_FloatFloat(Value: any,Min: any,Max: any,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
	static Hypotenuse(Width: any,Height: any): any;
	static HSVToRGBLinear(HSV: LinearColor): LinearColor;
	static HSVToRGB_Vector(HSV: LinearColor,RGB?: LinearColor): {RGB: LinearColor};
	static HSVToRGB(H: number,S: number,V: number,A: number): LinearColor;
	static GridSnap_Float(Location: any,GridSize: any): any;
	static GreaterGreater_VectorRotator(A: Vector,B: Rotator): Vector;
	static GreaterEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static GreaterEqual_IntInt(A: number,B: number): boolean;
	static GreaterEqual_Int64Int64(A: any,B: any): boolean;
	static GreaterEqual_DoubleDouble(A: any,B: any): boolean;
	static GreaterEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static GreaterEqual_ByteByte(A: number,B: number): boolean;
	static Greater_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static Greater_IntInt(A: number,B: number): boolean;
	static Greater_Int64Int64(A: any,B: any): boolean;
	static Greater_DoubleDouble(A: any,B: any): boolean;
	static Greater_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static Greater_ByteByte(A: number,B: number): boolean;
	static GetYear(A: DateTime): number;
	static GetYawPitchFromVector(InVec: Vector,Yaw?: number,Pitch?: number): {Yaw: number, Pitch: number};
	static GetVectorArrayAverage(Vectors: Vector[]): Vector;
	static GetUpVector(InRot: Rotator): Vector;
	static GetTotalSeconds(A: Timespan): number;
	static GetTotalMinutes(A: Timespan): number;
	static GetTotalMilliseconds(A: Timespan): number;
	static GetTotalHours(A: Timespan): number;
	static GetTotalDays(A: Timespan): number;
	static GetTimeOfDay(A: DateTime): Timespan;
	static GetTAU(): any;
	static GetSlopeDegreeAngles(MyRightYAxis: Vector,FloorNormal: Vector,UpVector: Vector,OutSlopePitchDegreeAngle?: number,OutSlopeRollDegreeAngle?: number): {OutSlopePitchDegreeAngle: number, OutSlopeRollDegreeAngle: number};
	static GetSeconds(A: Timespan): number;
	static GetSecond(A: DateTime): number;
	static GetRotated2D(A: Vector2D,AngleDeg: number): Vector2D;
	static GetRightVector(InRot: Rotator): Vector;
	static GetReflectionVector(Direction: Vector,SurfaceNormal: Vector): Vector;
	static GetPointDistanceToSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): number;
	static GetPointDistanceToLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): number;
	static GetPI(): any;
	static GetMonth(A: DateTime): number;
	static GetMinutes(A: Timespan): number;
	static GetMinute(A: DateTime): number;
	static GetMinElement(A: Vector): any;
	static GetMin2D(A: Vector2D): any;
	static GetMilliseconds(A: Timespan): number;
	static GetMillisecond(A: DateTime): number;
	static GetMaxElement(A: Vector): any;
	static GetMax2D(A: Vector2D): any;
	static GetHours(A: Timespan): number;
	static GetHour12(A: DateTime): number;
	static GetHour(A: DateTime): number;
	static GetForwardVector(InRot: Rotator): Vector;
	static GetDuration(A: Timespan): Timespan;
	static GetDirectionUnitVector(From: Vector,To: Vector): Vector;
	static GetDays(A: Timespan): number;
	static GetDayOfYear(A: DateTime): number;
	static GetDay(A: DateTime): number;
	static GetDate(A: DateTime): DateTime;
	static GetAzimuthAndElevation(InDirection: Vector,ReferenceFrame: Transform,Azimuth?: number,Elevation?: number): {Azimuth: number, Elevation: number};
	static GetAxes(A: Rotator,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static GetAbsMax2D(A: Vector2D): any;
	static GetAbs2D(A: Vector2D): Vector2D;
	static FWrap(Value: any,Min: any,Max: any): any;
	static FTruncVector(InVector: Vector): IntVector;
	static FTrunc64(A: any): any;
	static FTrunc(A: any): number;
	static FromSeconds(Seconds: number): Timespan;
	static FromMinutes(Minutes: number): Timespan;
	static FromMilliseconds(Milliseconds: number): Timespan;
	static FromHours(Hours: number): Timespan;
	static FromDays(Days: number): Timespan;
	static Fraction(A: any): any;
	static FMod64(Dividend: any,Divisor: any,Remainder?: any): {Remainder: any, $: any};
	static FMod(Dividend: any,Divisor: any,Remainder?: any): {Remainder: any, $: number};
	static FMin(A: any,B: any): any;
	static FMax(A: any,B: any): any;
	static FloatSpringInterp(Current: number,Target: number,SpringState?: FloatSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number,TargetVelocityAmount?: number,bClamp?: boolean,MinValue?: number,MaxValue?: number,bInitializeFromTarget?: boolean): {SpringState: FloatSpringState, $: number};
	static FixedTurn(InCurrent: number,InDesired: number,InDeltaRate: number): number;
	static FInterpTo_Constant(Current: any,Target: any,DeltaTime: any,InterpSpeed: any): any;
	static FInterpTo(Current: any,Target: any,DeltaTime: any,InterpSpeed: any): any;
	static FInterpEaseInOut(A: any,B: any,Alpha: any,Exponent: any): any;
	static FindRelativeLookAtRotation(StartTransform: Transform,TargetLocation: Vector): Rotator;
	static FindNearestPointsOnLineSegments(Segment1Start: Vector,Segment1End: Vector,Segment2Start: Vector,Segment2End: Vector,Segment1Point?: Vector,Segment2Point?: Vector): {Segment1Point: Vector, Segment2Point: Vector};
	static FindLookAtRotation(Start: Vector,Target: Vector): Rotator;
	static FindClosestPointOnSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): Vector;
	static FindClosestPointOnLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): Vector;
	static FFloor64(A: any): any;
	static FFloor(A: any): number;
	static FClamp(Value: any,Min: any,Max: any): any;
	static FCeil64(A: any): any;
	static FCeil(A: any): number;
	static Exp(A: any): any;
	static EqualExactly_VectorVector(A: Vector,B: Vector): boolean;
	static EqualExactly_Vector4Vector4(A: Vector4,B: Vector4): boolean;
	static EqualExactly_Vector2DVector2D(A: Vector2D,B: Vector2D): boolean;
	static EqualEqual_VectorVector(A: Vector,B: Vector,ErrorTolerance: number): boolean;
	static EqualEqual_Vector4Vector4(A: Vector4,B: Vector4,ErrorTolerance: number): boolean;
	static EqualEqual_Vector2DVector2D(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
	static EqualEqual_TransformTransform(A: Transform,B: Transform): boolean;
	static EqualEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
	static EqualEqual_RotatorRotator(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
	static EqualEqual_QuatQuat(A: Quat,B: Quat,Tolerance: number): boolean;
	static EqualEqual_ObjectObject(A: UObject,B: UObject): boolean;
	static EqualEqual_NameName(A: string,B: string): boolean;
	static EqualEqual_MatrixMatrix(A: Matrix,B: Matrix,Tolerance: number): boolean;
	static EqualEqual_LinearColorLinearColor(A: LinearColor,B: LinearColor): boolean;
	static EqualEqual_IntInt(A: number,B: number): boolean;
	static EqualEqual_Int64Int64(A: any,B: any): boolean;
	static EqualEqual_DoubleDouble(A: any,B: any): boolean;
	static EqualEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
	static EqualEqual_ClassClass(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
	static EqualEqual_ByteByte(A: number,B: number): boolean;
	static EqualEqual_BoolBool(A: boolean,B: boolean): boolean;
	static Equal_IntPointIntPoint(A: IntPoint,B: IntPoint): boolean;
	static Ease(A: any,B: any,Alpha: any,EasingFunc: EEasingFunc,BlendExp: any,Steps: number): any;
	static DynamicWeightedMovingAverage_FVector(CurrentSample: Vector,PreviousSample: Vector,MaxDistance: number,MinWeight: number,MaxWeight: number): Vector;
	static DynamicWeightedMovingAverage_FRotator(CurrentSample: Rotator,PreviousSample: Rotator,MaxDistance: number,MinWeight: number,MaxWeight: number): Rotator;
	static DynamicWeightedMovingAverage_Float(CurrentSample: number,PreviousSample: number,MaxDistance: number,MinWeight: number,MaxWeight: number): number;
	static DotProduct2D(A: Vector2D,B: Vector2D): any;
	static Dot_VectorVector(A: Vector,B: Vector): any;
	static Divide_VectorVector(A: Vector,B: Vector): Vector;
	static Divide_VectorInt(A: Vector,B: number): Vector;
	static Divide_VectorFloat(A: Vector,B: any): Vector;
	static Divide_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
	static Divide_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Divide_Vector2DFloat(A: Vector2D,B: any): Vector2D;
	static Divide_TimespanFloat(A: Timespan,Scalar: number): Timespan;
	static Divide_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
	static Divide_IntPointIntPoint(A: IntPoint,B: IntPoint): IntPoint;
	static Divide_IntPointInt(A: IntPoint,B: number): IntPoint;
	static Divide_IntInt(A: number,B: number): number;
	static Divide_Int64Int64(A: any,B: any): any;
	static Divide_DoubleDouble(A: any,B: any): any;
	static Divide_ByteByte(A: number,B: number): number;
	static DistanceSquared2D(v1: Vector2D,v2: Vector2D): any;
	static Distance2D(v1: Vector2D,v2: Vector2D): any;
	static DegTan(A: any): any;
	static DegSin(A: any): any;
	static DegreesToRadians(A: any): any;
	static DegCos(A: any): any;
	static DegAtan2(Y: any,X: any): any;
	static DegAtan(A: any): any;
	static DegAsin(A: any): any;
	static DegAcos(A: any): any;
	static DaysInYear(Year: number): number;
	static DaysInMonth(Year: number,Month: number): number;
	static DateTimeMinValue(): DateTime;
	static DateTimeMaxValue(): DateTime;
	static DateTimeFromString(DateTimeString: string,Result?: DateTime): {Result: DateTime, $: boolean};
	static DateTimeFromIsoString(IsoString: string,Result?: DateTime): {Result: DateTime, $: boolean};
	static CrossProduct2D(A: Vector2D,B: Vector2D): any;
	static Cross_VectorVector(A: Vector,B: Vector): Vector;
	static CreateVectorFromYawPitch(Yaw: number,Pitch: number,Length: number): Vector;
	static Cos(A: any): any;
	static ConvertTransformToRelative(Transform: Transform,ParentTransform: Transform): Transform;
	static Conv_VectorToVector2D(InVector: Vector): Vector2D;
	static Conv_VectorToTransform(InLocation: Vector): Transform;
	static Conv_VectorToRotator(InVec: Vector): Rotator;
	static Conv_VectorToQuaternion(InVec: Vector): Quat;
	static Conv_VectorToLinearColor(InVec: Vector): LinearColor;
	static Conv_Vector4ToVector(InVector4: Vector4): Vector;
	static Conv_Vector4ToRotator(InVec: Vector4): Rotator;
	static Conv_Vector4ToQuaternion(InVec: Vector4): Quat;
	static Conv_Vector2DToVector(InVector2D: Vector2D,Z: number): Vector;
	static Conv_Vector2DToIntPoint(InVector2D: Vector2D): IntPoint;
	static Conv_TransformToMatrix(Transform: Transform): Matrix;
	static Conv_RotatorToVector(InRot: Rotator): Vector;
	static Conv_RotatorToTransform(InRotator: Rotator): Transform;
	static Conv_RotatorToQuaternion(InRot: Rotator): Quat;
	static Conv_MatrixToTransform(InMatrix: Matrix): Transform;
	static Conv_MatrixToRotator(InMatrix: Matrix): Rotator;
	static Conv_LinearColorToVector(InLinearColor: LinearColor): Vector;
	static Conv_LinearColorToColor(InLinearColor: LinearColor,InUseSRGB: boolean): Color;
	static Conv_IntVectorToVector(InIntVector: IntVector): Vector;
	static Conv_IntToVector(inInt: number): Vector;
	static Conv_IntToIntVector(inInt: number): IntVector;
	static Conv_IntToInt64(inInt: number): any;
	static Conv_IntToFloat(inInt: number): number;
	static Conv_IntToDouble(inInt: number): any;
	static Conv_IntToByte(inInt: number): number;
	static Conv_IntToBool(inInt: number): boolean;
	static Conv_IntPointToVector2D(InIntPoint: IntPoint): Vector2D;
	static Conv_Int64ToInt(inInt: any): number;
	static Conv_Int64ToDouble(inInt: any): any;
	static Conv_Int64ToByte(inInt: any): number;
	static Conv_FloatToVector(InFloat: number): Vector;
	static Conv_FloatToLinearColor(InFloat: number): LinearColor;
	static Conv_FloatToDouble(InFloat: number): any;
	static Conv_DoubleToVector(InDouble: any): Vector;
	static Conv_DoubleToLinearColor(InDouble: any): LinearColor;
	static Conv_DoubleToInt64(InDouble: any): any;
	static Conv_DoubleToFloat(InDouble: any): number;
	static Conv_ColorToLinearColor(InColor: Color): LinearColor;
	static Conv_ByteToInt64(InByte: number): any;
	static Conv_ByteToInt(InByte: number): number;
	static Conv_ByteToFloat(InByte: number): number;
	static Conv_ByteToDouble(InByte: number): any;
	static Conv_BoolToInt(InBool: boolean): number;
	static Conv_BoolToFloat(InBool: boolean): number;
	static Conv_BoolToByte(InBool: boolean): number;
	static ComposeTransforms(A: Transform,B: Transform): Transform;
	static ComposeRotators(A: Rotator,B: Rotator): Rotator;
	static ClassIsChildOf(TestClass: UnrealEngineClass,ParentClass: UnrealEngineClass): boolean;
	static ClampVectorSize(A: Vector,Min: any,Max: any): Vector;
	static ClampInt64(Value: any,Min: any,Max: any): any;
	static ClampAxis(Angle: number): number;
	static ClampAxes2D(A: Vector2D,MinAxisVal: any,MaxAxisVal: any): Vector2D;
	static ClampAngle(AngleDegrees: any,MinAngleDegrees: any,MaxAngleDegrees: any): any;
	static Clamp(Value: number,Min: number,Max: number): number;
	static CInterpTo(Current: LinearColor,Target: LinearColor,DeltaTime: number,InterpSpeed: number): LinearColor;
	static BreakVector_NetQuantizeNormal(InVec: Vector_NetQuantizeNormal,X?: any,Y?: any,Z?: any): {X: any, Y: any, Z: any};
	static BreakVector_NetQuantize100(InVec: Vector_NetQuantize100,X?: any,Y?: any,Z?: any): {X: any, Y: any, Z: any};
	static BreakVector_NetQuantize10(InVec: Vector_NetQuantize10,X?: any,Y?: any,Z?: any): {X: any, Y: any, Z: any};
	static BreakVector_NetQuantize(InVec: Vector_NetQuantize,X?: any,Y?: any,Z?: any): {X: any, Y: any, Z: any};
	static BreakVector4(InVec: Vector4,X?: any,Y?: any,Z?: any,W?: any): {X: any, Y: any, Z: any, W: any};
	static BreakVector3f(InVec: Vector3f,X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
	static BreakVector2D(InVec: Vector2D,X?: any,Y?: any): {X: any, Y: any};
	static BreakVector(InVec: Vector,X?: any,Y?: any,Z?: any): {X: any, Y: any, Z: any};
	static BreakTransform(InTransform: Transform,Location?: Vector,Rotation?: Rotator,Scale?: Vector): {Location: Vector, Rotation: Rotator, Scale: Vector};
	static BreakTimespan2(InTimespan: Timespan,Days?: number,Hours?: number,Minutes?: number,Seconds?: number,FractionNano?: number): {Days: number, Hours: number, Minutes: number, Seconds: number, FractionNano: number};
	static BreakTimespan(InTimespan: Timespan,Days?: number,Hours?: number,Minutes?: number,Seconds?: number,Milliseconds?: number): {Days: number, Hours: number, Minutes: number, Seconds: number, Milliseconds: number};
	static BreakRotIntoAxes(InRot: Rotator,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
	static BreakRotator(InRot: Rotator,Roll?: number,Pitch?: number,Yaw?: number): {Roll: number, Pitch: number, Yaw: number};
	static BreakRandomStream(InRandomStream: RandomStream,InitialSeed?: number): {InitialSeed: number};
	static BreakQuat(InQuat: Quat,X?: number,Y?: number,Z?: number,W?: number): {X: number, Y: number, Z: number, W: number};
	static BreakQualifiedFrameTime(InFrameTime: QualifiedFrameTime,Frame?: FrameNumber,FrameRate?: FrameRate,SubFrame?: number): {Frame: FrameNumber, FrameRate: FrameRate, SubFrame: number};
	static BreakFrameRate(InFrameRate: FrameRate,Numerator?: number,Denominator?: number): {Numerator: number, Denominator: number};
	static BreakDateTime(InDateTime: DateTime,Year?: number,Month?: number,Day?: number,Hour?: number,Minute?: number,Second?: number,Millisecond?: number): {Year: number, Month: number, Day: number, Hour: number, Minute: number, Second: number, Millisecond: number};
	static BreakColor(InColor: LinearColor,R?: number,G?: number,B?: number,A?: number): {R: number, G: number, B: number, A: number};
	static BreakBoxSphereBounds(InBoxSphereBounds: BoxSphereBounds,Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
	static BooleanXOR(A: boolean,B: boolean): boolean;
	static BooleanOR(A: boolean,B: boolean): boolean;
	static BooleanNOR(A: boolean,B: boolean): boolean;
	static BooleanNAND(A: boolean,B: boolean): boolean;
	static BooleanAND(A: boolean,B: boolean): boolean;
	static BMin(A: number,B: number): number;
	static BMax(A: number,B: number): number;
	static Atan2(Y: any,X: any): any;
	static Atan(A: any): any;
	static Asin(A: any): any;
	static And_IntInt(A: number,B: number): number;
	static And_Int64Int64(A: any,B: any): any;
	static Add_VectorVector(A: Vector,B: Vector): Vector;
	static Add_VectorInt(A: Vector,B: number): Vector;
	static Add_VectorFloat(A: Vector,B: any): Vector;
	static Add_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
	static Add_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
	static Add_Vector2DFloat(A: Vector2D,B: any): Vector2D;
	static Add_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
	static Add_QuatQuat(A: Quat,B: Quat): Quat;
	static Add_MatrixMatrix(A: Matrix,B: Matrix): Matrix;
	static Add_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
	static Add_IntPointIntPoint(A: IntPoint,B: IntPoint): IntPoint;
	static Add_IntPointInt(A: IntPoint,B: number): IntPoint;
	static Add_IntInt(A: number,B: number): number;
	static Add_Int64Int64(A: any,B: any): any;
	static Add_DoubleDouble(A: any,B: any): any;
	static Add_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
	static Add_DateTimeDateTime(A: DateTime,B: DateTime): DateTime;
	static Add_ByteByte(A: number,B: number): number;
	static Acos(A: any): any;
	static Abs_Int64(A: any): any;
	static Abs_Int(A: number): number;
	static Abs(A: any): any;
	static C(Other: UObject | any): KismetMathLibrary;
}

